// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

/// from: androidx.health.connect.client.HealthConnectClient$Companion
class HealthConnectClient_Companion extends jni.JObject {
  @override
  late final jni.JObjType<HealthConnectClient_Companion> $type = type;

  HealthConnectClient_Companion.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r"androidx/health/connect/client/HealthConnectClient$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $HealthConnectClient_CompanionType();
  static final _id_DEFAULT_PROVIDER_PACKAGE_NAME = _class.staticFieldId(
    r"DEFAULT_PROVIDER_PACKAGE_NAME",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DEFAULT_PROVIDER_PACKAGE_NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DEFAULT_PROVIDER_PACKAGE_NAME =>
      _id_DEFAULT_PROVIDER_PACKAGE_NAME.get(_class, const jni.JStringType());

  static final _id_HEALTH_CONNECT_CLIENT_TAG = _class.staticFieldId(
    r"HEALTH_CONNECT_CLIENT_TAG",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String HEALTH_CONNECT_CLIENT_TAG
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get HEALTH_CONNECT_CLIENT_TAG =>
      _id_HEALTH_CONNECT_CLIENT_TAG.get(_class, const jni.JStringType());

  static final _id_isAvailable = _class.instanceMethodId(
    r"isAvailable",
    r"(Landroid/content/Context;Ljava/util/List;)Z",
  );

  static final _isAvailable = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean isAvailable(android.content.Context context, java.util.List list)
  bool isAvailable(
    Context context,
    jni.JList<jni.JString> list,
  ) {
    return _isAvailable(reference.pointer, _id_isAvailable as jni.JMethodIDPtr,
            context.reference.pointer, list.reference.pointer)
        .boolean;
  }

  static final _id_getOrCreate = _class.instanceMethodId(
    r"getOrCreate",
    r"(Landroid/content/Context;Ljava/util/List;)Landroidx/health/connect/client/HealthConnectClient;",
  );

  static final _getOrCreate = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final androidx.health.connect.client.HealthConnectClient getOrCreate(android.content.Context context, java.util.List list)
  /// The returned object must be released after use, by calling the [release] method.
  HealthConnectClient getOrCreate(
    Context context,
    jni.JList<jni.JString> list,
  ) {
    return _getOrCreate(reference.pointer, _id_getOrCreate as jni.JMethodIDPtr,
            context.reference.pointer, list.reference.pointer)
        .object(const $HealthConnectClientType());
  }

  static final _id_isAvailable1 = _class.instanceMethodId(
    r"isAvailable",
    r"(Landroid/content/Context;)Z",
  );

  static final _isAvailable1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean isAvailable(android.content.Context context)
  bool isAvailable1(
    Context context,
  ) {
    return _isAvailable1(reference.pointer,
            _id_isAvailable1 as jni.JMethodIDPtr, context.reference.pointer)
        .boolean;
  }

  static final _id_getOrCreate1 = _class.instanceMethodId(
    r"getOrCreate",
    r"(Landroid/content/Context;)Landroidx/health/connect/client/HealthConnectClient;",
  );

  static final _getOrCreate1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final androidx.health.connect.client.HealthConnectClient getOrCreate(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  HealthConnectClient getOrCreate1(
    Context context,
  ) {
    return _getOrCreate1(reference.pointer,
            _id_getOrCreate1 as jni.JMethodIDPtr, context.reference.pointer)
        .object(const $HealthConnectClientType());
  }
}

final class $HealthConnectClient_CompanionType
    extends jni.JObjType<HealthConnectClient_Companion> {
  const $HealthConnectClient_CompanionType();

  @override
  String get signature =>
      r"Landroidx/health/connect/client/HealthConnectClient$Companion;";

  @override
  HealthConnectClient_Companion fromReference(jni.JReference reference) =>
      HealthConnectClient_Companion.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($HealthConnectClient_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($HealthConnectClient_CompanionType) &&
        other is $HealthConnectClient_CompanionType;
  }
}

/// from: androidx.health.connect.client.HealthConnectClient
class HealthConnectClient extends jni.JObject {
  @override
  late final jni.JObjType<HealthConnectClient> $type = type;

  HealthConnectClient.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"androidx/health/connect/client/HealthConnectClient");

  /// The type which includes information such as the signature of this class.
  static const type = $HealthConnectClientType();
  static final _id_Companion = _class.staticFieldId(
    r"Companion",
    r"Landroidx/health/connect/client/HealthConnectClient$Companion;",
  );

  /// from: static public final androidx.health.connect.client.HealthConnectClient$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static HealthConnectClient_Companion get Companion =>
      _id_Companion.get(_class, const $HealthConnectClient_CompanionType());

  static final _id_DEFAULT_PROVIDER_PACKAGE_NAME = _class.staticFieldId(
    r"DEFAULT_PROVIDER_PACKAGE_NAME",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DEFAULT_PROVIDER_PACKAGE_NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DEFAULT_PROVIDER_PACKAGE_NAME =>
      _id_DEFAULT_PROVIDER_PACKAGE_NAME.get(_class, const jni.JStringType());

  static final _id_HEALTH_CONNECT_CLIENT_TAG = _class.staticFieldId(
    r"HEALTH_CONNECT_CLIENT_TAG",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String HEALTH_CONNECT_CLIENT_TAG
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get HEALTH_CONNECT_CLIENT_TAG =>
      _id_HEALTH_CONNECT_CLIENT_TAG.get(_class, const jni.JStringType());

  static final _id_getPermissionController = _class.instanceMethodId(
    r"getPermissionController",
    r"()Landroidx/health/connect/client/PermissionController;",
  );

  static final _getPermissionController = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract androidx.health.connect.client.PermissionController getPermissionController()
  /// The returned object must be released after use, by calling the [release] method.
  PermissionController getPermissionController() {
    return _getPermissionController(
            reference.pointer, _id_getPermissionController as jni.JMethodIDPtr)
        .object(const $PermissionControllerType());
  }

  static final _id_insertRecords = _class.instanceMethodId(
    r"insertRecords",
    r"(Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;",
  );

  static final _insertRecords = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object insertRecords(java.util.List list, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> insertRecords(
    jni.JList<jni.JObject> list,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _insertRecords(reference.pointer, _id_insertRecords as jni.JMethodIDPtr,
            list.reference.pointer, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw "Failed";
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_updateRecords = _class.instanceMethodId(
    r"updateRecords",
    r"(Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;",
  );

  static final _updateRecords = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object updateRecords(java.util.List list, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> updateRecords(
    jni.JList<jni.JObject> list,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _updateRecords(reference.pointer, _id_updateRecords as jni.JMethodIDPtr,
            list.reference.pointer, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw "Failed";
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_deleteRecords = _class.instanceMethodId(
    r"deleteRecords",
    r"(Lkotlin/reflect/KClass;Ljava/util/List;Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;",
  );

  static final _deleteRecords = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object deleteRecords(kotlin.reflect.KClass kClass, java.util.List list, java.util.List list1, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> deleteRecords(
    jni.JObject kClass,
    jni.JList<jni.JString> list,
    jni.JList<jni.JString> list1,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _deleteRecords(
            reference.pointer,
            _id_deleteRecords as jni.JMethodIDPtr,
            kClass.reference.pointer,
            list.reference.pointer,
            list1.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw "Failed";
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_deleteRecords1 = _class.instanceMethodId(
    r"deleteRecords",
    r"(Lkotlin/reflect/KClass;Landroidx/health/connect/client/time/TimeRangeFilter;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;",
  );

  static final _deleteRecords1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object deleteRecords(kotlin.reflect.KClass kClass, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> deleteRecords1(
    jni.JObject kClass,
    TimeRangeFilter timeRangeFilter,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _deleteRecords1(
            reference.pointer,
            _id_deleteRecords1 as jni.JMethodIDPtr,
            kClass.reference.pointer,
            timeRangeFilter.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw "Failed";
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_readRecord = _class.instanceMethodId(
    r"readRecord",
    r"(Lkotlin/reflect/KClass;Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;",
  );

  static final _readRecord = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object readRecord(kotlin.reflect.KClass kClass, java.lang.String string, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> readRecord<$T extends jni.JObject>(
    jni.JObject kClass,
    jni.JString string, {
    required jni.JObjType<$T> T,
  }) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _readRecord(
            reference.pointer,
            _id_readRecord as jni.JMethodIDPtr,
            kClass.reference.pointer,
            string.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw "Failed";
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_readRecords = _class.instanceMethodId(
    r"readRecords",
    r"(Landroidx/health/connect/client/request/ReadRecordsRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;",
  );

  static final _readRecords = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object readRecords(androidx.health.connect.client.request.ReadRecordsRequest readRecordsRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> readRecords<$T extends jni.JObject>(
    ReadRecordsRequest<$T> readRecordsRequest, {
    jni.JObjType<$T>? T,
  }) async {
    T ??= jni.lowestCommonSuperType([
      (readRecordsRequest.$type as $ReadRecordsRequestType).T,
    ]) as jni.JObjType<$T>;
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _readRecords(reference.pointer, _id_readRecords as jni.JMethodIDPtr,
            readRecordsRequest.reference.pointer, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw "Failed";
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_aggregate = _class.instanceMethodId(
    r"aggregate",
    r"(Landroidx/health/connect/client/request/AggregateRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;",
  );

  static final _aggregate = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object aggregate(androidx.health.connect.client.request.AggregateRequest aggregateRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<AggregationResult> aggregate(
    AggregateRequest aggregateRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _aggregate(reference.pointer, _id_aggregate as jni.JMethodIDPtr,
            aggregateRequest.reference.pointer, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const $AggregationResultType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw "Failed";
    }
    return const $AggregationResultType().fromReference($o);
  }

  static final _id_aggregateGroupByDuration = _class.instanceMethodId(
    r"aggregateGroupByDuration",
    r"(Landroidx/health/connect/client/request/AggregateGroupByDurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;",
  );

  static final _aggregateGroupByDuration = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object aggregateGroupByDuration(androidx.health.connect.client.request.AggregateGroupByDurationRequest aggregateGroupByDurationRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JList<jni.JObject>> aggregateGroupByDuration(
    AggregateGroupByDurationRequest aggregateGroupByDurationRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _aggregateGroupByDuration(
            reference.pointer,
            _id_aggregateGroupByDuration as jni.JMethodIDPtr,
            aggregateGroupByDurationRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JListType(jni.JObjectType()).jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw "Failed";
    }
    return const jni.JListType(jni.JObjectType()).fromReference($o);
  }

  static final _id_aggregateGroupByPeriod = _class.instanceMethodId(
    r"aggregateGroupByPeriod",
    r"(Landroidx/health/connect/client/request/AggregateGroupByPeriodRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;",
  );

  static final _aggregateGroupByPeriod = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object aggregateGroupByPeriod(androidx.health.connect.client.request.AggregateGroupByPeriodRequest aggregateGroupByPeriodRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JList<jni.JObject>> aggregateGroupByPeriod(
    AggregateGroupByPeriodRequest aggregateGroupByPeriodRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _aggregateGroupByPeriod(
            reference.pointer,
            _id_aggregateGroupByPeriod as jni.JMethodIDPtr,
            aggregateGroupByPeriodRequest.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JListType(jni.JObjectType()).jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw "Failed";
    }
    return const jni.JListType(jni.JObjectType()).fromReference($o);
  }

  static final _id_getChangesToken = _class.instanceMethodId(
    r"getChangesToken",
    r"(Landroidx/health/connect/client/request/ChangesTokenRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;",
  );

  static final _getChangesToken = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getChangesToken(androidx.health.connect.client.request.ChangesTokenRequest changesTokenRequest, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JString> getChangesToken(
    ChangesTokenRequest changesTokenRequest,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _getChangesToken(reference.pointer, _id_getChangesToken as jni.JMethodIDPtr,
            changesTokenRequest.reference.pointer, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JStringType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw "Failed";
    }
    return const jni.JStringType().fromReference($o);
  }

  static final _id_registerForDataNotifications = _class.instanceMethodId(
    r"registerForDataNotifications",
    r"(Ljava/lang/String;Ljava/lang/Iterable;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;",
  );

  static final _registerForDataNotifications = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object registerForDataNotifications(java.lang.String string, java.lang.Iterable iterable, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> registerForDataNotifications(
    jni.JString string,
    jni.JObject iterable,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _registerForDataNotifications(
            reference.pointer,
            _id_registerForDataNotifications as jni.JMethodIDPtr,
            string.reference.pointer,
            iterable.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw "Failed";
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_unregisterFromDataNotifications = _class.instanceMethodId(
    r"unregisterFromDataNotifications",
    r"(Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;",
  );

  static final _unregisterFromDataNotifications = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object unregisterFromDataNotifications(java.lang.String string, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> unregisterFromDataNotifications(
    jni.JString string,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _unregisterFromDataNotifications(
            reference.pointer,
            _id_unregisterFromDataNotifications as jni.JMethodIDPtr,
            string.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw "Failed";
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_getChanges = _class.instanceMethodId(
    r"getChanges",
    r"(Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;",
  );

  static final _getChanges = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getChanges(java.lang.String string, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> getChanges(
    jni.JString string,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _getChanges(reference.pointer, _id_getChanges as jni.JMethodIDPtr,
            string.reference.pointer, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw "Failed";
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_isAvailable = _class.staticMethodId(
    r"isAvailable",
    r"(Landroid/content/Context;Ljava/util/List;)Z",
  );

  static final _isAvailable = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public boolean isAvailable(android.content.Context context, java.util.List list)
  static bool isAvailable(
    Context context,
    jni.JList<jni.JString> list,
  ) {
    return _isAvailable(
            _class.reference.pointer,
            _id_isAvailable as jni.JMethodIDPtr,
            context.reference.pointer,
            list.reference.pointer)
        .boolean;
  }

  static final _id_getOrCreate = _class.staticMethodId(
    r"getOrCreate",
    r"(Landroid/content/Context;Ljava/util/List;)Landroidx/health/connect/client/HealthConnectClient;",
  );

  static final _getOrCreate = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public androidx.health.connect.client.HealthConnectClient getOrCreate(android.content.Context context, java.util.List list)
  /// The returned object must be released after use, by calling the [release] method.
  static HealthConnectClient getOrCreate(
    Context context,
    jni.JList<jni.JString> list,
  ) {
    return _getOrCreate(
            _class.reference.pointer,
            _id_getOrCreate as jni.JMethodIDPtr,
            context.reference.pointer,
            list.reference.pointer)
        .object(const $HealthConnectClientType());
  }

  static final _id_isAvailable1 = _class.staticMethodId(
    r"isAvailable",
    r"(Landroid/content/Context;)Z",
  );

  static final _isAvailable1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public boolean isAvailable(android.content.Context context)
  static bool isAvailable1(
    Context context,
  ) {
    return _isAvailable1(_class.reference.pointer,
            _id_isAvailable1 as jni.JMethodIDPtr, context.reference.pointer)
        .boolean;
  }

  static final _id_getOrCreate1 = _class.staticMethodId(
    r"getOrCreate",
    r"(Landroid/content/Context;)Landroidx/health/connect/client/HealthConnectClient;",
  );

  static final _getOrCreate1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public androidx.health.connect.client.HealthConnectClient getOrCreate(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  static HealthConnectClient getOrCreate1(
    Context context,
  ) {
    return _getOrCreate1(_class.reference.pointer,
            _id_getOrCreate1 as jni.JMethodIDPtr, context.reference.pointer)
        .object(const $HealthConnectClientType());
  }
}

final class $HealthConnectClientType extends jni.JObjType<HealthConnectClient> {
  const $HealthConnectClientType();

  @override
  String get signature =>
      r"Landroidx/health/connect/client/HealthConnectClient;";

  @override
  HealthConnectClient fromReference(jni.JReference reference) =>
      HealthConnectClient.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($HealthConnectClientType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($HealthConnectClientType) &&
        other is $HealthConnectClientType;
  }
}

/// from: androidx.health.connect.client.PermissionController$Companion
class PermissionController_Companion extends jni.JObject {
  @override
  late final jni.JObjType<PermissionController_Companion> $type = type;

  PermissionController_Companion.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r"androidx/health/connect/client/PermissionController$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $PermissionController_CompanionType();
  static final _id_createRequestPermissionResultContract =
      _class.instanceMethodId(
    r"createRequestPermissionResultContract",
    r"(Ljava/lang/String;)Landroidx/activity/result/contract/ActivityResultContract;",
  );

  static final _createRequestPermissionResultContract =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JniResult Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              "globalEnv_CallObjectMethod")
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>)>();

  /// from: public final androidx.activity.result.contract.ActivityResultContract createRequestPermissionResultContract(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject createRequestPermissionResultContract(
    jni.JString string,
  ) {
    return _createRequestPermissionResultContract(
            reference.pointer,
            _id_createRequestPermissionResultContract as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_createRequestPermissionResultContract1 =
      _class.instanceMethodId(
    r"createRequestPermissionResultContract",
    r"()Landroidx/activity/result/contract/ActivityResultContract;",
  );

  static final _createRequestPermissionResultContract1 =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>("globalEnv_CallObjectMethod")
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: public final androidx.activity.result.contract.ActivityResultContract createRequestPermissionResultContract()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject createRequestPermissionResultContract1() {
    return _createRequestPermissionResultContract1(reference.pointer,
            _id_createRequestPermissionResultContract1 as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }
}

final class $PermissionController_CompanionType
    extends jni.JObjType<PermissionController_Companion> {
  const $PermissionController_CompanionType();

  @override
  String get signature =>
      r"Landroidx/health/connect/client/PermissionController$Companion;";

  @override
  PermissionController_Companion fromReference(jni.JReference reference) =>
      PermissionController_Companion.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PermissionController_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PermissionController_CompanionType) &&
        other is $PermissionController_CompanionType;
  }
}

/// from: androidx.health.connect.client.PermissionController
class PermissionController extends jni.JObject {
  @override
  late final jni.JObjType<PermissionController> $type = type;

  PermissionController.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r"androidx/health/connect/client/PermissionController");

  /// The type which includes information such as the signature of this class.
  static const type = $PermissionControllerType();
  static final _id_Companion = _class.staticFieldId(
    r"Companion",
    r"Landroidx/health/connect/client/PermissionController$Companion;",
  );

  /// from: static public final androidx.health.connect.client.PermissionController$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static PermissionController_Companion get Companion =>
      _id_Companion.get(_class, const $PermissionController_CompanionType());

  static final _id_getGrantedPermissions = _class.instanceMethodId(
    r"getGrantedPermissions",
    r"(Ljava/util/Set;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;",
  );

  static final _getGrantedPermissions = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getGrantedPermissions(java.util.Set set, kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JSet<jni.JObject>> getGrantedPermissions(
    jni.JSet<jni.JObject> set0,
  ) async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _getGrantedPermissions(
            reference.pointer,
            _id_getGrantedPermissions as jni.JMethodIDPtr,
            set0.reference.pointer,
            $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JSetType(jni.JObjectType()).jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw "Failed";
    }
    return const jni.JSetType(jni.JObjectType()).fromReference($o);
  }

  static final _id_revokeAllPermissions = _class.instanceMethodId(
    r"revokeAllPermissions",
    r"(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;",
  );

  static final _revokeAllPermissions = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object revokeAllPermissions(kotlin.coroutines.Continuation continuation)
  /// The returned object must be released after use, by calling the [release] method.
  Future<jni.JObject> revokeAllPermissions() async {
    final $p = ReceivePort();
    final $c = jni.JObject.fromReference(
        ProtectedJniExtensions.newPortContinuation($p));
    _revokeAllPermissions(reference.pointer,
            _id_revokeAllPermissions as jni.JMethodIDPtr, $c.reference.pointer)
        .object(const jni.JObjectType());
    final $o = jni.JGlobalReference(jni.JObjectPtr.fromAddress(await $p.first));
    final $k = const jni.JObjectType().jClass.reference.pointer;
    if (!jni.Jni.env.IsInstanceOf($o.pointer, $k)) {
      throw "Failed";
    }
    return const jni.JObjectType().fromReference($o);
  }

  static final _id_createRequestPermissionResultContract =
      _class.staticMethodId(
    r"createRequestPermissionResultContract",
    r"(Ljava/lang/String;)Landroidx/activity/result/contract/ActivityResultContract;",
  );

  static final _createRequestPermissionResultContract =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JniResult Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              "globalEnv_CallStaticObjectMethod")
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>)>();

  /// from: static public androidx.activity.result.contract.ActivityResultContract createRequestPermissionResultContract(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject createRequestPermissionResultContract(
    jni.JString string,
  ) {
    return _createRequestPermissionResultContract(
            _class.reference.pointer,
            _id_createRequestPermissionResultContract as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_createRequestPermissionResultContract1 =
      _class.staticMethodId(
    r"createRequestPermissionResultContract",
    r"()Landroidx/activity/result/contract/ActivityResultContract;",
  );

  static final _createRequestPermissionResultContract1 =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>("globalEnv_CallStaticObjectMethod")
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: static public androidx.activity.result.contract.ActivityResultContract createRequestPermissionResultContract()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject createRequestPermissionResultContract1() {
    return _createRequestPermissionResultContract1(_class.reference.pointer,
            _id_createRequestPermissionResultContract1 as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }
}

final class $PermissionControllerType
    extends jni.JObjType<PermissionController> {
  const $PermissionControllerType();

  @override
  String get signature =>
      r"Landroidx/health/connect/client/PermissionController;";

  @override
  PermissionController fromReference(jni.JReference reference) =>
      PermissionController.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($PermissionControllerType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($PermissionControllerType) &&
        other is $PermissionControllerType;
  }
}

/// from: androidx.health.connect.client.records.StepsRecord$Companion
class StepsRecord_Companion extends jni.JObject {
  @override
  late final jni.JObjType<StepsRecord_Companion> $type = type;

  StepsRecord_Companion.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r"androidx/health/connect/client/records/StepsRecord$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $StepsRecord_CompanionType();
  static final _id_new0 = _class.constructorId(
    r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory StepsRecord_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return StepsRecord_Companion.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $StepsRecord_CompanionType
    extends jni.JObjType<StepsRecord_Companion> {
  const $StepsRecord_CompanionType();

  @override
  String get signature =>
      r"Landroidx/health/connect/client/records/StepsRecord$Companion;";

  @override
  StepsRecord_Companion fromReference(jni.JReference reference) =>
      StepsRecord_Companion.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($StepsRecord_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($StepsRecord_CompanionType) &&
        other is $StepsRecord_CompanionType;
  }
}

/// from: androidx.health.connect.client.records.StepsRecord
class StepsRecord extends jni.JObject {
  @override
  late final jni.JObjType<StepsRecord> $type = type;

  StepsRecord.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"androidx/health/connect/client/records/StepsRecord");

  /// The type which includes information such as the signature of this class.
  static const type = $StepsRecordType();
  static final _id_Companion = _class.staticFieldId(
    r"Companion",
    r"Landroidx/health/connect/client/records/StepsRecord$Companion;",
  );

  /// from: static public final androidx.health.connect.client.records.StepsRecord$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static StepsRecord_Companion get Companion =>
      _id_Companion.get(_class, const $StepsRecord_CompanionType());

  static final _id_COUNT_TOTAL = _class.staticFieldId(
    r"COUNT_TOTAL",
    r"Landroidx/health/connect/client/aggregate/AggregateMetric;",
  );

  /// from: static public final androidx.health.connect.client.aggregate.AggregateMetric COUNT_TOTAL
  /// The returned object must be released after use, by calling the [release] method.
  static AggregateMetric<jni.JLong> get COUNT_TOTAL =>
      _id_COUNT_TOTAL.get(_class, const $AggregateMetricType(jni.JLongType()));

  static final _id_new0 = _class.constructorId(
    r"(JLjava/time/Instant;Ljava/time/ZoneOffset;Ljava/time/Instant;Ljava/time/ZoneOffset;Landroidx/health/connect/client/records/metadata/Metadata;)V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(long j, java.time.Instant instant, java.time.ZoneOffset zoneOffset, java.time.Instant instant1, java.time.ZoneOffset zoneOffset1, androidx.health.connect.client.records.metadata.Metadata metadata)
  /// The returned object must be released after use, by calling the [release] method.
  factory StepsRecord(
    int j,
    Instant instant,
    jni.JObject zoneOffset,
    Instant instant1,
    jni.JObject zoneOffset1,
    jni.JObject metadata,
  ) {
    return StepsRecord.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            j,
            instant.reference.pointer,
            zoneOffset.reference.pointer,
            instant1.reference.pointer,
            zoneOffset1.reference.pointer,
            metadata.reference.pointer)
        .reference);
  }

  static final _id_new1 = _class.constructorId(
    r"(JLjava/time/Instant;Ljava/time/ZoneOffset;Ljava/time/Instant;Ljava/time/ZoneOffset;Landroidx/health/connect/client/records/metadata/Metadata;ILkotlin/jvm/internal/DefaultConstructorMarker;)V",
  );

  static final _new1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(long j, java.time.Instant instant, java.time.ZoneOffset zoneOffset, java.time.Instant instant1, java.time.ZoneOffset zoneOffset1, androidx.health.connect.client.records.metadata.Metadata metadata, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory StepsRecord.new1(
    int j,
    Instant instant,
    jni.JObject zoneOffset,
    Instant instant1,
    jni.JObject zoneOffset1,
    jni.JObject metadata,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return StepsRecord.fromReference(_new1(
            _class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr,
            j,
            instant.reference.pointer,
            zoneOffset.reference.pointer,
            instant1.reference.pointer,
            zoneOffset1.reference.pointer,
            metadata.reference.pointer,
            i,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }

  static final _id_getCount = _class.instanceMethodId(
    r"getCount",
    r"()J",
  );

  static final _getCount = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallLongMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final long getCount()
  int getCount() {
    return _getCount(reference.pointer, _id_getCount as jni.JMethodIDPtr).long;
  }

  static final _id_getStartTime = _class.instanceMethodId(
    r"getStartTime",
    r"()Ljava/time/Instant;",
  );

  static final _getStartTime = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.time.Instant getStartTime()
  /// The returned object must be released after use, by calling the [release] method.
  Instant getStartTime() {
    return _getStartTime(
            reference.pointer, _id_getStartTime as jni.JMethodIDPtr)
        .object(const $InstantType());
  }

  static final _id_getStartZoneOffset = _class.instanceMethodId(
    r"getStartZoneOffset",
    r"()Ljava/time/ZoneOffset;",
  );

  static final _getStartZoneOffset = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.time.ZoneOffset getStartZoneOffset()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getStartZoneOffset() {
    return _getStartZoneOffset(
            reference.pointer, _id_getStartZoneOffset as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getEndTime = _class.instanceMethodId(
    r"getEndTime",
    r"()Ljava/time/Instant;",
  );

  static final _getEndTime = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.time.Instant getEndTime()
  /// The returned object must be released after use, by calling the [release] method.
  Instant getEndTime() {
    return _getEndTime(reference.pointer, _id_getEndTime as jni.JMethodIDPtr)
        .object(const $InstantType());
  }

  static final _id_getEndZoneOffset = _class.instanceMethodId(
    r"getEndZoneOffset",
    r"()Ljava/time/ZoneOffset;",
  );

  static final _getEndZoneOffset = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.time.ZoneOffset getEndZoneOffset()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getEndZoneOffset() {
    return _getEndZoneOffset(
            reference.pointer, _id_getEndZoneOffset as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getMetadata = _class.instanceMethodId(
    r"getMetadata",
    r"()Landroidx/health/connect/client/records/metadata/Metadata;",
  );

  static final _getMetadata = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public androidx.health.connect.client.records.metadata.Metadata getMetadata()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getMetadata() {
    return _getMetadata(reference.pointer, _id_getMetadata as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_equals = _class.instanceMethodId(
    r"equals",
    r"(Ljava/lang/Object;)Z",
  );

  static final _equals = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object object)
  bool equals(
    jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_hashCode1 = _class.instanceMethodId(
    r"hashCode",
    r"()I",
  );

  static final _hashCode1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int hashCode()
  int hashCode1() {
    return _hashCode1(reference.pointer, _id_hashCode1 as jni.JMethodIDPtr)
        .integer;
  }
}

final class $StepsRecordType extends jni.JObjType<StepsRecord> {
  const $StepsRecordType();

  @override
  String get signature =>
      r"Landroidx/health/connect/client/records/StepsRecord;";

  @override
  StepsRecord fromReference(jni.JReference reference) =>
      StepsRecord.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($StepsRecordType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($StepsRecordType) && other is $StepsRecordType;
  }
}

/// from: androidx.health.connect.client.time.TimeRangeFilter$Companion
class TimeRangeFilter_Companion extends jni.JObject {
  @override
  late final jni.JObjType<TimeRangeFilter_Companion> $type = type;

  TimeRangeFilter_Companion.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r"androidx/health/connect/client/time/TimeRangeFilter$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $TimeRangeFilter_CompanionType();
  static final _id_between = _class.instanceMethodId(
    r"between",
    r"(Ljava/time/Instant;Ljava/time/Instant;)Landroidx/health/connect/client/time/TimeRangeFilter;",
  );

  static final _between = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final androidx.health.connect.client.time.TimeRangeFilter between(java.time.Instant instant, java.time.Instant instant1)
  /// The returned object must be released after use, by calling the [release] method.
  TimeRangeFilter between(
    Instant instant,
    Instant instant1,
  ) {
    return _between(reference.pointer, _id_between as jni.JMethodIDPtr,
            instant.reference.pointer, instant1.reference.pointer)
        .object(const $TimeRangeFilterType());
  }

  static final _id_between1 = _class.instanceMethodId(
    r"between",
    r"(Ljava/time/LocalDateTime;Ljava/time/LocalDateTime;)Landroidx/health/connect/client/time/TimeRangeFilter;",
  );

  static final _between1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final androidx.health.connect.client.time.TimeRangeFilter between(java.time.LocalDateTime localDateTime, java.time.LocalDateTime localDateTime1)
  /// The returned object must be released after use, by calling the [release] method.
  TimeRangeFilter between1(
    jni.JObject localDateTime,
    jni.JObject localDateTime1,
  ) {
    return _between1(reference.pointer, _id_between1 as jni.JMethodIDPtr,
            localDateTime.reference.pointer, localDateTime1.reference.pointer)
        .object(const $TimeRangeFilterType());
  }

  static final _id_before = _class.instanceMethodId(
    r"before",
    r"(Ljava/time/Instant;)Landroidx/health/connect/client/time/TimeRangeFilter;",
  );

  static final _before = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final androidx.health.connect.client.time.TimeRangeFilter before(java.time.Instant instant)
  /// The returned object must be released after use, by calling the [release] method.
  TimeRangeFilter before(
    Instant instant,
  ) {
    return _before(reference.pointer, _id_before as jni.JMethodIDPtr,
            instant.reference.pointer)
        .object(const $TimeRangeFilterType());
  }

  static final _id_before1 = _class.instanceMethodId(
    r"before",
    r"(Ljava/time/LocalDateTime;)Landroidx/health/connect/client/time/TimeRangeFilter;",
  );

  static final _before1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final androidx.health.connect.client.time.TimeRangeFilter before(java.time.LocalDateTime localDateTime)
  /// The returned object must be released after use, by calling the [release] method.
  TimeRangeFilter before1(
    jni.JObject localDateTime,
  ) {
    return _before1(reference.pointer, _id_before1 as jni.JMethodIDPtr,
            localDateTime.reference.pointer)
        .object(const $TimeRangeFilterType());
  }

  static final _id_after = _class.instanceMethodId(
    r"after",
    r"(Ljava/time/Instant;)Landroidx/health/connect/client/time/TimeRangeFilter;",
  );

  static final _after = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final androidx.health.connect.client.time.TimeRangeFilter after(java.time.Instant instant)
  /// The returned object must be released after use, by calling the [release] method.
  TimeRangeFilter after(
    Instant instant,
  ) {
    return _after(reference.pointer, _id_after as jni.JMethodIDPtr,
            instant.reference.pointer)
        .object(const $TimeRangeFilterType());
  }

  static final _id_after1 = _class.instanceMethodId(
    r"after",
    r"(Ljava/time/LocalDateTime;)Landroidx/health/connect/client/time/TimeRangeFilter;",
  );

  static final _after1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final androidx.health.connect.client.time.TimeRangeFilter after(java.time.LocalDateTime localDateTime)
  /// The returned object must be released after use, by calling the [release] method.
  TimeRangeFilter after1(
    jni.JObject localDateTime,
  ) {
    return _after1(reference.pointer, _id_after1 as jni.JMethodIDPtr,
            localDateTime.reference.pointer)
        .object(const $TimeRangeFilterType());
  }

  static final _id_new0 = _class.constructorId(
    r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory TimeRangeFilter_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return TimeRangeFilter_Companion.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $TimeRangeFilter_CompanionType
    extends jni.JObjType<TimeRangeFilter_Companion> {
  const $TimeRangeFilter_CompanionType();

  @override
  String get signature =>
      r"Landroidx/health/connect/client/time/TimeRangeFilter$Companion;";

  @override
  TimeRangeFilter_Companion fromReference(jni.JReference reference) =>
      TimeRangeFilter_Companion.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($TimeRangeFilter_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($TimeRangeFilter_CompanionType) &&
        other is $TimeRangeFilter_CompanionType;
  }
}

/// from: androidx.health.connect.client.time.TimeRangeFilter
class TimeRangeFilter extends jni.JObject {
  @override
  late final jni.JObjType<TimeRangeFilter> $type = type;

  TimeRangeFilter.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r"androidx/health/connect/client/time/TimeRangeFilter");

  /// The type which includes information such as the signature of this class.
  static const type = $TimeRangeFilterType();
  static final _id_Companion = _class.staticFieldId(
    r"Companion",
    r"Landroidx/health/connect/client/time/TimeRangeFilter$Companion;",
  );

  /// from: static public final androidx.health.connect.client.time.TimeRangeFilter$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static TimeRangeFilter_Companion get Companion =>
      _id_Companion.get(_class, const $TimeRangeFilter_CompanionType());

  static final _id_new0 = _class.constructorId(
    r"(Ljava/time/Instant;Ljava/time/Instant;Ljava/time/LocalDateTime;Ljava/time/LocalDateTime;)V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.time.Instant instant, java.time.Instant instant1, java.time.LocalDateTime localDateTime, java.time.LocalDateTime localDateTime1)
  /// The returned object must be released after use, by calling the [release] method.
  factory TimeRangeFilter(
    Instant instant,
    Instant instant1,
    jni.JObject localDateTime,
    jni.JObject localDateTime1,
  ) {
    return TimeRangeFilter.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            instant.reference.pointer,
            instant1.reference.pointer,
            localDateTime.reference.pointer,
            localDateTime1.reference.pointer)
        .reference);
  }

  static final _id_new1 = _class.constructorId(
    r"(Ljava/time/Instant;Ljava/time/Instant;Ljava/time/LocalDateTime;Ljava/time/LocalDateTime;ILkotlin/jvm/internal/DefaultConstructorMarker;)V",
  );

  static final _new1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.time.Instant instant, java.time.Instant instant1, java.time.LocalDateTime localDateTime, java.time.LocalDateTime localDateTime1, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory TimeRangeFilter.new1(
    Instant instant,
    Instant instant1,
    jni.JObject localDateTime,
    jni.JObject localDateTime1,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return TimeRangeFilter.fromReference(_new1(
            _class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr,
            instant.reference.pointer,
            instant1.reference.pointer,
            localDateTime.reference.pointer,
            localDateTime1.reference.pointer,
            i,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }

  static final _id_equals = _class.instanceMethodId(
    r"equals",
    r"(Ljava/lang/Object;)Z",
  );

  static final _equals = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object object)
  bool equals(
    jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_hashCode1 = _class.instanceMethodId(
    r"hashCode",
    r"()I",
  );

  static final _hashCode1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int hashCode()
  int hashCode1() {
    return _hashCode1(reference.pointer, _id_hashCode1 as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_new2 = _class.constructorId(
    r"()V",
  );

  static final _new2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory TimeRangeFilter.new2() {
    return TimeRangeFilter.fromReference(
        _new2(_class.reference.pointer, _id_new2 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_between = _class.staticMethodId(
    r"between",
    r"(Ljava/time/Instant;Ljava/time/Instant;)Landroidx/health/connect/client/time/TimeRangeFilter;",
  );

  static final _between = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public final androidx.health.connect.client.time.TimeRangeFilter between(java.time.Instant instant, java.time.Instant instant1)
  /// The returned object must be released after use, by calling the [release] method.
  static TimeRangeFilter between(
    Instant instant,
    Instant instant1,
  ) {
    return _between(_class.reference.pointer, _id_between as jni.JMethodIDPtr,
            instant.reference.pointer, instant1.reference.pointer)
        .object(const $TimeRangeFilterType());
  }

  static final _id_between1 = _class.staticMethodId(
    r"between",
    r"(Ljava/time/LocalDateTime;Ljava/time/LocalDateTime;)Landroidx/health/connect/client/time/TimeRangeFilter;",
  );

  static final _between1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public final androidx.health.connect.client.time.TimeRangeFilter between(java.time.LocalDateTime localDateTime, java.time.LocalDateTime localDateTime1)
  /// The returned object must be released after use, by calling the [release] method.
  static TimeRangeFilter between1(
    jni.JObject localDateTime,
    jni.JObject localDateTime1,
  ) {
    return _between1(_class.reference.pointer, _id_between1 as jni.JMethodIDPtr,
            localDateTime.reference.pointer, localDateTime1.reference.pointer)
        .object(const $TimeRangeFilterType());
  }

  static final _id_before = _class.staticMethodId(
    r"before",
    r"(Ljava/time/Instant;)Landroidx/health/connect/client/time/TimeRangeFilter;",
  );

  static final _before = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public final androidx.health.connect.client.time.TimeRangeFilter before(java.time.Instant instant)
  /// The returned object must be released after use, by calling the [release] method.
  static TimeRangeFilter before(
    Instant instant,
  ) {
    return _before(_class.reference.pointer, _id_before as jni.JMethodIDPtr,
            instant.reference.pointer)
        .object(const $TimeRangeFilterType());
  }

  static final _id_before1 = _class.staticMethodId(
    r"before",
    r"(Ljava/time/LocalDateTime;)Landroidx/health/connect/client/time/TimeRangeFilter;",
  );

  static final _before1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public final androidx.health.connect.client.time.TimeRangeFilter before(java.time.LocalDateTime localDateTime)
  /// The returned object must be released after use, by calling the [release] method.
  static TimeRangeFilter before1(
    jni.JObject localDateTime,
  ) {
    return _before1(_class.reference.pointer, _id_before1 as jni.JMethodIDPtr,
            localDateTime.reference.pointer)
        .object(const $TimeRangeFilterType());
  }

  static final _id_after = _class.staticMethodId(
    r"after",
    r"(Ljava/time/Instant;)Landroidx/health/connect/client/time/TimeRangeFilter;",
  );

  static final _after = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public final androidx.health.connect.client.time.TimeRangeFilter after(java.time.Instant instant)
  /// The returned object must be released after use, by calling the [release] method.
  static TimeRangeFilter after(
    Instant instant,
  ) {
    return _after(_class.reference.pointer, _id_after as jni.JMethodIDPtr,
            instant.reference.pointer)
        .object(const $TimeRangeFilterType());
  }

  static final _id_after1 = _class.staticMethodId(
    r"after",
    r"(Ljava/time/LocalDateTime;)Landroidx/health/connect/client/time/TimeRangeFilter;",
  );

  static final _after1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public final androidx.health.connect.client.time.TimeRangeFilter after(java.time.LocalDateTime localDateTime)
  /// The returned object must be released after use, by calling the [release] method.
  static TimeRangeFilter after1(
    jni.JObject localDateTime,
  ) {
    return _after1(_class.reference.pointer, _id_after1 as jni.JMethodIDPtr,
            localDateTime.reference.pointer)
        .object(const $TimeRangeFilterType());
  }
}

final class $TimeRangeFilterType extends jni.JObjType<TimeRangeFilter> {
  const $TimeRangeFilterType();

  @override
  String get signature =>
      r"Landroidx/health/connect/client/time/TimeRangeFilter;";

  @override
  TimeRangeFilter fromReference(jni.JReference reference) =>
      TimeRangeFilter.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($TimeRangeFilterType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($TimeRangeFilterType) &&
        other is $TimeRangeFilterType;
  }
}

/// from: android.content.Context
class Context extends jni.JObject {
  @override
  late final jni.JObjType<Context> $type = type;

  Context.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"android/content/Context");

  /// The type which includes information such as the signature of this class.
  static const type = $ContextType();
  static final _id_ACCESSIBILITY_SERVICE = _class.staticFieldId(
    r"ACCESSIBILITY_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACCESSIBILITY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACCESSIBILITY_SERVICE =>
      _id_ACCESSIBILITY_SERVICE.get(_class, const jni.JStringType());

  static final _id_ACCOUNT_SERVICE = _class.staticFieldId(
    r"ACCOUNT_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACCOUNT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACCOUNT_SERVICE =>
      _id_ACCOUNT_SERVICE.get(_class, const jni.JStringType());

  static final _id_ACTIVITY_SERVICE = _class.staticFieldId(
    r"ACTIVITY_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTIVITY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTIVITY_SERVICE =>
      _id_ACTIVITY_SERVICE.get(_class, const jni.JStringType());

  static final _id_ALARM_SERVICE = _class.staticFieldId(
    r"ALARM_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ALARM_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ALARM_SERVICE =>
      _id_ALARM_SERVICE.get(_class, const jni.JStringType());

  static final _id_APPWIDGET_SERVICE = _class.staticFieldId(
    r"APPWIDGET_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String APPWIDGET_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get APPWIDGET_SERVICE =>
      _id_APPWIDGET_SERVICE.get(_class, const jni.JStringType());

  static final _id_APP_OPS_SERVICE = _class.staticFieldId(
    r"APP_OPS_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String APP_OPS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get APP_OPS_SERVICE =>
      _id_APP_OPS_SERVICE.get(_class, const jni.JStringType());

  static final _id_APP_SEARCH_SERVICE = _class.staticFieldId(
    r"APP_SEARCH_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String APP_SEARCH_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get APP_SEARCH_SERVICE =>
      _id_APP_SEARCH_SERVICE.get(_class, const jni.JStringType());

  static final _id_AUDIO_SERVICE = _class.staticFieldId(
    r"AUDIO_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String AUDIO_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get AUDIO_SERVICE =>
      _id_AUDIO_SERVICE.get(_class, const jni.JStringType());

  static final _id_BATTERY_SERVICE = _class.staticFieldId(
    r"BATTERY_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String BATTERY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get BATTERY_SERVICE =>
      _id_BATTERY_SERVICE.get(_class, const jni.JStringType());

  /// from: static public final int BIND_ABOVE_CLIENT
  static const BIND_ABOVE_CLIENT = 8;

  /// from: static public final int BIND_ADJUST_WITH_ACTIVITY
  static const BIND_ADJUST_WITH_ACTIVITY = 128;

  /// from: static public final int BIND_ALLOW_OOM_MANAGEMENT
  static const BIND_ALLOW_OOM_MANAGEMENT = 16;

  /// from: static public final int BIND_AUTO_CREATE
  static const BIND_AUTO_CREATE = 1;

  /// from: static public final int BIND_DEBUG_UNBIND
  static const BIND_DEBUG_UNBIND = 2;

  /// from: static public final int BIND_EXTERNAL_SERVICE
  static const BIND_EXTERNAL_SERVICE = -2147483648;

  /// from: static public final int BIND_IMPORTANT
  static const BIND_IMPORTANT = 64;

  /// from: static public final int BIND_INCLUDE_CAPABILITIES
  static const BIND_INCLUDE_CAPABILITIES = 4096;

  /// from: static public final int BIND_NOT_FOREGROUND
  static const BIND_NOT_FOREGROUND = 4;

  /// from: static public final int BIND_NOT_PERCEPTIBLE
  static const BIND_NOT_PERCEPTIBLE = 256;

  /// from: static public final int BIND_WAIVE_PRIORITY
  static const BIND_WAIVE_PRIORITY = 32;
  static final _id_BIOMETRIC_SERVICE = _class.staticFieldId(
    r"BIOMETRIC_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String BIOMETRIC_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get BIOMETRIC_SERVICE =>
      _id_BIOMETRIC_SERVICE.get(_class, const jni.JStringType());

  static final _id_BLOB_STORE_SERVICE = _class.staticFieldId(
    r"BLOB_STORE_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String BLOB_STORE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get BLOB_STORE_SERVICE =>
      _id_BLOB_STORE_SERVICE.get(_class, const jni.JStringType());

  static final _id_BLUETOOTH_SERVICE = _class.staticFieldId(
    r"BLUETOOTH_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String BLUETOOTH_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get BLUETOOTH_SERVICE =>
      _id_BLUETOOTH_SERVICE.get(_class, const jni.JStringType());

  static final _id_BUGREPORT_SERVICE = _class.staticFieldId(
    r"BUGREPORT_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String BUGREPORT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get BUGREPORT_SERVICE =>
      _id_BUGREPORT_SERVICE.get(_class, const jni.JStringType());

  static final _id_CAMERA_SERVICE = _class.staticFieldId(
    r"CAMERA_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CAMERA_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CAMERA_SERVICE =>
      _id_CAMERA_SERVICE.get(_class, const jni.JStringType());

  static final _id_CAPTIONING_SERVICE = _class.staticFieldId(
    r"CAPTIONING_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CAPTIONING_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CAPTIONING_SERVICE =>
      _id_CAPTIONING_SERVICE.get(_class, const jni.JStringType());

  static final _id_CARRIER_CONFIG_SERVICE = _class.staticFieldId(
    r"CARRIER_CONFIG_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CARRIER_CONFIG_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CARRIER_CONFIG_SERVICE =>
      _id_CARRIER_CONFIG_SERVICE.get(_class, const jni.JStringType());

  static final _id_CLIPBOARD_SERVICE = _class.staticFieldId(
    r"CLIPBOARD_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CLIPBOARD_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CLIPBOARD_SERVICE =>
      _id_CLIPBOARD_SERVICE.get(_class, const jni.JStringType());

  static final _id_COMPANION_DEVICE_SERVICE = _class.staticFieldId(
    r"COMPANION_DEVICE_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String COMPANION_DEVICE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get COMPANION_DEVICE_SERVICE =>
      _id_COMPANION_DEVICE_SERVICE.get(_class, const jni.JStringType());

  static final _id_CONNECTIVITY_DIAGNOSTICS_SERVICE = _class.staticFieldId(
    r"CONNECTIVITY_DIAGNOSTICS_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CONNECTIVITY_DIAGNOSTICS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CONNECTIVITY_DIAGNOSTICS_SERVICE =>
      _id_CONNECTIVITY_DIAGNOSTICS_SERVICE.get(_class, const jni.JStringType());

  static final _id_CONNECTIVITY_SERVICE = _class.staticFieldId(
    r"CONNECTIVITY_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CONNECTIVITY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CONNECTIVITY_SERVICE =>
      _id_CONNECTIVITY_SERVICE.get(_class, const jni.JStringType());

  static final _id_CONSUMER_IR_SERVICE = _class.staticFieldId(
    r"CONSUMER_IR_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CONSUMER_IR_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CONSUMER_IR_SERVICE =>
      _id_CONSUMER_IR_SERVICE.get(_class, const jni.JStringType());

  /// from: static public final int CONTEXT_IGNORE_SECURITY
  static const CONTEXT_IGNORE_SECURITY = 2;

  /// from: static public final int CONTEXT_INCLUDE_CODE
  static const CONTEXT_INCLUDE_CODE = 1;

  /// from: static public final int CONTEXT_RESTRICTED
  static const CONTEXT_RESTRICTED = 4;
  static final _id_CROSS_PROFILE_APPS_SERVICE = _class.staticFieldId(
    r"CROSS_PROFILE_APPS_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CROSS_PROFILE_APPS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CROSS_PROFILE_APPS_SERVICE =>
      _id_CROSS_PROFILE_APPS_SERVICE.get(_class, const jni.JStringType());

  static final _id_DEVICE_POLICY_SERVICE = _class.staticFieldId(
    r"DEVICE_POLICY_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DEVICE_POLICY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DEVICE_POLICY_SERVICE =>
      _id_DEVICE_POLICY_SERVICE.get(_class, const jni.JStringType());

  static final _id_DISPLAY_HASH_SERVICE = _class.staticFieldId(
    r"DISPLAY_HASH_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DISPLAY_HASH_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DISPLAY_HASH_SERVICE =>
      _id_DISPLAY_HASH_SERVICE.get(_class, const jni.JStringType());

  static final _id_DISPLAY_SERVICE = _class.staticFieldId(
    r"DISPLAY_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DISPLAY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DISPLAY_SERVICE =>
      _id_DISPLAY_SERVICE.get(_class, const jni.JStringType());

  static final _id_DOMAIN_VERIFICATION_SERVICE = _class.staticFieldId(
    r"DOMAIN_VERIFICATION_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DOMAIN_VERIFICATION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DOMAIN_VERIFICATION_SERVICE =>
      _id_DOMAIN_VERIFICATION_SERVICE.get(_class, const jni.JStringType());

  static final _id_DOWNLOAD_SERVICE = _class.staticFieldId(
    r"DOWNLOAD_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DOWNLOAD_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DOWNLOAD_SERVICE =>
      _id_DOWNLOAD_SERVICE.get(_class, const jni.JStringType());

  static final _id_DROPBOX_SERVICE = _class.staticFieldId(
    r"DROPBOX_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String DROPBOX_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get DROPBOX_SERVICE =>
      _id_DROPBOX_SERVICE.get(_class, const jni.JStringType());

  static final _id_EUICC_SERVICE = _class.staticFieldId(
    r"EUICC_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EUICC_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EUICC_SERVICE =>
      _id_EUICC_SERVICE.get(_class, const jni.JStringType());

  static final _id_FILE_INTEGRITY_SERVICE = _class.staticFieldId(
    r"FILE_INTEGRITY_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String FILE_INTEGRITY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FILE_INTEGRITY_SERVICE =>
      _id_FILE_INTEGRITY_SERVICE.get(_class, const jni.JStringType());

  static final _id_FINGERPRINT_SERVICE = _class.staticFieldId(
    r"FINGERPRINT_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String FINGERPRINT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get FINGERPRINT_SERVICE =>
      _id_FINGERPRINT_SERVICE.get(_class, const jni.JStringType());

  static final _id_GAME_SERVICE = _class.staticFieldId(
    r"GAME_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String GAME_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get GAME_SERVICE =>
      _id_GAME_SERVICE.get(_class, const jni.JStringType());

  static final _id_HARDWARE_PROPERTIES_SERVICE = _class.staticFieldId(
    r"HARDWARE_PROPERTIES_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String HARDWARE_PROPERTIES_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get HARDWARE_PROPERTIES_SERVICE =>
      _id_HARDWARE_PROPERTIES_SERVICE.get(_class, const jni.JStringType());

  static final _id_INPUT_METHOD_SERVICE = _class.staticFieldId(
    r"INPUT_METHOD_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String INPUT_METHOD_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get INPUT_METHOD_SERVICE =>
      _id_INPUT_METHOD_SERVICE.get(_class, const jni.JStringType());

  static final _id_INPUT_SERVICE = _class.staticFieldId(
    r"INPUT_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String INPUT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get INPUT_SERVICE =>
      _id_INPUT_SERVICE.get(_class, const jni.JStringType());

  static final _id_IPSEC_SERVICE = _class.staticFieldId(
    r"IPSEC_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String IPSEC_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get IPSEC_SERVICE =>
      _id_IPSEC_SERVICE.get(_class, const jni.JStringType());

  static final _id_JOB_SCHEDULER_SERVICE = _class.staticFieldId(
    r"JOB_SCHEDULER_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String JOB_SCHEDULER_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get JOB_SCHEDULER_SERVICE =>
      _id_JOB_SCHEDULER_SERVICE.get(_class, const jni.JStringType());

  static final _id_KEYGUARD_SERVICE = _class.staticFieldId(
    r"KEYGUARD_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String KEYGUARD_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get KEYGUARD_SERVICE =>
      _id_KEYGUARD_SERVICE.get(_class, const jni.JStringType());

  static final _id_LAUNCHER_APPS_SERVICE = _class.staticFieldId(
    r"LAUNCHER_APPS_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String LAUNCHER_APPS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get LAUNCHER_APPS_SERVICE =>
      _id_LAUNCHER_APPS_SERVICE.get(_class, const jni.JStringType());

  static final _id_LAYOUT_INFLATER_SERVICE = _class.staticFieldId(
    r"LAYOUT_INFLATER_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String LAYOUT_INFLATER_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get LAYOUT_INFLATER_SERVICE =>
      _id_LAYOUT_INFLATER_SERVICE.get(_class, const jni.JStringType());

  static final _id_LOCALE_SERVICE = _class.staticFieldId(
    r"LOCALE_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String LOCALE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get LOCALE_SERVICE =>
      _id_LOCALE_SERVICE.get(_class, const jni.JStringType());

  static final _id_LOCATION_SERVICE = _class.staticFieldId(
    r"LOCATION_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String LOCATION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get LOCATION_SERVICE =>
      _id_LOCATION_SERVICE.get(_class, const jni.JStringType());

  static final _id_MEDIA_COMMUNICATION_SERVICE = _class.staticFieldId(
    r"MEDIA_COMMUNICATION_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String MEDIA_COMMUNICATION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MEDIA_COMMUNICATION_SERVICE =>
      _id_MEDIA_COMMUNICATION_SERVICE.get(_class, const jni.JStringType());

  static final _id_MEDIA_METRICS_SERVICE = _class.staticFieldId(
    r"MEDIA_METRICS_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String MEDIA_METRICS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MEDIA_METRICS_SERVICE =>
      _id_MEDIA_METRICS_SERVICE.get(_class, const jni.JStringType());

  static final _id_MEDIA_PROJECTION_SERVICE = _class.staticFieldId(
    r"MEDIA_PROJECTION_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String MEDIA_PROJECTION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MEDIA_PROJECTION_SERVICE =>
      _id_MEDIA_PROJECTION_SERVICE.get(_class, const jni.JStringType());

  static final _id_MEDIA_ROUTER_SERVICE = _class.staticFieldId(
    r"MEDIA_ROUTER_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String MEDIA_ROUTER_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MEDIA_ROUTER_SERVICE =>
      _id_MEDIA_ROUTER_SERVICE.get(_class, const jni.JStringType());

  static final _id_MEDIA_SESSION_SERVICE = _class.staticFieldId(
    r"MEDIA_SESSION_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String MEDIA_SESSION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MEDIA_SESSION_SERVICE =>
      _id_MEDIA_SESSION_SERVICE.get(_class, const jni.JStringType());

  static final _id_MIDI_SERVICE = _class.staticFieldId(
    r"MIDI_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String MIDI_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get MIDI_SERVICE =>
      _id_MIDI_SERVICE.get(_class, const jni.JStringType());

  /// from: static public final int MODE_APPEND
  static const MODE_APPEND = 32768;

  /// from: static public final int MODE_ENABLE_WRITE_AHEAD_LOGGING
  static const MODE_ENABLE_WRITE_AHEAD_LOGGING = 8;

  /// from: static public final int MODE_MULTI_PROCESS
  static const MODE_MULTI_PROCESS = 4;

  /// from: static public final int MODE_NO_LOCALIZED_COLLATORS
  static const MODE_NO_LOCALIZED_COLLATORS = 16;

  /// from: static public final int MODE_PRIVATE
  static const MODE_PRIVATE = 0;

  /// from: static public final int MODE_WORLD_READABLE
  static const MODE_WORLD_READABLE = 1;

  /// from: static public final int MODE_WORLD_WRITEABLE
  static const MODE_WORLD_WRITEABLE = 2;
  static final _id_NETWORK_STATS_SERVICE = _class.staticFieldId(
    r"NETWORK_STATS_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String NETWORK_STATS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get NETWORK_STATS_SERVICE =>
      _id_NETWORK_STATS_SERVICE.get(_class, const jni.JStringType());

  static final _id_NFC_SERVICE = _class.staticFieldId(
    r"NFC_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String NFC_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get NFC_SERVICE =>
      _id_NFC_SERVICE.get(_class, const jni.JStringType());

  static final _id_NOTIFICATION_SERVICE = _class.staticFieldId(
    r"NOTIFICATION_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String NOTIFICATION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get NOTIFICATION_SERVICE =>
      _id_NOTIFICATION_SERVICE.get(_class, const jni.JStringType());

  static final _id_NSD_SERVICE = _class.staticFieldId(
    r"NSD_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String NSD_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get NSD_SERVICE =>
      _id_NSD_SERVICE.get(_class, const jni.JStringType());

  static final _id_PEOPLE_SERVICE = _class.staticFieldId(
    r"PEOPLE_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String PEOPLE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get PEOPLE_SERVICE =>
      _id_PEOPLE_SERVICE.get(_class, const jni.JStringType());

  static final _id_PERFORMANCE_HINT_SERVICE = _class.staticFieldId(
    r"PERFORMANCE_HINT_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String PERFORMANCE_HINT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get PERFORMANCE_HINT_SERVICE =>
      _id_PERFORMANCE_HINT_SERVICE.get(_class, const jni.JStringType());

  static final _id_POWER_SERVICE = _class.staticFieldId(
    r"POWER_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String POWER_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get POWER_SERVICE =>
      _id_POWER_SERVICE.get(_class, const jni.JStringType());

  static final _id_PRINT_SERVICE = _class.staticFieldId(
    r"PRINT_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String PRINT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get PRINT_SERVICE =>
      _id_PRINT_SERVICE.get(_class, const jni.JStringType());

  /// from: static public final int RECEIVER_EXPORTED
  static const RECEIVER_EXPORTED = 2;

  /// from: static public final int RECEIVER_NOT_EXPORTED
  static const RECEIVER_NOT_EXPORTED = 4;

  /// from: static public final int RECEIVER_VISIBLE_TO_INSTANT_APPS
  static const RECEIVER_VISIBLE_TO_INSTANT_APPS = 1;
  static final _id_RESTRICTIONS_SERVICE = _class.staticFieldId(
    r"RESTRICTIONS_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String RESTRICTIONS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get RESTRICTIONS_SERVICE =>
      _id_RESTRICTIONS_SERVICE.get(_class, const jni.JStringType());

  static final _id_ROLE_SERVICE = _class.staticFieldId(
    r"ROLE_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ROLE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ROLE_SERVICE =>
      _id_ROLE_SERVICE.get(_class, const jni.JStringType());

  static final _id_SEARCH_SERVICE = _class.staticFieldId(
    r"SEARCH_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String SEARCH_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SEARCH_SERVICE =>
      _id_SEARCH_SERVICE.get(_class, const jni.JStringType());

  static final _id_SENSOR_SERVICE = _class.staticFieldId(
    r"SENSOR_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String SENSOR_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SENSOR_SERVICE =>
      _id_SENSOR_SERVICE.get(_class, const jni.JStringType());

  static final _id_SHORTCUT_SERVICE = _class.staticFieldId(
    r"SHORTCUT_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String SHORTCUT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SHORTCUT_SERVICE =>
      _id_SHORTCUT_SERVICE.get(_class, const jni.JStringType());

  static final _id_STATUS_BAR_SERVICE = _class.staticFieldId(
    r"STATUS_BAR_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String STATUS_BAR_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get STATUS_BAR_SERVICE =>
      _id_STATUS_BAR_SERVICE.get(_class, const jni.JStringType());

  static final _id_STORAGE_SERVICE = _class.staticFieldId(
    r"STORAGE_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String STORAGE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get STORAGE_SERVICE =>
      _id_STORAGE_SERVICE.get(_class, const jni.JStringType());

  static final _id_STORAGE_STATS_SERVICE = _class.staticFieldId(
    r"STORAGE_STATS_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String STORAGE_STATS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get STORAGE_STATS_SERVICE =>
      _id_STORAGE_STATS_SERVICE.get(_class, const jni.JStringType());

  static final _id_SYSTEM_HEALTH_SERVICE = _class.staticFieldId(
    r"SYSTEM_HEALTH_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String SYSTEM_HEALTH_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get SYSTEM_HEALTH_SERVICE =>
      _id_SYSTEM_HEALTH_SERVICE.get(_class, const jni.JStringType());

  static final _id_TELECOM_SERVICE = _class.staticFieldId(
    r"TELECOM_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String TELECOM_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TELECOM_SERVICE =>
      _id_TELECOM_SERVICE.get(_class, const jni.JStringType());

  static final _id_TELEPHONY_IMS_SERVICE = _class.staticFieldId(
    r"TELEPHONY_IMS_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String TELEPHONY_IMS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TELEPHONY_IMS_SERVICE =>
      _id_TELEPHONY_IMS_SERVICE.get(_class, const jni.JStringType());

  static final _id_TELEPHONY_SERVICE = _class.staticFieldId(
    r"TELEPHONY_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String TELEPHONY_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TELEPHONY_SERVICE =>
      _id_TELEPHONY_SERVICE.get(_class, const jni.JStringType());

  static final _id_TELEPHONY_SUBSCRIPTION_SERVICE = _class.staticFieldId(
    r"TELEPHONY_SUBSCRIPTION_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String TELEPHONY_SUBSCRIPTION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TELEPHONY_SUBSCRIPTION_SERVICE =>
      _id_TELEPHONY_SUBSCRIPTION_SERVICE.get(_class, const jni.JStringType());

  static final _id_TEXT_CLASSIFICATION_SERVICE = _class.staticFieldId(
    r"TEXT_CLASSIFICATION_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String TEXT_CLASSIFICATION_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TEXT_CLASSIFICATION_SERVICE =>
      _id_TEXT_CLASSIFICATION_SERVICE.get(_class, const jni.JStringType());

  static final _id_TEXT_SERVICES_MANAGER_SERVICE = _class.staticFieldId(
    r"TEXT_SERVICES_MANAGER_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String TEXT_SERVICES_MANAGER_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TEXT_SERVICES_MANAGER_SERVICE =>
      _id_TEXT_SERVICES_MANAGER_SERVICE.get(_class, const jni.JStringType());

  static final _id_TV_INPUT_SERVICE = _class.staticFieldId(
    r"TV_INPUT_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String TV_INPUT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TV_INPUT_SERVICE =>
      _id_TV_INPUT_SERVICE.get(_class, const jni.JStringType());

  static final _id_TV_INTERACTIVE_APP_SERVICE = _class.staticFieldId(
    r"TV_INTERACTIVE_APP_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String TV_INTERACTIVE_APP_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get TV_INTERACTIVE_APP_SERVICE =>
      _id_TV_INTERACTIVE_APP_SERVICE.get(_class, const jni.JStringType());

  static final _id_UI_MODE_SERVICE = _class.staticFieldId(
    r"UI_MODE_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String UI_MODE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get UI_MODE_SERVICE =>
      _id_UI_MODE_SERVICE.get(_class, const jni.JStringType());

  static final _id_USAGE_STATS_SERVICE = _class.staticFieldId(
    r"USAGE_STATS_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String USAGE_STATS_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get USAGE_STATS_SERVICE =>
      _id_USAGE_STATS_SERVICE.get(_class, const jni.JStringType());

  static final _id_USB_SERVICE = _class.staticFieldId(
    r"USB_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String USB_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get USB_SERVICE =>
      _id_USB_SERVICE.get(_class, const jni.JStringType());

  static final _id_USER_SERVICE = _class.staticFieldId(
    r"USER_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String USER_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get USER_SERVICE =>
      _id_USER_SERVICE.get(_class, const jni.JStringType());

  static final _id_VIBRATOR_MANAGER_SERVICE = _class.staticFieldId(
    r"VIBRATOR_MANAGER_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String VIBRATOR_MANAGER_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get VIBRATOR_MANAGER_SERVICE =>
      _id_VIBRATOR_MANAGER_SERVICE.get(_class, const jni.JStringType());

  static final _id_VIBRATOR_SERVICE = _class.staticFieldId(
    r"VIBRATOR_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String VIBRATOR_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get VIBRATOR_SERVICE =>
      _id_VIBRATOR_SERVICE.get(_class, const jni.JStringType());

  static final _id_VPN_MANAGEMENT_SERVICE = _class.staticFieldId(
    r"VPN_MANAGEMENT_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String VPN_MANAGEMENT_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get VPN_MANAGEMENT_SERVICE =>
      _id_VPN_MANAGEMENT_SERVICE.get(_class, const jni.JStringType());

  static final _id_WALLPAPER_SERVICE = _class.staticFieldId(
    r"WALLPAPER_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String WALLPAPER_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get WALLPAPER_SERVICE =>
      _id_WALLPAPER_SERVICE.get(_class, const jni.JStringType());

  static final _id_WIFI_AWARE_SERVICE = _class.staticFieldId(
    r"WIFI_AWARE_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String WIFI_AWARE_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get WIFI_AWARE_SERVICE =>
      _id_WIFI_AWARE_SERVICE.get(_class, const jni.JStringType());

  static final _id_WIFI_P2P_SERVICE = _class.staticFieldId(
    r"WIFI_P2P_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String WIFI_P2P_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get WIFI_P2P_SERVICE =>
      _id_WIFI_P2P_SERVICE.get(_class, const jni.JStringType());

  static final _id_WIFI_RTT_RANGING_SERVICE = _class.staticFieldId(
    r"WIFI_RTT_RANGING_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String WIFI_RTT_RANGING_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get WIFI_RTT_RANGING_SERVICE =>
      _id_WIFI_RTT_RANGING_SERVICE.get(_class, const jni.JStringType());

  static final _id_WIFI_SERVICE = _class.staticFieldId(
    r"WIFI_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String WIFI_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get WIFI_SERVICE =>
      _id_WIFI_SERVICE.get(_class, const jni.JStringType());

  static final _id_WINDOW_SERVICE = _class.staticFieldId(
    r"WINDOW_SERVICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String WINDOW_SERVICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get WINDOW_SERVICE =>
      _id_WINDOW_SERVICE.get(_class, const jni.JStringType());

  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Context() {
    return Context.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getAssets = _class.instanceMethodId(
    r"getAssets",
    r"()Landroid/content/res/AssetManager;",
  );

  static final _getAssets = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.content.res.AssetManager getAssets()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getAssets() {
    return _getAssets(reference.pointer, _id_getAssets as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getResources = _class.instanceMethodId(
    r"getResources",
    r"()Landroid/content/res/Resources;",
  );

  static final _getResources = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.content.res.Resources getResources()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getResources() {
    return _getResources(
            reference.pointer, _id_getResources as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getPackageManager = _class.instanceMethodId(
    r"getPackageManager",
    r"()Landroid/content/pm/PackageManager;",
  );

  static final _getPackageManager = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.content.pm.PackageManager getPackageManager()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getPackageManager() {
    return _getPackageManager(
            reference.pointer, _id_getPackageManager as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getContentResolver = _class.instanceMethodId(
    r"getContentResolver",
    r"()Landroid/content/ContentResolver;",
  );

  static final _getContentResolver = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.content.ContentResolver getContentResolver()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getContentResolver() {
    return _getContentResolver(
            reference.pointer, _id_getContentResolver as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getMainLooper = _class.instanceMethodId(
    r"getMainLooper",
    r"()Landroid/os/Looper;",
  );

  static final _getMainLooper = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.os.Looper getMainLooper()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getMainLooper() {
    return _getMainLooper(
            reference.pointer, _id_getMainLooper as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getMainExecutor = _class.instanceMethodId(
    r"getMainExecutor",
    r"()Ljava/util/concurrent/Executor;",
  );

  static final _getMainExecutor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.util.concurrent.Executor getMainExecutor()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getMainExecutor() {
    return _getMainExecutor(
            reference.pointer, _id_getMainExecutor as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getApplicationContext = _class.instanceMethodId(
    r"getApplicationContext",
    r"()Landroid/content/Context;",
  );

  static final _getApplicationContext = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.content.Context getApplicationContext()
  /// The returned object must be released after use, by calling the [release] method.
  Context getApplicationContext() {
    return _getApplicationContext(
            reference.pointer, _id_getApplicationContext as jni.JMethodIDPtr)
        .object(const $ContextType());
  }

  static final _id_registerComponentCallbacks = _class.instanceMethodId(
    r"registerComponentCallbacks",
    r"(Landroid/content/ComponentCallbacks;)V",
  );

  static final _registerComponentCallbacks = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void registerComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)
  void registerComponentCallbacks(
    jni.JObject componentCallbacks,
  ) {
    _registerComponentCallbacks(
            reference.pointer,
            _id_registerComponentCallbacks as jni.JMethodIDPtr,
            componentCallbacks.reference.pointer)
        .check();
  }

  static final _id_unregisterComponentCallbacks = _class.instanceMethodId(
    r"unregisterComponentCallbacks",
    r"(Landroid/content/ComponentCallbacks;)V",
  );

  static final _unregisterComponentCallbacks = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void unregisterComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)
  void unregisterComponentCallbacks(
    jni.JObject componentCallbacks,
  ) {
    _unregisterComponentCallbacks(
            reference.pointer,
            _id_unregisterComponentCallbacks as jni.JMethodIDPtr,
            componentCallbacks.reference.pointer)
        .check();
  }

  static final _id_getText = _class.instanceMethodId(
    r"getText",
    r"(I)Ljava/lang/CharSequence;",
  );

  static final _getText = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final java.lang.CharSequence getText(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getText(
    int i,
  ) {
    return _getText(reference.pointer, _id_getText as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }

  static final _id_getString = _class.instanceMethodId(
    r"getString",
    r"(I)Ljava/lang/String;",
  );

  static final _getString = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final java.lang.String getString(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getString(
    int i,
  ) {
    return _getString(reference.pointer, _id_getString as jni.JMethodIDPtr, i)
        .object(const jni.JStringType());
  }

  static final _id_getString1 = _class.instanceMethodId(
    r"getString",
    r"(I[Ljava/lang/Object;)Ljava/lang/String;",
  );

  static final _getString1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Int64, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final java.lang.String getString(int i, java.lang.Object[] objects)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getString1(
    int i,
    jni.JArray<jni.JObject> objects,
  ) {
    return _getString1(reference.pointer, _id_getString1 as jni.JMethodIDPtr, i,
            objects.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_getColor = _class.instanceMethodId(
    r"getColor",
    r"(I)I",
  );

  static final _getColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final int getColor(int i)
  int getColor(
    int i,
  ) {
    return _getColor(reference.pointer, _id_getColor as jni.JMethodIDPtr, i)
        .integer;
  }

  static final _id_getDrawable = _class.instanceMethodId(
    r"getDrawable",
    r"(I)Landroid/graphics/drawable/Drawable;",
  );

  static final _getDrawable = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final android.graphics.drawable.Drawable getDrawable(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDrawable(
    int i,
  ) {
    return _getDrawable(
            reference.pointer, _id_getDrawable as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }

  static final _id_getColorStateList = _class.instanceMethodId(
    r"getColorStateList",
    r"(I)Landroid/content/res/ColorStateList;",
  );

  static final _getColorStateList = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final android.content.res.ColorStateList getColorStateList(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getColorStateList(
    int i,
  ) {
    return _getColorStateList(
            reference.pointer, _id_getColorStateList as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }

  static final _id_setTheme = _class.instanceMethodId(
    r"setTheme",
    r"(I)V",
  );

  static final _setTheme = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public abstract void setTheme(int i)
  void setTheme(
    int i,
  ) {
    _setTheme(reference.pointer, _id_setTheme as jni.JMethodIDPtr, i).check();
  }

  static final _id_getTheme = _class.instanceMethodId(
    r"getTheme",
    r"()Landroid/content/res/Resources$Theme;",
  );

  static final _getTheme = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.content.res.Resources$Theme getTheme()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getTheme() {
    return _getTheme(reference.pointer, _id_getTheme as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_obtainStyledAttributes = _class.instanceMethodId(
    r"obtainStyledAttributes",
    r"([I)Landroid/content/res/TypedArray;",
  );

  static final _obtainStyledAttributes = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final android.content.res.TypedArray obtainStyledAttributes(int[] is)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject obtainStyledAttributes(
    jni.JArray<jni.jint> is0,
  ) {
    return _obtainStyledAttributes(
            reference.pointer,
            _id_obtainStyledAttributes as jni.JMethodIDPtr,
            is0.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_obtainStyledAttributes1 = _class.instanceMethodId(
    r"obtainStyledAttributes",
    r"(I[I)Landroid/content/res/TypedArray;",
  );

  static final _obtainStyledAttributes1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Int64, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final android.content.res.TypedArray obtainStyledAttributes(int i, int[] is)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject obtainStyledAttributes1(
    int i,
    jni.JArray<jni.jint> is0,
  ) {
    return _obtainStyledAttributes1(
            reference.pointer,
            _id_obtainStyledAttributes1 as jni.JMethodIDPtr,
            i,
            is0.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_obtainStyledAttributes2 = _class.instanceMethodId(
    r"obtainStyledAttributes",
    r"(Landroid/util/AttributeSet;[I)Landroid/content/res/TypedArray;",
  );

  static final _obtainStyledAttributes2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public final android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet attributeSet, int[] is)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject obtainStyledAttributes2(
    jni.JObject attributeSet,
    jni.JArray<jni.jint> is0,
  ) {
    return _obtainStyledAttributes2(
            reference.pointer,
            _id_obtainStyledAttributes2 as jni.JMethodIDPtr,
            attributeSet.reference.pointer,
            is0.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_obtainStyledAttributes3 = _class.instanceMethodId(
    r"obtainStyledAttributes",
    r"(Landroid/util/AttributeSet;[III)Landroid/content/res/TypedArray;",
  );

  static final _obtainStyledAttributes3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Int64
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public final android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet attributeSet, int[] is, int i, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject obtainStyledAttributes3(
    jni.JObject attributeSet,
    jni.JArray<jni.jint> is0,
    int i,
    int i1,
  ) {
    return _obtainStyledAttributes3(
            reference.pointer,
            _id_obtainStyledAttributes3 as jni.JMethodIDPtr,
            attributeSet.reference.pointer,
            is0.reference.pointer,
            i,
            i1)
        .object(const jni.JObjectType());
  }

  static final _id_getClassLoader = _class.instanceMethodId(
    r"getClassLoader",
    r"()Ljava/lang/ClassLoader;",
  );

  static final _getClassLoader = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.ClassLoader getClassLoader()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getClassLoader() {
    return _getClassLoader(
            reference.pointer, _id_getClassLoader as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getPackageName = _class.instanceMethodId(
    r"getPackageName",
    r"()Ljava/lang/String;",
  );

  static final _getPackageName = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String getPackageName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getPackageName() {
    return _getPackageName(
            reference.pointer, _id_getPackageName as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getOpPackageName = _class.instanceMethodId(
    r"getOpPackageName",
    r"()Ljava/lang/String;",
  );

  static final _getOpPackageName = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getOpPackageName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getOpPackageName() {
    return _getOpPackageName(
            reference.pointer, _id_getOpPackageName as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getAttributionTag = _class.instanceMethodId(
    r"getAttributionTag",
    r"()Ljava/lang/String;",
  );

  static final _getAttributionTag = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getAttributionTag()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getAttributionTag() {
    return _getAttributionTag(
            reference.pointer, _id_getAttributionTag as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getAttributionSource = _class.instanceMethodId(
    r"getAttributionSource",
    r"()Landroid/content/AttributionSource;",
  );

  static final _getAttributionSource = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.content.AttributionSource getAttributionSource()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getAttributionSource() {
    return _getAttributionSource(
            reference.pointer, _id_getAttributionSource as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getParams = _class.instanceMethodId(
    r"getParams",
    r"()Landroid/content/ContextParams;",
  );

  static final _getParams = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.content.ContextParams getParams()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getParams() {
    return _getParams(reference.pointer, _id_getParams as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getApplicationInfo = _class.instanceMethodId(
    r"getApplicationInfo",
    r"()Landroid/content/pm/ApplicationInfo;",
  );

  static final _getApplicationInfo = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.content.pm.ApplicationInfo getApplicationInfo()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getApplicationInfo() {
    return _getApplicationInfo(
            reference.pointer, _id_getApplicationInfo as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getPackageResourcePath = _class.instanceMethodId(
    r"getPackageResourcePath",
    r"()Ljava/lang/String;",
  );

  static final _getPackageResourcePath = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String getPackageResourcePath()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getPackageResourcePath() {
    return _getPackageResourcePath(
            reference.pointer, _id_getPackageResourcePath as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getPackageCodePath = _class.instanceMethodId(
    r"getPackageCodePath",
    r"()Ljava/lang/String;",
  );

  static final _getPackageCodePath = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String getPackageCodePath()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getPackageCodePath() {
    return _getPackageCodePath(
            reference.pointer, _id_getPackageCodePath as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getSharedPreferences = _class.instanceMethodId(
    r"getSharedPreferences",
    r"(Ljava/lang/String;I)Landroid/content/SharedPreferences;",
  );

  static final _getSharedPreferences = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract android.content.SharedPreferences getSharedPreferences(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSharedPreferences(
    jni.JString string,
    int i,
  ) {
    return _getSharedPreferences(
            reference.pointer,
            _id_getSharedPreferences as jni.JMethodIDPtr,
            string.reference.pointer,
            i)
        .object(const jni.JObjectType());
  }

  static final _id_moveSharedPreferencesFrom = _class.instanceMethodId(
    r"moveSharedPreferencesFrom",
    r"(Landroid/content/Context;Ljava/lang/String;)Z",
  );

  static final _moveSharedPreferencesFrom = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean moveSharedPreferencesFrom(android.content.Context context, java.lang.String string)
  bool moveSharedPreferencesFrom(
    Context context,
    jni.JString string,
  ) {
    return _moveSharedPreferencesFrom(
            reference.pointer,
            _id_moveSharedPreferencesFrom as jni.JMethodIDPtr,
            context.reference.pointer,
            string.reference.pointer)
        .boolean;
  }

  static final _id_deleteSharedPreferences = _class.instanceMethodId(
    r"deleteSharedPreferences",
    r"(Ljava/lang/String;)Z",
  );

  static final _deleteSharedPreferences = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean deleteSharedPreferences(java.lang.String string)
  bool deleteSharedPreferences(
    jni.JString string,
  ) {
    return _deleteSharedPreferences(
            reference.pointer,
            _id_deleteSharedPreferences as jni.JMethodIDPtr,
            string.reference.pointer)
        .boolean;
  }

  static final _id_openFileInput = _class.instanceMethodId(
    r"openFileInput",
    r"(Ljava/lang/String;)Ljava/io/FileInputStream;",
  );

  static final _openFileInput = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.FileInputStream openFileInput(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openFileInput(
    jni.JString string,
  ) {
    return _openFileInput(reference.pointer,
            _id_openFileInput as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_openFileOutput = _class.instanceMethodId(
    r"openFileOutput",
    r"(Ljava/lang/String;I)Ljava/io/FileOutputStream;",
  );

  static final _openFileOutput = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract java.io.FileOutputStream openFileOutput(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openFileOutput(
    jni.JString string,
    int i,
  ) {
    return _openFileOutput(reference.pointer,
            _id_openFileOutput as jni.JMethodIDPtr, string.reference.pointer, i)
        .object(const jni.JObjectType());
  }

  static final _id_deleteFile = _class.instanceMethodId(
    r"deleteFile",
    r"(Ljava/lang/String;)Z",
  );

  static final _deleteFile = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean deleteFile(java.lang.String string)
  bool deleteFile(
    jni.JString string,
  ) {
    return _deleteFile(reference.pointer, _id_deleteFile as jni.JMethodIDPtr,
            string.reference.pointer)
        .boolean;
  }

  static final _id_getFileStreamPath = _class.instanceMethodId(
    r"getFileStreamPath",
    r"(Ljava/lang/String;)Ljava/io/File;",
  );

  static final _getFileStreamPath = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File getFileStreamPath(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getFileStreamPath(
    jni.JString string,
  ) {
    return _getFileStreamPath(reference.pointer,
            _id_getFileStreamPath as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getDataDir = _class.instanceMethodId(
    r"getDataDir",
    r"()Ljava/io/File;",
  );

  static final _getDataDir = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.io.File getDataDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDataDir() {
    return _getDataDir(reference.pointer, _id_getDataDir as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getFilesDir = _class.instanceMethodId(
    r"getFilesDir",
    r"()Ljava/io/File;",
  );

  static final _getFilesDir = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.io.File getFilesDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getFilesDir() {
    return _getFilesDir(reference.pointer, _id_getFilesDir as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getNoBackupFilesDir = _class.instanceMethodId(
    r"getNoBackupFilesDir",
    r"()Ljava/io/File;",
  );

  static final _getNoBackupFilesDir = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.io.File getNoBackupFilesDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getNoBackupFilesDir() {
    return _getNoBackupFilesDir(
            reference.pointer, _id_getNoBackupFilesDir as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getExternalFilesDir = _class.instanceMethodId(
    r"getExternalFilesDir",
    r"(Ljava/lang/String;)Ljava/io/File;",
  );

  static final _getExternalFilesDir = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File getExternalFilesDir(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getExternalFilesDir(
    jni.JString string,
  ) {
    return _getExternalFilesDir(
            reference.pointer,
            _id_getExternalFilesDir as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getExternalFilesDirs = _class.instanceMethodId(
    r"getExternalFilesDirs",
    r"(Ljava/lang/String;)[Ljava/io/File;",
  );

  static final _getExternalFilesDirs = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File[] getExternalFilesDirs(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getExternalFilesDirs(
    jni.JString string,
  ) {
    return _getExternalFilesDirs(
            reference.pointer,
            _id_getExternalFilesDirs as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JArrayType(jni.JObjectType()));
  }

  static final _id_getObbDir = _class.instanceMethodId(
    r"getObbDir",
    r"()Ljava/io/File;",
  );

  static final _getObbDir = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.io.File getObbDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getObbDir() {
    return _getObbDir(reference.pointer, _id_getObbDir as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getObbDirs = _class.instanceMethodId(
    r"getObbDirs",
    r"()[Ljava/io/File;",
  );

  static final _getObbDirs = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.io.File[] getObbDirs()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getObbDirs() {
    return _getObbDirs(reference.pointer, _id_getObbDirs as jni.JMethodIDPtr)
        .object(const jni.JArrayType(jni.JObjectType()));
  }

  static final _id_getCacheDir = _class.instanceMethodId(
    r"getCacheDir",
    r"()Ljava/io/File;",
  );

  static final _getCacheDir = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.io.File getCacheDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCacheDir() {
    return _getCacheDir(reference.pointer, _id_getCacheDir as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getCodeCacheDir = _class.instanceMethodId(
    r"getCodeCacheDir",
    r"()Ljava/io/File;",
  );

  static final _getCodeCacheDir = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.io.File getCodeCacheDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCodeCacheDir() {
    return _getCodeCacheDir(
            reference.pointer, _id_getCodeCacheDir as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getExternalCacheDir = _class.instanceMethodId(
    r"getExternalCacheDir",
    r"()Ljava/io/File;",
  );

  static final _getExternalCacheDir = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.io.File getExternalCacheDir()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getExternalCacheDir() {
    return _getExternalCacheDir(
            reference.pointer, _id_getExternalCacheDir as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getExternalCacheDirs = _class.instanceMethodId(
    r"getExternalCacheDirs",
    r"()[Ljava/io/File;",
  );

  static final _getExternalCacheDirs = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.io.File[] getExternalCacheDirs()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getExternalCacheDirs() {
    return _getExternalCacheDirs(
            reference.pointer, _id_getExternalCacheDirs as jni.JMethodIDPtr)
        .object(const jni.JArrayType(jni.JObjectType()));
  }

  static final _id_getExternalMediaDirs = _class.instanceMethodId(
    r"getExternalMediaDirs",
    r"()[Ljava/io/File;",
  );

  static final _getExternalMediaDirs = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.io.File[] getExternalMediaDirs()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getExternalMediaDirs() {
    return _getExternalMediaDirs(
            reference.pointer, _id_getExternalMediaDirs as jni.JMethodIDPtr)
        .object(const jni.JArrayType(jni.JObjectType()));
  }

  static final _id_fileList = _class.instanceMethodId(
    r"fileList",
    r"()[Ljava/lang/String;",
  );

  static final _fileList = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String[] fileList()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> fileList() {
    return _fileList(reference.pointer, _id_fileList as jni.JMethodIDPtr)
        .object(const jni.JArrayType(jni.JStringType()));
  }

  static final _id_getDir = _class.instanceMethodId(
    r"getDir",
    r"(Ljava/lang/String;I)Ljava/io/File;",
  );

  static final _getDir = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract java.io.File getDir(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDir(
    jni.JString string,
    int i,
  ) {
    return _getDir(reference.pointer, _id_getDir as jni.JMethodIDPtr,
            string.reference.pointer, i)
        .object(const jni.JObjectType());
  }

  static final _id_openOrCreateDatabase = _class.instanceMethodId(
    r"openOrCreateDatabase",
    r"(Ljava/lang/String;ILandroid/database/sqlite/SQLiteDatabase$CursorFactory;)Landroid/database/sqlite/SQLiteDatabase;",
  );

  static final _openOrCreateDatabase = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String string, int i, android.database.sqlite.SQLiteDatabase$CursorFactory cursorFactory)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openOrCreateDatabase(
    jni.JString string,
    int i,
    jni.JObject cursorFactory,
  ) {
    return _openOrCreateDatabase(
            reference.pointer,
            _id_openOrCreateDatabase as jni.JMethodIDPtr,
            string.reference.pointer,
            i,
            cursorFactory.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_openOrCreateDatabase1 = _class.instanceMethodId(
    r"openOrCreateDatabase",
    r"(Ljava/lang/String;ILandroid/database/sqlite/SQLiteDatabase$CursorFactory;Landroid/database/DatabaseErrorHandler;)Landroid/database/sqlite/SQLiteDatabase;",
  );

  static final _openOrCreateDatabase1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String string, int i, android.database.sqlite.SQLiteDatabase$CursorFactory cursorFactory, android.database.DatabaseErrorHandler databaseErrorHandler)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject openOrCreateDatabase1(
    jni.JString string,
    int i,
    jni.JObject cursorFactory,
    jni.JObject databaseErrorHandler,
  ) {
    return _openOrCreateDatabase1(
            reference.pointer,
            _id_openOrCreateDatabase1 as jni.JMethodIDPtr,
            string.reference.pointer,
            i,
            cursorFactory.reference.pointer,
            databaseErrorHandler.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_moveDatabaseFrom = _class.instanceMethodId(
    r"moveDatabaseFrom",
    r"(Landroid/content/Context;Ljava/lang/String;)Z",
  );

  static final _moveDatabaseFrom = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean moveDatabaseFrom(android.content.Context context, java.lang.String string)
  bool moveDatabaseFrom(
    Context context,
    jni.JString string,
  ) {
    return _moveDatabaseFrom(
            reference.pointer,
            _id_moveDatabaseFrom as jni.JMethodIDPtr,
            context.reference.pointer,
            string.reference.pointer)
        .boolean;
  }

  static final _id_deleteDatabase = _class.instanceMethodId(
    r"deleteDatabase",
    r"(Ljava/lang/String;)Z",
  );

  static final _deleteDatabase = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean deleteDatabase(java.lang.String string)
  bool deleteDatabase(
    jni.JString string,
  ) {
    return _deleteDatabase(reference.pointer,
            _id_deleteDatabase as jni.JMethodIDPtr, string.reference.pointer)
        .boolean;
  }

  static final _id_getDatabasePath = _class.instanceMethodId(
    r"getDatabasePath",
    r"(Ljava/lang/String;)Ljava/io/File;",
  );

  static final _getDatabasePath = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.io.File getDatabasePath(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDatabasePath(
    jni.JString string,
  ) {
    return _getDatabasePath(reference.pointer,
            _id_getDatabasePath as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_databaseList = _class.instanceMethodId(
    r"databaseList",
    r"()[Ljava/lang/String;",
  );

  static final _databaseList = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract java.lang.String[] databaseList()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> databaseList() {
    return _databaseList(
            reference.pointer, _id_databaseList as jni.JMethodIDPtr)
        .object(const jni.JArrayType(jni.JStringType()));
  }

  static final _id_getWallpaper = _class.instanceMethodId(
    r"getWallpaper",
    r"()Landroid/graphics/drawable/Drawable;",
  );

  static final _getWallpaper = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.graphics.drawable.Drawable getWallpaper()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getWallpaper() {
    return _getWallpaper(
            reference.pointer, _id_getWallpaper as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_peekWallpaper = _class.instanceMethodId(
    r"peekWallpaper",
    r"()Landroid/graphics/drawable/Drawable;",
  );

  static final _peekWallpaper = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract android.graphics.drawable.Drawable peekWallpaper()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject peekWallpaper() {
    return _peekWallpaper(
            reference.pointer, _id_peekWallpaper as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getWallpaperDesiredMinimumWidth = _class.instanceMethodId(
    r"getWallpaperDesiredMinimumWidth",
    r"()I",
  );

  static final _getWallpaperDesiredMinimumWidth = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract int getWallpaperDesiredMinimumWidth()
  int getWallpaperDesiredMinimumWidth() {
    return _getWallpaperDesiredMinimumWidth(reference.pointer,
            _id_getWallpaperDesiredMinimumWidth as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getWallpaperDesiredMinimumHeight = _class.instanceMethodId(
    r"getWallpaperDesiredMinimumHeight",
    r"()I",
  );

  static final _getWallpaperDesiredMinimumHeight =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>("globalEnv_CallIntMethod")
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: public abstract int getWallpaperDesiredMinimumHeight()
  int getWallpaperDesiredMinimumHeight() {
    return _getWallpaperDesiredMinimumHeight(reference.pointer,
            _id_getWallpaperDesiredMinimumHeight as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_setWallpaper = _class.instanceMethodId(
    r"setWallpaper",
    r"(Landroid/graphics/Bitmap;)V",
  );

  static final _setWallpaper = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void setWallpaper(android.graphics.Bitmap bitmap)
  void setWallpaper(
    jni.JObject bitmap,
  ) {
    _setWallpaper(reference.pointer, _id_setWallpaper as jni.JMethodIDPtr,
            bitmap.reference.pointer)
        .check();
  }

  static final _id_setWallpaper1 = _class.instanceMethodId(
    r"setWallpaper",
    r"(Ljava/io/InputStream;)V",
  );

  static final _setWallpaper1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void setWallpaper(java.io.InputStream inputStream)
  void setWallpaper1(
    jni.JObject inputStream,
  ) {
    _setWallpaper1(reference.pointer, _id_setWallpaper1 as jni.JMethodIDPtr,
            inputStream.reference.pointer)
        .check();
  }

  static final _id_clearWallpaper = _class.instanceMethodId(
    r"clearWallpaper",
    r"()V",
  );

  static final _clearWallpaper = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract void clearWallpaper()
  void clearWallpaper() {
    _clearWallpaper(reference.pointer, _id_clearWallpaper as jni.JMethodIDPtr)
        .check();
  }

  static final _id_startActivity = _class.instanceMethodId(
    r"startActivity",
    r"(Landroid/content/Intent;)V",
  );

  static final _startActivity = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void startActivity(android.content.Intent intent)
  void startActivity(
    Intent intent,
  ) {
    _startActivity(reference.pointer, _id_startActivity as jni.JMethodIDPtr,
            intent.reference.pointer)
        .check();
  }

  static final _id_startActivity1 = _class.instanceMethodId(
    r"startActivity",
    r"(Landroid/content/Intent;Landroid/os/Bundle;)V",
  );

  static final _startActivity1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void startActivity(android.content.Intent intent, android.os.Bundle bundle)
  void startActivity1(
    Intent intent,
    jni.JObject bundle,
  ) {
    _startActivity1(reference.pointer, _id_startActivity1 as jni.JMethodIDPtr,
            intent.reference.pointer, bundle.reference.pointer)
        .check();
  }

  static final _id_startActivities = _class.instanceMethodId(
    r"startActivities",
    r"([Landroid/content/Intent;)V",
  );

  static final _startActivities = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void startActivities(android.content.Intent[] intents)
  void startActivities(
    jni.JArray<Intent> intents,
  ) {
    _startActivities(reference.pointer, _id_startActivities as jni.JMethodIDPtr,
            intents.reference.pointer)
        .check();
  }

  static final _id_startActivities1 = _class.instanceMethodId(
    r"startActivities",
    r"([Landroid/content/Intent;Landroid/os/Bundle;)V",
  );

  static final _startActivities1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void startActivities(android.content.Intent[] intents, android.os.Bundle bundle)
  void startActivities1(
    jni.JArray<Intent> intents,
    jni.JObject bundle,
  ) {
    _startActivities1(
            reference.pointer,
            _id_startActivities1 as jni.JMethodIDPtr,
            intents.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_startIntentSender = _class.instanceMethodId(
    r"startIntentSender",
    r"(Landroid/content/IntentSender;Landroid/content/Intent;III)V",
  );

  static final _startIntentSender = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Int64,
                        ffi.Int64
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: public abstract void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2)
  void startIntentSender(
    jni.JObject intentSender,
    Intent intent,
    int i,
    int i1,
    int i2,
  ) {
    _startIntentSender(
            reference.pointer,
            _id_startIntentSender as jni.JMethodIDPtr,
            intentSender.reference.pointer,
            intent.reference.pointer,
            i,
            i1,
            i2)
        .check();
  }

  static final _id_startIntentSender1 = _class.instanceMethodId(
    r"startIntentSender",
    r"(Landroid/content/IntentSender;Landroid/content/Intent;IIILandroid/os/Bundle;)V",
  );

  static final _startIntentSender1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Int64,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2, android.os.Bundle bundle)
  void startIntentSender1(
    jni.JObject intentSender,
    Intent intent,
    int i,
    int i1,
    int i2,
    jni.JObject bundle,
  ) {
    _startIntentSender1(
            reference.pointer,
            _id_startIntentSender1 as jni.JMethodIDPtr,
            intentSender.reference.pointer,
            intent.reference.pointer,
            i,
            i1,
            i2,
            bundle.reference.pointer)
        .check();
  }

  static final _id_sendBroadcast = _class.instanceMethodId(
    r"sendBroadcast",
    r"(Landroid/content/Intent;)V",
  );

  static final _sendBroadcast = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendBroadcast(android.content.Intent intent)
  void sendBroadcast(
    Intent intent,
  ) {
    _sendBroadcast(reference.pointer, _id_sendBroadcast as jni.JMethodIDPtr,
            intent.reference.pointer)
        .check();
  }

  static final _id_sendBroadcast1 = _class.instanceMethodId(
    r"sendBroadcast",
    r"(Landroid/content/Intent;Ljava/lang/String;)V",
  );

  static final _sendBroadcast1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendBroadcast(android.content.Intent intent, java.lang.String string)
  void sendBroadcast1(
    Intent intent,
    jni.JString string,
  ) {
    _sendBroadcast1(reference.pointer, _id_sendBroadcast1 as jni.JMethodIDPtr,
            intent.reference.pointer, string.reference.pointer)
        .check();
  }

  static final _id_sendBroadcastWithMultiplePermissions =
      _class.instanceMethodId(
    r"sendBroadcastWithMultiplePermissions",
    r"(Landroid/content/Intent;[Ljava/lang/String;)V",
  );

  static final _sendBroadcastWithMultiplePermissions =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<
                          (
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>
                          )>)>>("globalEnv_CallVoidMethod")
          .asFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>();

  /// from: public void sendBroadcastWithMultiplePermissions(android.content.Intent intent, java.lang.String[] strings)
  void sendBroadcastWithMultiplePermissions(
    Intent intent,
    jni.JArray<jni.JString> strings,
  ) {
    _sendBroadcastWithMultiplePermissions(
            reference.pointer,
            _id_sendBroadcastWithMultiplePermissions as jni.JMethodIDPtr,
            intent.reference.pointer,
            strings.reference.pointer)
        .check();
  }

  static final _id_sendOrderedBroadcast = _class.instanceMethodId(
    r"sendOrderedBroadcast",
    r"(Landroid/content/Intent;Ljava/lang/String;)V",
  );

  static final _sendOrderedBroadcast = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string)
  void sendOrderedBroadcast(
    Intent intent,
    jni.JString string,
  ) {
    _sendOrderedBroadcast(
            reference.pointer,
            _id_sendOrderedBroadcast as jni.JMethodIDPtr,
            intent.reference.pointer,
            string.reference.pointer)
        .check();
  }

  static final _id_sendOrderedBroadcast1 = _class.instanceMethodId(
    r"sendOrderedBroadcast",
    r"(Landroid/content/Intent;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V",
  );

  static final _sendOrderedBroadcast1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string1, android.os.Bundle bundle)
  void sendOrderedBroadcast1(
    Intent intent,
    jni.JString string,
    jni.JObject broadcastReceiver,
    jni.JObject handler,
    int i,
    jni.JString string1,
    jni.JObject bundle,
  ) {
    _sendOrderedBroadcast1(
            reference.pointer,
            _id_sendOrderedBroadcast1 as jni.JMethodIDPtr,
            intent.reference.pointer,
            string.reference.pointer,
            broadcastReceiver.reference.pointer,
            handler.reference.pointer,
            i,
            string1.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_sendBroadcastAsUser = _class.instanceMethodId(
    r"sendBroadcastAsUser",
    r"(Landroid/content/Intent;Landroid/os/UserHandle;)V",
  );

  static final _sendBroadcastAsUser = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)
  void sendBroadcastAsUser(
    Intent intent,
    jni.JObject userHandle,
  ) {
    _sendBroadcastAsUser(
            reference.pointer,
            _id_sendBroadcastAsUser as jni.JMethodIDPtr,
            intent.reference.pointer,
            userHandle.reference.pointer)
        .check();
  }

  static final _id_sendBroadcastAsUser1 = _class.instanceMethodId(
    r"sendBroadcastAsUser",
    r"(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;)V",
  );

  static final _sendBroadcastAsUser1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, java.lang.String string)
  void sendBroadcastAsUser1(
    Intent intent,
    jni.JObject userHandle,
    jni.JString string,
  ) {
    _sendBroadcastAsUser1(
            reference.pointer,
            _id_sendBroadcastAsUser1 as jni.JMethodIDPtr,
            intent.reference.pointer,
            userHandle.reference.pointer,
            string.reference.pointer)
        .check();
  }

  static final _id_sendOrderedBroadcastAsUser = _class.instanceMethodId(
    r"sendOrderedBroadcastAsUser",
    r"(Landroid/content/Intent;Landroid/os/UserHandle;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V",
  );

  static final _sendOrderedBroadcastAsUser = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendOrderedBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, java.lang.String string, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string1, android.os.Bundle bundle)
  void sendOrderedBroadcastAsUser(
    Intent intent,
    jni.JObject userHandle,
    jni.JString string,
    jni.JObject broadcastReceiver,
    jni.JObject handler,
    int i,
    jni.JString string1,
    jni.JObject bundle,
  ) {
    _sendOrderedBroadcastAsUser(
            reference.pointer,
            _id_sendOrderedBroadcastAsUser as jni.JMethodIDPtr,
            intent.reference.pointer,
            userHandle.reference.pointer,
            string.reference.pointer,
            broadcastReceiver.reference.pointer,
            handler.reference.pointer,
            i,
            string1.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_sendOrderedBroadcast2 = _class.instanceMethodId(
    r"sendOrderedBroadcast",
    r"(Landroid/content/Intent;Ljava/lang/String;Ljava/lang/String;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V",
  );

  static final _sendOrderedBroadcast2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void sendOrderedBroadcast(android.content.Intent intent, java.lang.String string, java.lang.String string1, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string2, android.os.Bundle bundle)
  void sendOrderedBroadcast2(
    Intent intent,
    jni.JString string,
    jni.JString string1,
    jni.JObject broadcastReceiver,
    jni.JObject handler,
    int i,
    jni.JString string2,
    jni.JObject bundle,
  ) {
    _sendOrderedBroadcast2(
            reference.pointer,
            _id_sendOrderedBroadcast2 as jni.JMethodIDPtr,
            intent.reference.pointer,
            string.reference.pointer,
            string1.reference.pointer,
            broadcastReceiver.reference.pointer,
            handler.reference.pointer,
            i,
            string2.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_sendStickyBroadcast = _class.instanceMethodId(
    r"sendStickyBroadcast",
    r"(Landroid/content/Intent;)V",
  );

  static final _sendStickyBroadcast = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendStickyBroadcast(android.content.Intent intent)
  void sendStickyBroadcast(
    Intent intent,
  ) {
    _sendStickyBroadcast(
            reference.pointer,
            _id_sendStickyBroadcast as jni.JMethodIDPtr,
            intent.reference.pointer)
        .check();
  }

  static final _id_sendStickyBroadcast1 = _class.instanceMethodId(
    r"sendStickyBroadcast",
    r"(Landroid/content/Intent;Landroid/os/Bundle;)V",
  );

  static final _sendStickyBroadcast1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void sendStickyBroadcast(android.content.Intent intent, android.os.Bundle bundle)
  void sendStickyBroadcast1(
    Intent intent,
    jni.JObject bundle,
  ) {
    _sendStickyBroadcast1(
            reference.pointer,
            _id_sendStickyBroadcast1 as jni.JMethodIDPtr,
            intent.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_sendStickyOrderedBroadcast = _class.instanceMethodId(
    r"sendStickyOrderedBroadcast",
    r"(Landroid/content/Intent;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V",
  );

  static final _sendStickyOrderedBroadcast = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendStickyOrderedBroadcast(android.content.Intent intent, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string, android.os.Bundle bundle)
  void sendStickyOrderedBroadcast(
    Intent intent,
    jni.JObject broadcastReceiver,
    jni.JObject handler,
    int i,
    jni.JString string,
    jni.JObject bundle,
  ) {
    _sendStickyOrderedBroadcast(
            reference.pointer,
            _id_sendStickyOrderedBroadcast as jni.JMethodIDPtr,
            intent.reference.pointer,
            broadcastReceiver.reference.pointer,
            handler.reference.pointer,
            i,
            string.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_removeStickyBroadcast = _class.instanceMethodId(
    r"removeStickyBroadcast",
    r"(Landroid/content/Intent;)V",
  );

  static final _removeStickyBroadcast = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void removeStickyBroadcast(android.content.Intent intent)
  void removeStickyBroadcast(
    Intent intent,
  ) {
    _removeStickyBroadcast(
            reference.pointer,
            _id_removeStickyBroadcast as jni.JMethodIDPtr,
            intent.reference.pointer)
        .check();
  }

  static final _id_sendStickyBroadcastAsUser = _class.instanceMethodId(
    r"sendStickyBroadcastAsUser",
    r"(Landroid/content/Intent;Landroid/os/UserHandle;)V",
  );

  static final _sendStickyBroadcastAsUser = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendStickyBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)
  void sendStickyBroadcastAsUser(
    Intent intent,
    jni.JObject userHandle,
  ) {
    _sendStickyBroadcastAsUser(
            reference.pointer,
            _id_sendStickyBroadcastAsUser as jni.JMethodIDPtr,
            intent.reference.pointer,
            userHandle.reference.pointer)
        .check();
  }

  static final _id_sendStickyOrderedBroadcastAsUser = _class.instanceMethodId(
    r"sendStickyOrderedBroadcastAsUser",
    r"(Landroid/content/Intent;Landroid/os/UserHandle;Landroid/content/BroadcastReceiver;Landroid/os/Handler;ILjava/lang/String;Landroid/os/Bundle;)V",
  );

  static final _sendStickyOrderedBroadcastAsUser =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<
                          (
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>,
                            ffi.Int64,
                            ffi.Pointer<ffi.Void>,
                            ffi.Pointer<ffi.Void>
                          )>)>>("globalEnv_CallVoidMethod")
          .asFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>,
                  int,
                  ffi.Pointer<ffi.Void>,
                  ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void sendStickyOrderedBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle, android.content.BroadcastReceiver broadcastReceiver, android.os.Handler handler, int i, java.lang.String string, android.os.Bundle bundle)
  void sendStickyOrderedBroadcastAsUser(
    Intent intent,
    jni.JObject userHandle,
    jni.JObject broadcastReceiver,
    jni.JObject handler,
    int i,
    jni.JString string,
    jni.JObject bundle,
  ) {
    _sendStickyOrderedBroadcastAsUser(
            reference.pointer,
            _id_sendStickyOrderedBroadcastAsUser as jni.JMethodIDPtr,
            intent.reference.pointer,
            userHandle.reference.pointer,
            broadcastReceiver.reference.pointer,
            handler.reference.pointer,
            i,
            string.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_removeStickyBroadcastAsUser = _class.instanceMethodId(
    r"removeStickyBroadcastAsUser",
    r"(Landroid/content/Intent;Landroid/os/UserHandle;)V",
  );

  static final _removeStickyBroadcastAsUser = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void removeStickyBroadcastAsUser(android.content.Intent intent, android.os.UserHandle userHandle)
  void removeStickyBroadcastAsUser(
    Intent intent,
    jni.JObject userHandle,
  ) {
    _removeStickyBroadcastAsUser(
            reference.pointer,
            _id_removeStickyBroadcastAsUser as jni.JMethodIDPtr,
            intent.reference.pointer,
            userHandle.reference.pointer)
        .check();
  }

  static final _id_registerReceiver = _class.instanceMethodId(
    r"registerReceiver",
    r"(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;)Landroid/content/Intent;",
  );

  static final _registerReceiver = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter)
  /// The returned object must be released after use, by calling the [release] method.
  Intent registerReceiver(
    jni.JObject broadcastReceiver,
    jni.JObject intentFilter,
  ) {
    return _registerReceiver(
            reference.pointer,
            _id_registerReceiver as jni.JMethodIDPtr,
            broadcastReceiver.reference.pointer,
            intentFilter.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_registerReceiver1 = _class.instanceMethodId(
    r"registerReceiver",
    r"(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;I)Landroid/content/Intent;",
  );

  static final _registerReceiver1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, int i)
  /// The returned object must be released after use, by calling the [release] method.
  Intent registerReceiver1(
    jni.JObject broadcastReceiver,
    jni.JObject intentFilter,
    int i,
  ) {
    return _registerReceiver1(
            reference.pointer,
            _id_registerReceiver1 as jni.JMethodIDPtr,
            broadcastReceiver.reference.pointer,
            intentFilter.reference.pointer,
            i)
        .object(const $IntentType());
  }

  static final _id_registerReceiver2 = _class.instanceMethodId(
    r"registerReceiver",
    r"(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;)Landroid/content/Intent;",
  );

  static final _registerReceiver2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, java.lang.String string, android.os.Handler handler)
  /// The returned object must be released after use, by calling the [release] method.
  Intent registerReceiver2(
    jni.JObject broadcastReceiver,
    jni.JObject intentFilter,
    jni.JString string,
    jni.JObject handler,
  ) {
    return _registerReceiver2(
            reference.pointer,
            _id_registerReceiver2 as jni.JMethodIDPtr,
            broadcastReceiver.reference.pointer,
            intentFilter.reference.pointer,
            string.reference.pointer,
            handler.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_registerReceiver3 = _class.instanceMethodId(
    r"registerReceiver",
    r"(Landroid/content/BroadcastReceiver;Landroid/content/IntentFilter;Ljava/lang/String;Landroid/os/Handler;I)Landroid/content/Intent;",
  );

  static final _registerReceiver3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int)>();

  /// from: public abstract android.content.Intent registerReceiver(android.content.BroadcastReceiver broadcastReceiver, android.content.IntentFilter intentFilter, java.lang.String string, android.os.Handler handler, int i)
  /// The returned object must be released after use, by calling the [release] method.
  Intent registerReceiver3(
    jni.JObject broadcastReceiver,
    jni.JObject intentFilter,
    jni.JString string,
    jni.JObject handler,
    int i,
  ) {
    return _registerReceiver3(
            reference.pointer,
            _id_registerReceiver3 as jni.JMethodIDPtr,
            broadcastReceiver.reference.pointer,
            intentFilter.reference.pointer,
            string.reference.pointer,
            handler.reference.pointer,
            i)
        .object(const $IntentType());
  }

  static final _id_unregisterReceiver = _class.instanceMethodId(
    r"unregisterReceiver",
    r"(Landroid/content/BroadcastReceiver;)V",
  );

  static final _unregisterReceiver = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void unregisterReceiver(android.content.BroadcastReceiver broadcastReceiver)
  void unregisterReceiver(
    jni.JObject broadcastReceiver,
  ) {
    _unregisterReceiver(
            reference.pointer,
            _id_unregisterReceiver as jni.JMethodIDPtr,
            broadcastReceiver.reference.pointer)
        .check();
  }

  static final _id_startService = _class.instanceMethodId(
    r"startService",
    r"(Landroid/content/Intent;)Landroid/content/ComponentName;",
  );

  static final _startService = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.ComponentName startService(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject startService(
    Intent intent,
  ) {
    return _startService(reference.pointer,
            _id_startService as jni.JMethodIDPtr, intent.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_startForegroundService = _class.instanceMethodId(
    r"startForegroundService",
    r"(Landroid/content/Intent;)Landroid/content/ComponentName;",
  );

  static final _startForegroundService = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.ComponentName startForegroundService(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject startForegroundService(
    Intent intent,
  ) {
    return _startForegroundService(
            reference.pointer,
            _id_startForegroundService as jni.JMethodIDPtr,
            intent.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_stopService = _class.instanceMethodId(
    r"stopService",
    r"(Landroid/content/Intent;)Z",
  );

  static final _stopService = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean stopService(android.content.Intent intent)
  bool stopService(
    Intent intent,
  ) {
    return _stopService(reference.pointer, _id_stopService as jni.JMethodIDPtr,
            intent.reference.pointer)
        .boolean;
  }

  static final _id_bindService = _class.instanceMethodId(
    r"bindService",
    r"(Landroid/content/Intent;Landroid/content/ServiceConnection;I)Z",
  );

  static final _bindService = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64
                      )>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract boolean bindService(android.content.Intent intent, android.content.ServiceConnection serviceConnection, int i)
  bool bindService(
    Intent intent,
    jni.JObject serviceConnection,
    int i,
  ) {
    return _bindService(reference.pointer, _id_bindService as jni.JMethodIDPtr,
            intent.reference.pointer, serviceConnection.reference.pointer, i)
        .boolean;
  }

  static final _id_bindService1 = _class.instanceMethodId(
    r"bindService",
    r"(Landroid/content/Intent;ILjava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z",
  );

  static final _bindService1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean bindService(android.content.Intent intent, int i, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)
  bool bindService1(
    Intent intent,
    int i,
    jni.JObject executor,
    jni.JObject serviceConnection,
  ) {
    return _bindService1(
            reference.pointer,
            _id_bindService1 as jni.JMethodIDPtr,
            intent.reference.pointer,
            i,
            executor.reference.pointer,
            serviceConnection.reference.pointer)
        .boolean;
  }

  static final _id_bindIsolatedService = _class.instanceMethodId(
    r"bindIsolatedService",
    r"(Landroid/content/Intent;ILjava/lang/String;Ljava/util/concurrent/Executor;Landroid/content/ServiceConnection;)Z",
  );

  static final _bindIsolatedService = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean bindIsolatedService(android.content.Intent intent, int i, java.lang.String string, java.util.concurrent.Executor executor, android.content.ServiceConnection serviceConnection)
  bool bindIsolatedService(
    Intent intent,
    int i,
    jni.JString string,
    jni.JObject executor,
    jni.JObject serviceConnection,
  ) {
    return _bindIsolatedService(
            reference.pointer,
            _id_bindIsolatedService as jni.JMethodIDPtr,
            intent.reference.pointer,
            i,
            string.reference.pointer,
            executor.reference.pointer,
            serviceConnection.reference.pointer)
        .boolean;
  }

  static final _id_bindServiceAsUser = _class.instanceMethodId(
    r"bindServiceAsUser",
    r"(Landroid/content/Intent;Landroid/content/ServiceConnection;ILandroid/os/UserHandle;)Z",
  );

  static final _bindServiceAsUser = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean bindServiceAsUser(android.content.Intent intent, android.content.ServiceConnection serviceConnection, int i, android.os.UserHandle userHandle)
  bool bindServiceAsUser(
    Intent intent,
    jni.JObject serviceConnection,
    int i,
    jni.JObject userHandle,
  ) {
    return _bindServiceAsUser(
            reference.pointer,
            _id_bindServiceAsUser as jni.JMethodIDPtr,
            intent.reference.pointer,
            serviceConnection.reference.pointer,
            i,
            userHandle.reference.pointer)
        .boolean;
  }

  static final _id_updateServiceGroup = _class.instanceMethodId(
    r"updateServiceGroup",
    r"(Landroid/content/ServiceConnection;II)V",
  );

  static final _updateServiceGroup = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Int64
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public void updateServiceGroup(android.content.ServiceConnection serviceConnection, int i, int i1)
  void updateServiceGroup(
    jni.JObject serviceConnection,
    int i,
    int i1,
  ) {
    _updateServiceGroup(
            reference.pointer,
            _id_updateServiceGroup as jni.JMethodIDPtr,
            serviceConnection.reference.pointer,
            i,
            i1)
        .check();
  }

  static final _id_unbindService = _class.instanceMethodId(
    r"unbindService",
    r"(Landroid/content/ServiceConnection;)V",
  );

  static final _unbindService = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void unbindService(android.content.ServiceConnection serviceConnection)
  void unbindService(
    jni.JObject serviceConnection,
  ) {
    _unbindService(reference.pointer, _id_unbindService as jni.JMethodIDPtr,
            serviceConnection.reference.pointer)
        .check();
  }

  static final _id_startInstrumentation = _class.instanceMethodId(
    r"startInstrumentation",
    r"(Landroid/content/ComponentName;Ljava/lang/String;Landroid/os/Bundle;)Z",
  );

  static final _startInstrumentation = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract boolean startInstrumentation(android.content.ComponentName componentName, java.lang.String string, android.os.Bundle bundle)
  bool startInstrumentation(
    jni.JObject componentName,
    jni.JString string,
    jni.JObject bundle,
  ) {
    return _startInstrumentation(
            reference.pointer,
            _id_startInstrumentation as jni.JMethodIDPtr,
            componentName.reference.pointer,
            string.reference.pointer,
            bundle.reference.pointer)
        .boolean;
  }

  static final _id_getSystemService = _class.instanceMethodId(
    r"getSystemService",
    r"(Ljava/lang/String;)Ljava/lang/Object;",
  );

  static final _getSystemService = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.Object getSystemService(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSystemService(
    jni.JString string,
  ) {
    return _getSystemService(reference.pointer,
            _id_getSystemService as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getSystemService1 = _class.instanceMethodId(
    r"getSystemService",
    r"(Ljava/lang/Class;)Ljava/lang/Object;",
  );

  static final _getSystemService1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final T getSystemService(java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  $T getSystemService1<$T extends jni.JObject>(
    jni.JObject class0, {
    required jni.JObjType<$T> T,
  }) {
    return _getSystemService1(reference.pointer,
            _id_getSystemService1 as jni.JMethodIDPtr, class0.reference.pointer)
        .object(T);
  }

  static final _id_getSystemServiceName = _class.instanceMethodId(
    r"getSystemServiceName",
    r"(Ljava/lang/Class;)Ljava/lang/String;",
  );

  static final _getSystemServiceName = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract java.lang.String getSystemServiceName(java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getSystemServiceName(
    jni.JObject class0,
  ) {
    return _getSystemServiceName(
            reference.pointer,
            _id_getSystemServiceName as jni.JMethodIDPtr,
            class0.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_checkPermission = _class.instanceMethodId(
    r"checkPermission",
    r"(Ljava/lang/String;II)I",
  );

  static final _checkPermission = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Int64
                      )>)>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int)>();

  /// from: public abstract int checkPermission(java.lang.String string, int i, int i1)
  int checkPermission(
    jni.JString string,
    int i,
    int i1,
  ) {
    return _checkPermission(
            reference.pointer,
            _id_checkPermission as jni.JMethodIDPtr,
            string.reference.pointer,
            i,
            i1)
        .integer;
  }

  static final _id_checkCallingPermission = _class.instanceMethodId(
    r"checkCallingPermission",
    r"(Ljava/lang/String;)I",
  );

  static final _checkCallingPermission = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int checkCallingPermission(java.lang.String string)
  int checkCallingPermission(
    jni.JString string,
  ) {
    return _checkCallingPermission(
            reference.pointer,
            _id_checkCallingPermission as jni.JMethodIDPtr,
            string.reference.pointer)
        .integer;
  }

  static final _id_checkCallingOrSelfPermission = _class.instanceMethodId(
    r"checkCallingOrSelfPermission",
    r"(Ljava/lang/String;)I",
  );

  static final _checkCallingOrSelfPermission = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int checkCallingOrSelfPermission(java.lang.String string)
  int checkCallingOrSelfPermission(
    jni.JString string,
  ) {
    return _checkCallingOrSelfPermission(
            reference.pointer,
            _id_checkCallingOrSelfPermission as jni.JMethodIDPtr,
            string.reference.pointer)
        .integer;
  }

  static final _id_checkSelfPermission = _class.instanceMethodId(
    r"checkSelfPermission",
    r"(Ljava/lang/String;)I",
  );

  static final _checkSelfPermission = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract int checkSelfPermission(java.lang.String string)
  int checkSelfPermission(
    jni.JString string,
  ) {
    return _checkSelfPermission(
            reference.pointer,
            _id_checkSelfPermission as jni.JMethodIDPtr,
            string.reference.pointer)
        .integer;
  }

  static final _id_enforcePermission = _class.instanceMethodId(
    r"enforcePermission",
    r"(Ljava/lang/String;IILjava/lang/String;)V",
  );

  static final _enforcePermission = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforcePermission(java.lang.String string, int i, int i1, java.lang.String string1)
  void enforcePermission(
    jni.JString string,
    int i,
    int i1,
    jni.JString string1,
  ) {
    _enforcePermission(
            reference.pointer,
            _id_enforcePermission as jni.JMethodIDPtr,
            string.reference.pointer,
            i,
            i1,
            string1.reference.pointer)
        .check();
  }

  static final _id_enforceCallingPermission = _class.instanceMethodId(
    r"enforceCallingPermission",
    r"(Ljava/lang/String;Ljava/lang/String;)V",
  );

  static final _enforceCallingPermission = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforceCallingPermission(java.lang.String string, java.lang.String string1)
  void enforceCallingPermission(
    jni.JString string,
    jni.JString string1,
  ) {
    _enforceCallingPermission(
            reference.pointer,
            _id_enforceCallingPermission as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer)
        .check();
  }

  static final _id_enforceCallingOrSelfPermission = _class.instanceMethodId(
    r"enforceCallingOrSelfPermission",
    r"(Ljava/lang/String;Ljava/lang/String;)V",
  );

  static final _enforceCallingOrSelfPermission = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforceCallingOrSelfPermission(java.lang.String string, java.lang.String string1)
  void enforceCallingOrSelfPermission(
    jni.JString string,
    jni.JString string1,
  ) {
    _enforceCallingOrSelfPermission(
            reference.pointer,
            _id_enforceCallingOrSelfPermission as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer)
        .check();
  }

  static final _id_grantUriPermission = _class.instanceMethodId(
    r"grantUriPermission",
    r"(Ljava/lang/String;Landroid/net/Uri;I)V",
  );

  static final _grantUriPermission = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract void grantUriPermission(java.lang.String string, android.net.Uri uri, int i)
  void grantUriPermission(
    jni.JString string,
    jni.JObject uri,
    int i,
  ) {
    _grantUriPermission(
            reference.pointer,
            _id_grantUriPermission as jni.JMethodIDPtr,
            string.reference.pointer,
            uri.reference.pointer,
            i)
        .check();
  }

  static final _id_revokeUriPermission = _class.instanceMethodId(
    r"revokeUriPermission",
    r"(Landroid/net/Uri;I)V",
  );

  static final _revokeUriPermission = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract void revokeUriPermission(android.net.Uri uri, int i)
  void revokeUriPermission(
    jni.JObject uri,
    int i,
  ) {
    _revokeUriPermission(
            reference.pointer,
            _id_revokeUriPermission as jni.JMethodIDPtr,
            uri.reference.pointer,
            i)
        .check();
  }

  static final _id_revokeUriPermission1 = _class.instanceMethodId(
    r"revokeUriPermission",
    r"(Ljava/lang/String;Landroid/net/Uri;I)V",
  );

  static final _revokeUriPermission1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract void revokeUriPermission(java.lang.String string, android.net.Uri uri, int i)
  void revokeUriPermission1(
    jni.JString string,
    jni.JObject uri,
    int i,
  ) {
    _revokeUriPermission1(
            reference.pointer,
            _id_revokeUriPermission1 as jni.JMethodIDPtr,
            string.reference.pointer,
            uri.reference.pointer,
            i)
        .check();
  }

  static final _id_checkUriPermission = _class.instanceMethodId(
    r"checkUriPermission",
    r"(Landroid/net/Uri;III)I",
  );

  static final _checkUriPermission = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Int64,
                        ffi.Int64
                      )>)>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: public abstract int checkUriPermission(android.net.Uri uri, int i, int i1, int i2)
  int checkUriPermission(
    jni.JObject uri,
    int i,
    int i1,
    int i2,
  ) {
    return _checkUriPermission(
            reference.pointer,
            _id_checkUriPermission as jni.JMethodIDPtr,
            uri.reference.pointer,
            i,
            i1,
            i2)
        .integer;
  }

  static final _id_checkUriPermissions = _class.instanceMethodId(
    r"checkUriPermissions",
    r"(Ljava/util/List;III)[I",
  );

  static final _checkUriPermissions = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Int64,
                        ffi.Int64
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: public java.lang.Object[] checkUriPermissions(java.util.List list, int i, int i1, int i2)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jint> checkUriPermissions(
    jni.JList<jni.JObject> list,
    int i,
    int i1,
    int i2,
  ) {
    return _checkUriPermissions(
            reference.pointer,
            _id_checkUriPermissions as jni.JMethodIDPtr,
            list.reference.pointer,
            i,
            i1,
            i2)
        .object(const jni.JArrayType(jni.jintType()));
  }

  static final _id_checkCallingUriPermission = _class.instanceMethodId(
    r"checkCallingUriPermission",
    r"(Landroid/net/Uri;I)I",
  );

  static final _checkCallingUriPermission = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract int checkCallingUriPermission(android.net.Uri uri, int i)
  int checkCallingUriPermission(
    jni.JObject uri,
    int i,
  ) {
    return _checkCallingUriPermission(
            reference.pointer,
            _id_checkCallingUriPermission as jni.JMethodIDPtr,
            uri.reference.pointer,
            i)
        .integer;
  }

  static final _id_checkCallingUriPermissions = _class.instanceMethodId(
    r"checkCallingUriPermissions",
    r"(Ljava/util/List;I)[I",
  );

  static final _checkCallingUriPermissions = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.lang.Object[] checkCallingUriPermissions(java.util.List list, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jint> checkCallingUriPermissions(
    jni.JList<jni.JObject> list,
    int i,
  ) {
    return _checkCallingUriPermissions(
            reference.pointer,
            _id_checkCallingUriPermissions as jni.JMethodIDPtr,
            list.reference.pointer,
            i)
        .object(const jni.JArrayType(jni.jintType()));
  }

  static final _id_checkCallingOrSelfUriPermission = _class.instanceMethodId(
    r"checkCallingOrSelfUriPermission",
    r"(Landroid/net/Uri;I)I",
  );

  static final _checkCallingOrSelfUriPermission = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract int checkCallingOrSelfUriPermission(android.net.Uri uri, int i)
  int checkCallingOrSelfUriPermission(
    jni.JObject uri,
    int i,
  ) {
    return _checkCallingOrSelfUriPermission(
            reference.pointer,
            _id_checkCallingOrSelfUriPermission as jni.JMethodIDPtr,
            uri.reference.pointer,
            i)
        .integer;
  }

  static final _id_checkCallingOrSelfUriPermissions = _class.instanceMethodId(
    r"checkCallingOrSelfUriPermissions",
    r"(Ljava/util/List;I)[I",
  );

  static final _checkCallingOrSelfUriPermissions =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JniResult Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
              "globalEnv_CallObjectMethod")
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.lang.Object[] checkCallingOrSelfUriPermissions(java.util.List list, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jint> checkCallingOrSelfUriPermissions(
    jni.JList<jni.JObject> list,
    int i,
  ) {
    return _checkCallingOrSelfUriPermissions(
            reference.pointer,
            _id_checkCallingOrSelfUriPermissions as jni.JMethodIDPtr,
            list.reference.pointer,
            i)
        .object(const jni.JArrayType(jni.jintType()));
  }

  static final _id_checkUriPermission1 = _class.instanceMethodId(
    r"checkUriPermission",
    r"(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;III)I",
  );

  static final _checkUriPermission1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Int64,
                        ffi.Int64
                      )>)>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int)>();

  /// from: public abstract int checkUriPermission(android.net.Uri uri, java.lang.String string, java.lang.String string1, int i, int i1, int i2)
  int checkUriPermission1(
    jni.JObject uri,
    jni.JString string,
    jni.JString string1,
    int i,
    int i1,
    int i2,
  ) {
    return _checkUriPermission1(
            reference.pointer,
            _id_checkUriPermission1 as jni.JMethodIDPtr,
            uri.reference.pointer,
            string.reference.pointer,
            string1.reference.pointer,
            i,
            i1,
            i2)
        .integer;
  }

  static final _id_enforceUriPermission = _class.instanceMethodId(
    r"enforceUriPermission",
    r"(Landroid/net/Uri;IIILjava/lang/String;)V",
  );

  static final _enforceUriPermission = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Int64,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int, int, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforceUriPermission(android.net.Uri uri, int i, int i1, int i2, java.lang.String string)
  void enforceUriPermission(
    jni.JObject uri,
    int i,
    int i1,
    int i2,
    jni.JString string,
  ) {
    _enforceUriPermission(
            reference.pointer,
            _id_enforceUriPermission as jni.JMethodIDPtr,
            uri.reference.pointer,
            i,
            i1,
            i2,
            string.reference.pointer)
        .check();
  }

  static final _id_enforceCallingUriPermission = _class.instanceMethodId(
    r"enforceCallingUriPermission",
    r"(Landroid/net/Uri;ILjava/lang/String;)V",
  );

  static final _enforceCallingUriPermission = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforceCallingUriPermission(android.net.Uri uri, int i, java.lang.String string)
  void enforceCallingUriPermission(
    jni.JObject uri,
    int i,
    jni.JString string,
  ) {
    _enforceCallingUriPermission(
            reference.pointer,
            _id_enforceCallingUriPermission as jni.JMethodIDPtr,
            uri.reference.pointer,
            i,
            string.reference.pointer)
        .check();
  }

  static final _id_enforceCallingOrSelfUriPermission = _class.instanceMethodId(
    r"enforceCallingOrSelfUriPermission",
    r"(Landroid/net/Uri;ILjava/lang/String;)V",
  );

  static final _enforceCallingOrSelfUriPermission =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<
                          (
                            ffi.Pointer<ffi.Void>,
                            ffi.Int64,
                            ffi.Pointer<ffi.Void>
                          )>)>>("globalEnv_CallVoidMethod")
          .asFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>,
                  int,
                  ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforceCallingOrSelfUriPermission(android.net.Uri uri, int i, java.lang.String string)
  void enforceCallingOrSelfUriPermission(
    jni.JObject uri,
    int i,
    jni.JString string,
  ) {
    _enforceCallingOrSelfUriPermission(
            reference.pointer,
            _id_enforceCallingOrSelfUriPermission as jni.JMethodIDPtr,
            uri.reference.pointer,
            i,
            string.reference.pointer)
        .check();
  }

  static final _id_enforceUriPermission1 = _class.instanceMethodId(
    r"enforceUriPermission",
    r"(Landroid/net/Uri;Ljava/lang/String;Ljava/lang/String;IIILjava/lang/String;)V",
  );

  static final _enforceUriPermission1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Int64,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract void enforceUriPermission(android.net.Uri uri, java.lang.String string, java.lang.String string1, int i, int i1, int i2, java.lang.String string2)
  void enforceUriPermission1(
    jni.JObject uri,
    jni.JString string,
    jni.JString string1,
    int i,
    int i1,
    int i2,
    jni.JString string2,
  ) {
    _enforceUriPermission1(
            reference.pointer,
            _id_enforceUriPermission1 as jni.JMethodIDPtr,
            uri.reference.pointer,
            string.reference.pointer,
            string1.reference.pointer,
            i,
            i1,
            i2,
            string2.reference.pointer)
        .check();
  }

  static final _id_revokeSelfPermissionOnKill = _class.instanceMethodId(
    r"revokeSelfPermissionOnKill",
    r"(Ljava/lang/String;)V",
  );

  static final _revokeSelfPermissionOnKill = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void revokeSelfPermissionOnKill(java.lang.String string)
  void revokeSelfPermissionOnKill(
    jni.JString string,
  ) {
    _revokeSelfPermissionOnKill(
            reference.pointer,
            _id_revokeSelfPermissionOnKill as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_revokeSelfPermissionsOnKill = _class.instanceMethodId(
    r"revokeSelfPermissionsOnKill",
    r"(Ljava/util/Collection;)V",
  );

  static final _revokeSelfPermissionsOnKill = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void revokeSelfPermissionsOnKill(java.util.Collection collection)
  void revokeSelfPermissionsOnKill(
    jni.JObject collection,
  ) {
    _revokeSelfPermissionsOnKill(
            reference.pointer,
            _id_revokeSelfPermissionsOnKill as jni.JMethodIDPtr,
            collection.reference.pointer)
        .check();
  }

  static final _id_createPackageContext = _class.instanceMethodId(
    r"createPackageContext",
    r"(Ljava/lang/String;I)Landroid/content/Context;",
  );

  static final _createPackageContext = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public abstract android.content.Context createPackageContext(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  Context createPackageContext(
    jni.JString string,
    int i,
  ) {
    return _createPackageContext(
            reference.pointer,
            _id_createPackageContext as jni.JMethodIDPtr,
            string.reference.pointer,
            i)
        .object(const $ContextType());
  }

  static final _id_createContextForSplit = _class.instanceMethodId(
    r"createContextForSplit",
    r"(Ljava/lang/String;)Landroid/content/Context;",
  );

  static final _createContextForSplit = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.Context createContextForSplit(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Context createContextForSplit(
    jni.JString string,
  ) {
    return _createContextForSplit(
            reference.pointer,
            _id_createContextForSplit as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $ContextType());
  }

  static final _id_createConfigurationContext = _class.instanceMethodId(
    r"createConfigurationContext",
    r"(Landroid/content/res/Configuration;)Landroid/content/Context;",
  );

  static final _createConfigurationContext = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.Context createConfigurationContext(android.content.res.Configuration configuration)
  /// The returned object must be released after use, by calling the [release] method.
  Context createConfigurationContext(
    jni.JObject configuration,
  ) {
    return _createConfigurationContext(
            reference.pointer,
            _id_createConfigurationContext as jni.JMethodIDPtr,
            configuration.reference.pointer)
        .object(const $ContextType());
  }

  static final _id_createDisplayContext = _class.instanceMethodId(
    r"createDisplayContext",
    r"(Landroid/view/Display;)Landroid/content/Context;",
  );

  static final _createDisplayContext = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public abstract android.content.Context createDisplayContext(android.view.Display display)
  /// The returned object must be released after use, by calling the [release] method.
  Context createDisplayContext(
    jni.JObject display,
  ) {
    return _createDisplayContext(
            reference.pointer,
            _id_createDisplayContext as jni.JMethodIDPtr,
            display.reference.pointer)
        .object(const $ContextType());
  }

  static final _id_createWindowContext = _class.instanceMethodId(
    r"createWindowContext",
    r"(ILandroid/os/Bundle;)Landroid/content/Context;",
  );

  static final _createWindowContext = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Int64, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Context createWindowContext(int i, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  Context createWindowContext(
    int i,
    jni.JObject bundle,
  ) {
    return _createWindowContext(
            reference.pointer,
            _id_createWindowContext as jni.JMethodIDPtr,
            i,
            bundle.reference.pointer)
        .object(const $ContextType());
  }

  static final _id_createWindowContext1 = _class.instanceMethodId(
    r"createWindowContext",
    r"(Landroid/view/Display;ILandroid/os/Bundle;)Landroid/content/Context;",
  );

  static final _createWindowContext1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Context createWindowContext(android.view.Display display, int i, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  Context createWindowContext1(
    jni.JObject display,
    int i,
    jni.JObject bundle,
  ) {
    return _createWindowContext1(
            reference.pointer,
            _id_createWindowContext1 as jni.JMethodIDPtr,
            display.reference.pointer,
            i,
            bundle.reference.pointer)
        .object(const $ContextType());
  }

  static final _id_createContext = _class.instanceMethodId(
    r"createContext",
    r"(Landroid/content/ContextParams;)Landroid/content/Context;",
  );

  static final _createContext = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Context createContext(android.content.ContextParams contextParams)
  /// The returned object must be released after use, by calling the [release] method.
  Context createContext(
    jni.JObject contextParams,
  ) {
    return _createContext(
            reference.pointer,
            _id_createContext as jni.JMethodIDPtr,
            contextParams.reference.pointer)
        .object(const $ContextType());
  }

  static final _id_createAttributionContext = _class.instanceMethodId(
    r"createAttributionContext",
    r"(Ljava/lang/String;)Landroid/content/Context;",
  );

  static final _createAttributionContext = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Context createAttributionContext(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Context createAttributionContext(
    jni.JString string,
  ) {
    return _createAttributionContext(
            reference.pointer,
            _id_createAttributionContext as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $ContextType());
  }

  static final _id_createDeviceProtectedStorageContext =
      _class.instanceMethodId(
    r"createDeviceProtectedStorageContext",
    r"()Landroid/content/Context;",
  );

  static final _createDeviceProtectedStorageContext =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>("globalEnv_CallObjectMethod")
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: public abstract android.content.Context createDeviceProtectedStorageContext()
  /// The returned object must be released after use, by calling the [release] method.
  Context createDeviceProtectedStorageContext() {
    return _createDeviceProtectedStorageContext(reference.pointer,
            _id_createDeviceProtectedStorageContext as jni.JMethodIDPtr)
        .object(const $ContextType());
  }

  static final _id_getDisplay = _class.instanceMethodId(
    r"getDisplay",
    r"()Landroid/view/Display;",
  );

  static final _getDisplay = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.view.Display getDisplay()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getDisplay() {
    return _getDisplay(reference.pointer, _id_getDisplay as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_isRestricted = _class.instanceMethodId(
    r"isRestricted",
    r"()Z",
  );

  static final _isRestricted = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isRestricted()
  bool isRestricted() {
    return _isRestricted(
            reference.pointer, _id_isRestricted as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isDeviceProtectedStorage = _class.instanceMethodId(
    r"isDeviceProtectedStorage",
    r"()Z",
  );

  static final _isDeviceProtectedStorage = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public abstract boolean isDeviceProtectedStorage()
  bool isDeviceProtectedStorage() {
    return _isDeviceProtectedStorage(
            reference.pointer, _id_isDeviceProtectedStorage as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isUiContext = _class.instanceMethodId(
    r"isUiContext",
    r"()Z",
  );

  static final _isUiContext = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isUiContext()
  bool isUiContext() {
    return _isUiContext(reference.pointer, _id_isUiContext as jni.JMethodIDPtr)
        .boolean;
  }
}

final class $ContextType extends jni.JObjType<Context> {
  const $ContextType();

  @override
  String get signature => r"Landroid/content/Context;";

  @override
  Context fromReference(jni.JReference reference) =>
      Context.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ContextType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ContextType) && other is $ContextType;
  }
}

/// from: android.content.Intent$FilterComparison
class Intent_FilterComparison extends jni.JObject {
  @override
  late final jni.JObjType<Intent_FilterComparison> $type = type;

  Intent_FilterComparison.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/content/Intent$FilterComparison");

  /// The type which includes information such as the signature of this class.
  static const type = $Intent_FilterComparisonType();
  static final _id_new0 = _class.constructorId(
    r"(Landroid/content/Intent;)V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent_FilterComparison(
    Intent intent,
  ) {
    return Intent_FilterComparison.fromReference(_new0(_class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr, intent.reference.pointer)
        .reference);
  }

  static final _id_getIntent = _class.instanceMethodId(
    r"getIntent",
    r"()Landroid/content/Intent;",
  );

  static final _getIntent = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.content.Intent getIntent()
  /// The returned object must be released after use, by calling the [release] method.
  Intent getIntent() {
    return _getIntent(reference.pointer, _id_getIntent as jni.JMethodIDPtr)
        .object(const $IntentType());
  }

  static final _id_equals = _class.instanceMethodId(
    r"equals",
    r"(Ljava/lang/Object;)Z",
  );

  static final _equals = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object object)
  bool equals(
    jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_hashCode1 = _class.instanceMethodId(
    r"hashCode",
    r"()I",
  );

  static final _hashCode1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int hashCode()
  int hashCode1() {
    return _hashCode1(reference.pointer, _id_hashCode1 as jni.JMethodIDPtr)
        .integer;
  }
}

final class $Intent_FilterComparisonType
    extends jni.JObjType<Intent_FilterComparison> {
  const $Intent_FilterComparisonType();

  @override
  String get signature => r"Landroid/content/Intent$FilterComparison;";

  @override
  Intent_FilterComparison fromReference(jni.JReference reference) =>
      Intent_FilterComparison.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Intent_FilterComparisonType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Intent_FilterComparisonType) &&
        other is $Intent_FilterComparisonType;
  }
}

/// from: android.content.Intent$ShortcutIconResource
class Intent_ShortcutIconResource extends jni.JObject {
  @override
  late final jni.JObjType<Intent_ShortcutIconResource> $type = type;

  Intent_ShortcutIconResource.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class =
      jni.JClass.forName(r"android/content/Intent$ShortcutIconResource");

  /// The type which includes information such as the signature of this class.
  static const type = $Intent_ShortcutIconResourceType();
  static final _id_CREATOR = _class.staticFieldId(
    r"CREATOR",
    r"Landroid/os/Parcelable$Creator;",
  );

  /// from: static public final android.os.Parcelable$Creator CREATOR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject get CREATOR =>
      _id_CREATOR.get(_class, const jni.JObjectType());

  static final _id_packageName = _class.instanceFieldId(
    r"packageName",
    r"Ljava/lang/String;",
  );

  /// from: public java.lang.String packageName
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get packageName =>
      _id_packageName.get(this, const jni.JStringType());

  /// from: public java.lang.String packageName
  /// The returned object must be released after use, by calling the [release] method.
  set packageName(jni.JString value) =>
      _id_packageName.set(this, const jni.JStringType(), value);

  static final _id_resourceName = _class.instanceFieldId(
    r"resourceName",
    r"Ljava/lang/String;",
  );

  /// from: public java.lang.String resourceName
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString get resourceName =>
      _id_resourceName.get(this, const jni.JStringType());

  /// from: public java.lang.String resourceName
  /// The returned object must be released after use, by calling the [release] method.
  set resourceName(jni.JString value) =>
      _id_resourceName.set(this, const jni.JStringType(), value);

  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent_ShortcutIconResource() {
    return Intent_ShortcutIconResource.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_fromContext = _class.staticMethodId(
    r"fromContext",
    r"(Landroid/content/Context;I)Landroid/content/Intent$ShortcutIconResource;",
  );

  static final _fromContext = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: static public android.content.Intent$ShortcutIconResource fromContext(android.content.Context context, int i)
  /// The returned object must be released after use, by calling the [release] method.
  static Intent_ShortcutIconResource fromContext(
    Context context,
    int i,
  ) {
    return _fromContext(_class.reference.pointer,
            _id_fromContext as jni.JMethodIDPtr, context.reference.pointer, i)
        .object(const $Intent_ShortcutIconResourceType());
  }

  static final _id_describeContents = _class.instanceMethodId(
    r"describeContents",
    r"()I",
  );

  static final _describeContents = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int describeContents()
  int describeContents() {
    return _describeContents(
            reference.pointer, _id_describeContents as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r"writeToParcel",
    r"(Landroid/os/Parcel;I)V",
  );

  static final _writeToParcel = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel parcel, int i)
  void writeToParcel(
    jni.JObject parcel,
    int i,
  ) {
    _writeToParcel(reference.pointer, _id_writeToParcel as jni.JMethodIDPtr,
            parcel.reference.pointer, i)
        .check();
  }

  static final _id_toString1 = _class.instanceMethodId(
    r"toString",
    r"()Ljava/lang/String;",
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }
}

final class $Intent_ShortcutIconResourceType
    extends jni.JObjType<Intent_ShortcutIconResource> {
  const $Intent_ShortcutIconResourceType();

  @override
  String get signature => r"Landroid/content/Intent$ShortcutIconResource;";

  @override
  Intent_ShortcutIconResource fromReference(jni.JReference reference) =>
      Intent_ShortcutIconResource.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($Intent_ShortcutIconResourceType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($Intent_ShortcutIconResourceType) &&
        other is $Intent_ShortcutIconResourceType;
  }
}

/// from: android.content.Intent
class Intent extends jni.JObject {
  @override
  late final jni.JObjType<Intent> $type = type;

  Intent.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"android/content/Intent");

  /// The type which includes information such as the signature of this class.
  static const type = $IntentType();
  static final _id_ACTION_AIRPLANE_MODE_CHANGED = _class.staticFieldId(
    r"ACTION_AIRPLANE_MODE_CHANGED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_AIRPLANE_MODE_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_AIRPLANE_MODE_CHANGED =>
      _id_ACTION_AIRPLANE_MODE_CHANGED.get(_class, const jni.JStringType());

  static final _id_ACTION_ALL_APPS = _class.staticFieldId(
    r"ACTION_ALL_APPS",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_ALL_APPS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_ALL_APPS =>
      _id_ACTION_ALL_APPS.get(_class, const jni.JStringType());

  static final _id_ACTION_ANSWER = _class.staticFieldId(
    r"ACTION_ANSWER",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_ANSWER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_ANSWER =>
      _id_ACTION_ANSWER.get(_class, const jni.JStringType());

  static final _id_ACTION_APPLICATION_LOCALE_CHANGED = _class.staticFieldId(
    r"ACTION_APPLICATION_LOCALE_CHANGED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_APPLICATION_LOCALE_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_APPLICATION_LOCALE_CHANGED =>
      _id_ACTION_APPLICATION_LOCALE_CHANGED.get(
          _class, const jni.JStringType());

  static final _id_ACTION_APPLICATION_PREFERENCES = _class.staticFieldId(
    r"ACTION_APPLICATION_PREFERENCES",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_APPLICATION_PREFERENCES
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_APPLICATION_PREFERENCES =>
      _id_ACTION_APPLICATION_PREFERENCES.get(_class, const jni.JStringType());

  static final _id_ACTION_APPLICATION_RESTRICTIONS_CHANGED =
      _class.staticFieldId(
    r"ACTION_APPLICATION_RESTRICTIONS_CHANGED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_APPLICATION_RESTRICTIONS_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_APPLICATION_RESTRICTIONS_CHANGED =>
      _id_ACTION_APPLICATION_RESTRICTIONS_CHANGED.get(
          _class, const jni.JStringType());

  static final _id_ACTION_APP_ERROR = _class.staticFieldId(
    r"ACTION_APP_ERROR",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_APP_ERROR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_APP_ERROR =>
      _id_ACTION_APP_ERROR.get(_class, const jni.JStringType());

  static final _id_ACTION_ASSIST = _class.staticFieldId(
    r"ACTION_ASSIST",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_ASSIST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_ASSIST =>
      _id_ACTION_ASSIST.get(_class, const jni.JStringType());

  static final _id_ACTION_ATTACH_DATA = _class.staticFieldId(
    r"ACTION_ATTACH_DATA",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_ATTACH_DATA
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_ATTACH_DATA =>
      _id_ACTION_ATTACH_DATA.get(_class, const jni.JStringType());

  static final _id_ACTION_AUTO_REVOKE_PERMISSIONS = _class.staticFieldId(
    r"ACTION_AUTO_REVOKE_PERMISSIONS",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_AUTO_REVOKE_PERMISSIONS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_AUTO_REVOKE_PERMISSIONS =>
      _id_ACTION_AUTO_REVOKE_PERMISSIONS.get(_class, const jni.JStringType());

  static final _id_ACTION_BATTERY_CHANGED = _class.staticFieldId(
    r"ACTION_BATTERY_CHANGED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_BATTERY_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_BATTERY_CHANGED =>
      _id_ACTION_BATTERY_CHANGED.get(_class, const jni.JStringType());

  static final _id_ACTION_BATTERY_LOW = _class.staticFieldId(
    r"ACTION_BATTERY_LOW",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_BATTERY_LOW
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_BATTERY_LOW =>
      _id_ACTION_BATTERY_LOW.get(_class, const jni.JStringType());

  static final _id_ACTION_BATTERY_OKAY = _class.staticFieldId(
    r"ACTION_BATTERY_OKAY",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_BATTERY_OKAY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_BATTERY_OKAY =>
      _id_ACTION_BATTERY_OKAY.get(_class, const jni.JStringType());

  static final _id_ACTION_BOOT_COMPLETED = _class.staticFieldId(
    r"ACTION_BOOT_COMPLETED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_BOOT_COMPLETED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_BOOT_COMPLETED =>
      _id_ACTION_BOOT_COMPLETED.get(_class, const jni.JStringType());

  static final _id_ACTION_BUG_REPORT = _class.staticFieldId(
    r"ACTION_BUG_REPORT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_BUG_REPORT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_BUG_REPORT =>
      _id_ACTION_BUG_REPORT.get(_class, const jni.JStringType());

  static final _id_ACTION_CALL = _class.staticFieldId(
    r"ACTION_CALL",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_CALL
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_CALL =>
      _id_ACTION_CALL.get(_class, const jni.JStringType());

  static final _id_ACTION_CALL_BUTTON = _class.staticFieldId(
    r"ACTION_CALL_BUTTON",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_CALL_BUTTON
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_CALL_BUTTON =>
      _id_ACTION_CALL_BUTTON.get(_class, const jni.JStringType());

  static final _id_ACTION_CAMERA_BUTTON = _class.staticFieldId(
    r"ACTION_CAMERA_BUTTON",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_CAMERA_BUTTON
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_CAMERA_BUTTON =>
      _id_ACTION_CAMERA_BUTTON.get(_class, const jni.JStringType());

  static final _id_ACTION_CARRIER_SETUP = _class.staticFieldId(
    r"ACTION_CARRIER_SETUP",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_CARRIER_SETUP
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_CARRIER_SETUP =>
      _id_ACTION_CARRIER_SETUP.get(_class, const jni.JStringType());

  static final _id_ACTION_CHOOSER = _class.staticFieldId(
    r"ACTION_CHOOSER",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_CHOOSER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_CHOOSER =>
      _id_ACTION_CHOOSER.get(_class, const jni.JStringType());

  static final _id_ACTION_CLOSE_SYSTEM_DIALOGS = _class.staticFieldId(
    r"ACTION_CLOSE_SYSTEM_DIALOGS",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_CLOSE_SYSTEM_DIALOGS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_CLOSE_SYSTEM_DIALOGS =>
      _id_ACTION_CLOSE_SYSTEM_DIALOGS.get(_class, const jni.JStringType());

  static final _id_ACTION_CONFIGURATION_CHANGED = _class.staticFieldId(
    r"ACTION_CONFIGURATION_CHANGED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_CONFIGURATION_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_CONFIGURATION_CHANGED =>
      _id_ACTION_CONFIGURATION_CHANGED.get(_class, const jni.JStringType());

  static final _id_ACTION_CREATE_DOCUMENT = _class.staticFieldId(
    r"ACTION_CREATE_DOCUMENT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_CREATE_DOCUMENT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_CREATE_DOCUMENT =>
      _id_ACTION_CREATE_DOCUMENT.get(_class, const jni.JStringType());

  static final _id_ACTION_CREATE_REMINDER = _class.staticFieldId(
    r"ACTION_CREATE_REMINDER",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_CREATE_REMINDER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_CREATE_REMINDER =>
      _id_ACTION_CREATE_REMINDER.get(_class, const jni.JStringType());

  static final _id_ACTION_CREATE_SHORTCUT = _class.staticFieldId(
    r"ACTION_CREATE_SHORTCUT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_CREATE_SHORTCUT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_CREATE_SHORTCUT =>
      _id_ACTION_CREATE_SHORTCUT.get(_class, const jni.JStringType());

  static final _id_ACTION_DATE_CHANGED = _class.staticFieldId(
    r"ACTION_DATE_CHANGED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_DATE_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_DATE_CHANGED =>
      _id_ACTION_DATE_CHANGED.get(_class, const jni.JStringType());

  static final _id_ACTION_DEFAULT = _class.staticFieldId(
    r"ACTION_DEFAULT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_DEFAULT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_DEFAULT =>
      _id_ACTION_DEFAULT.get(_class, const jni.JStringType());

  static final _id_ACTION_DEFINE = _class.staticFieldId(
    r"ACTION_DEFINE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_DEFINE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_DEFINE =>
      _id_ACTION_DEFINE.get(_class, const jni.JStringType());

  static final _id_ACTION_DELETE = _class.staticFieldId(
    r"ACTION_DELETE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_DELETE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_DELETE =>
      _id_ACTION_DELETE.get(_class, const jni.JStringType());

  static final _id_ACTION_DEVICE_STORAGE_LOW = _class.staticFieldId(
    r"ACTION_DEVICE_STORAGE_LOW",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_DEVICE_STORAGE_LOW
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_DEVICE_STORAGE_LOW =>
      _id_ACTION_DEVICE_STORAGE_LOW.get(_class, const jni.JStringType());

  static final _id_ACTION_DEVICE_STORAGE_OK = _class.staticFieldId(
    r"ACTION_DEVICE_STORAGE_OK",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_DEVICE_STORAGE_OK
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_DEVICE_STORAGE_OK =>
      _id_ACTION_DEVICE_STORAGE_OK.get(_class, const jni.JStringType());

  static final _id_ACTION_DIAL = _class.staticFieldId(
    r"ACTION_DIAL",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_DIAL
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_DIAL =>
      _id_ACTION_DIAL.get(_class, const jni.JStringType());

  static final _id_ACTION_DOCK_EVENT = _class.staticFieldId(
    r"ACTION_DOCK_EVENT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_DOCK_EVENT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_DOCK_EVENT =>
      _id_ACTION_DOCK_EVENT.get(_class, const jni.JStringType());

  static final _id_ACTION_DREAMING_STARTED = _class.staticFieldId(
    r"ACTION_DREAMING_STARTED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_DREAMING_STARTED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_DREAMING_STARTED =>
      _id_ACTION_DREAMING_STARTED.get(_class, const jni.JStringType());

  static final _id_ACTION_DREAMING_STOPPED = _class.staticFieldId(
    r"ACTION_DREAMING_STOPPED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_DREAMING_STOPPED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_DREAMING_STOPPED =>
      _id_ACTION_DREAMING_STOPPED.get(_class, const jni.JStringType());

  static final _id_ACTION_EDIT = _class.staticFieldId(
    r"ACTION_EDIT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_EDIT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_EDIT =>
      _id_ACTION_EDIT.get(_class, const jni.JStringType());

  static final _id_ACTION_EXTERNAL_APPLICATIONS_AVAILABLE =
      _class.staticFieldId(
    r"ACTION_EXTERNAL_APPLICATIONS_AVAILABLE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_EXTERNAL_APPLICATIONS_AVAILABLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_EXTERNAL_APPLICATIONS_AVAILABLE =>
      _id_ACTION_EXTERNAL_APPLICATIONS_AVAILABLE.get(
          _class, const jni.JStringType());

  static final _id_ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE =
      _class.staticFieldId(
    r"ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE =>
      _id_ACTION_EXTERNAL_APPLICATIONS_UNAVAILABLE.get(
          _class, const jni.JStringType());

  static final _id_ACTION_FACTORY_TEST = _class.staticFieldId(
    r"ACTION_FACTORY_TEST",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_FACTORY_TEST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_FACTORY_TEST =>
      _id_ACTION_FACTORY_TEST.get(_class, const jni.JStringType());

  static final _id_ACTION_GET_CONTENT = _class.staticFieldId(
    r"ACTION_GET_CONTENT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_GET_CONTENT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_GET_CONTENT =>
      _id_ACTION_GET_CONTENT.get(_class, const jni.JStringType());

  static final _id_ACTION_GET_RESTRICTION_ENTRIES = _class.staticFieldId(
    r"ACTION_GET_RESTRICTION_ENTRIES",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_GET_RESTRICTION_ENTRIES
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_GET_RESTRICTION_ENTRIES =>
      _id_ACTION_GET_RESTRICTION_ENTRIES.get(_class, const jni.JStringType());

  static final _id_ACTION_GTALK_SERVICE_CONNECTED = _class.staticFieldId(
    r"ACTION_GTALK_SERVICE_CONNECTED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_GTALK_SERVICE_CONNECTED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_GTALK_SERVICE_CONNECTED =>
      _id_ACTION_GTALK_SERVICE_CONNECTED.get(_class, const jni.JStringType());

  static final _id_ACTION_GTALK_SERVICE_DISCONNECTED = _class.staticFieldId(
    r"ACTION_GTALK_SERVICE_DISCONNECTED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_GTALK_SERVICE_DISCONNECTED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_GTALK_SERVICE_DISCONNECTED =>
      _id_ACTION_GTALK_SERVICE_DISCONNECTED.get(
          _class, const jni.JStringType());

  static final _id_ACTION_HEADSET_PLUG = _class.staticFieldId(
    r"ACTION_HEADSET_PLUG",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_HEADSET_PLUG
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_HEADSET_PLUG =>
      _id_ACTION_HEADSET_PLUG.get(_class, const jni.JStringType());

  static final _id_ACTION_INPUT_METHOD_CHANGED = _class.staticFieldId(
    r"ACTION_INPUT_METHOD_CHANGED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_INPUT_METHOD_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_INPUT_METHOD_CHANGED =>
      _id_ACTION_INPUT_METHOD_CHANGED.get(_class, const jni.JStringType());

  static final _id_ACTION_INSERT = _class.staticFieldId(
    r"ACTION_INSERT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_INSERT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_INSERT =>
      _id_ACTION_INSERT.get(_class, const jni.JStringType());

  static final _id_ACTION_INSERT_OR_EDIT = _class.staticFieldId(
    r"ACTION_INSERT_OR_EDIT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_INSERT_OR_EDIT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_INSERT_OR_EDIT =>
      _id_ACTION_INSERT_OR_EDIT.get(_class, const jni.JStringType());

  static final _id_ACTION_INSTALL_FAILURE = _class.staticFieldId(
    r"ACTION_INSTALL_FAILURE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_INSTALL_FAILURE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_INSTALL_FAILURE =>
      _id_ACTION_INSTALL_FAILURE.get(_class, const jni.JStringType());

  static final _id_ACTION_INSTALL_PACKAGE = _class.staticFieldId(
    r"ACTION_INSTALL_PACKAGE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_INSTALL_PACKAGE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_INSTALL_PACKAGE =>
      _id_ACTION_INSTALL_PACKAGE.get(_class, const jni.JStringType());

  static final _id_ACTION_LOCALE_CHANGED = _class.staticFieldId(
    r"ACTION_LOCALE_CHANGED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_LOCALE_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_LOCALE_CHANGED =>
      _id_ACTION_LOCALE_CHANGED.get(_class, const jni.JStringType());

  static final _id_ACTION_LOCKED_BOOT_COMPLETED = _class.staticFieldId(
    r"ACTION_LOCKED_BOOT_COMPLETED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_LOCKED_BOOT_COMPLETED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_LOCKED_BOOT_COMPLETED =>
      _id_ACTION_LOCKED_BOOT_COMPLETED.get(_class, const jni.JStringType());

  static final _id_ACTION_MAIN = _class.staticFieldId(
    r"ACTION_MAIN",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_MAIN
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MAIN =>
      _id_ACTION_MAIN.get(_class, const jni.JStringType());

  static final _id_ACTION_MANAGED_PROFILE_ADDED = _class.staticFieldId(
    r"ACTION_MANAGED_PROFILE_ADDED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_MANAGED_PROFILE_ADDED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MANAGED_PROFILE_ADDED =>
      _id_ACTION_MANAGED_PROFILE_ADDED.get(_class, const jni.JStringType());

  static final _id_ACTION_MANAGED_PROFILE_AVAILABLE = _class.staticFieldId(
    r"ACTION_MANAGED_PROFILE_AVAILABLE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_MANAGED_PROFILE_AVAILABLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MANAGED_PROFILE_AVAILABLE =>
      _id_ACTION_MANAGED_PROFILE_AVAILABLE.get(_class, const jni.JStringType());

  static final _id_ACTION_MANAGED_PROFILE_REMOVED = _class.staticFieldId(
    r"ACTION_MANAGED_PROFILE_REMOVED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_MANAGED_PROFILE_REMOVED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MANAGED_PROFILE_REMOVED =>
      _id_ACTION_MANAGED_PROFILE_REMOVED.get(_class, const jni.JStringType());

  static final _id_ACTION_MANAGED_PROFILE_UNAVAILABLE = _class.staticFieldId(
    r"ACTION_MANAGED_PROFILE_UNAVAILABLE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_MANAGED_PROFILE_UNAVAILABLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MANAGED_PROFILE_UNAVAILABLE =>
      _id_ACTION_MANAGED_PROFILE_UNAVAILABLE.get(
          _class, const jni.JStringType());

  static final _id_ACTION_MANAGED_PROFILE_UNLOCKED = _class.staticFieldId(
    r"ACTION_MANAGED_PROFILE_UNLOCKED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_MANAGED_PROFILE_UNLOCKED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MANAGED_PROFILE_UNLOCKED =>
      _id_ACTION_MANAGED_PROFILE_UNLOCKED.get(_class, const jni.JStringType());

  static final _id_ACTION_MANAGE_NETWORK_USAGE = _class.staticFieldId(
    r"ACTION_MANAGE_NETWORK_USAGE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_MANAGE_NETWORK_USAGE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MANAGE_NETWORK_USAGE =>
      _id_ACTION_MANAGE_NETWORK_USAGE.get(_class, const jni.JStringType());

  static final _id_ACTION_MANAGE_PACKAGE_STORAGE = _class.staticFieldId(
    r"ACTION_MANAGE_PACKAGE_STORAGE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_MANAGE_PACKAGE_STORAGE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MANAGE_PACKAGE_STORAGE =>
      _id_ACTION_MANAGE_PACKAGE_STORAGE.get(_class, const jni.JStringType());

  static final _id_ACTION_MANAGE_UNUSED_APPS = _class.staticFieldId(
    r"ACTION_MANAGE_UNUSED_APPS",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_MANAGE_UNUSED_APPS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MANAGE_UNUSED_APPS =>
      _id_ACTION_MANAGE_UNUSED_APPS.get(_class, const jni.JStringType());

  static final _id_ACTION_MEDIA_BAD_REMOVAL = _class.staticFieldId(
    r"ACTION_MEDIA_BAD_REMOVAL",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_MEDIA_BAD_REMOVAL
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MEDIA_BAD_REMOVAL =>
      _id_ACTION_MEDIA_BAD_REMOVAL.get(_class, const jni.JStringType());

  static final _id_ACTION_MEDIA_BUTTON = _class.staticFieldId(
    r"ACTION_MEDIA_BUTTON",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_MEDIA_BUTTON
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MEDIA_BUTTON =>
      _id_ACTION_MEDIA_BUTTON.get(_class, const jni.JStringType());

  static final _id_ACTION_MEDIA_CHECKING = _class.staticFieldId(
    r"ACTION_MEDIA_CHECKING",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_MEDIA_CHECKING
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MEDIA_CHECKING =>
      _id_ACTION_MEDIA_CHECKING.get(_class, const jni.JStringType());

  static final _id_ACTION_MEDIA_EJECT = _class.staticFieldId(
    r"ACTION_MEDIA_EJECT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_MEDIA_EJECT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MEDIA_EJECT =>
      _id_ACTION_MEDIA_EJECT.get(_class, const jni.JStringType());

  static final _id_ACTION_MEDIA_MOUNTED = _class.staticFieldId(
    r"ACTION_MEDIA_MOUNTED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_MEDIA_MOUNTED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MEDIA_MOUNTED =>
      _id_ACTION_MEDIA_MOUNTED.get(_class, const jni.JStringType());

  static final _id_ACTION_MEDIA_NOFS = _class.staticFieldId(
    r"ACTION_MEDIA_NOFS",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_MEDIA_NOFS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MEDIA_NOFS =>
      _id_ACTION_MEDIA_NOFS.get(_class, const jni.JStringType());

  static final _id_ACTION_MEDIA_REMOVED = _class.staticFieldId(
    r"ACTION_MEDIA_REMOVED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_MEDIA_REMOVED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MEDIA_REMOVED =>
      _id_ACTION_MEDIA_REMOVED.get(_class, const jni.JStringType());

  static final _id_ACTION_MEDIA_SCANNER_FINISHED = _class.staticFieldId(
    r"ACTION_MEDIA_SCANNER_FINISHED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_MEDIA_SCANNER_FINISHED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MEDIA_SCANNER_FINISHED =>
      _id_ACTION_MEDIA_SCANNER_FINISHED.get(_class, const jni.JStringType());

  static final _id_ACTION_MEDIA_SCANNER_SCAN_FILE = _class.staticFieldId(
    r"ACTION_MEDIA_SCANNER_SCAN_FILE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_MEDIA_SCANNER_SCAN_FILE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MEDIA_SCANNER_SCAN_FILE =>
      _id_ACTION_MEDIA_SCANNER_SCAN_FILE.get(_class, const jni.JStringType());

  static final _id_ACTION_MEDIA_SCANNER_STARTED = _class.staticFieldId(
    r"ACTION_MEDIA_SCANNER_STARTED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_MEDIA_SCANNER_STARTED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MEDIA_SCANNER_STARTED =>
      _id_ACTION_MEDIA_SCANNER_STARTED.get(_class, const jni.JStringType());

  static final _id_ACTION_MEDIA_SHARED = _class.staticFieldId(
    r"ACTION_MEDIA_SHARED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_MEDIA_SHARED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MEDIA_SHARED =>
      _id_ACTION_MEDIA_SHARED.get(_class, const jni.JStringType());

  static final _id_ACTION_MEDIA_UNMOUNTABLE = _class.staticFieldId(
    r"ACTION_MEDIA_UNMOUNTABLE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_MEDIA_UNMOUNTABLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MEDIA_UNMOUNTABLE =>
      _id_ACTION_MEDIA_UNMOUNTABLE.get(_class, const jni.JStringType());

  static final _id_ACTION_MEDIA_UNMOUNTED = _class.staticFieldId(
    r"ACTION_MEDIA_UNMOUNTED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_MEDIA_UNMOUNTED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MEDIA_UNMOUNTED =>
      _id_ACTION_MEDIA_UNMOUNTED.get(_class, const jni.JStringType());

  static final _id_ACTION_MY_PACKAGE_REPLACED = _class.staticFieldId(
    r"ACTION_MY_PACKAGE_REPLACED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_MY_PACKAGE_REPLACED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MY_PACKAGE_REPLACED =>
      _id_ACTION_MY_PACKAGE_REPLACED.get(_class, const jni.JStringType());

  static final _id_ACTION_MY_PACKAGE_SUSPENDED = _class.staticFieldId(
    r"ACTION_MY_PACKAGE_SUSPENDED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_MY_PACKAGE_SUSPENDED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MY_PACKAGE_SUSPENDED =>
      _id_ACTION_MY_PACKAGE_SUSPENDED.get(_class, const jni.JStringType());

  static final _id_ACTION_MY_PACKAGE_UNSUSPENDED = _class.staticFieldId(
    r"ACTION_MY_PACKAGE_UNSUSPENDED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_MY_PACKAGE_UNSUSPENDED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_MY_PACKAGE_UNSUSPENDED =>
      _id_ACTION_MY_PACKAGE_UNSUSPENDED.get(_class, const jni.JStringType());

  static final _id_ACTION_NEW_OUTGOING_CALL = _class.staticFieldId(
    r"ACTION_NEW_OUTGOING_CALL",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_NEW_OUTGOING_CALL
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_NEW_OUTGOING_CALL =>
      _id_ACTION_NEW_OUTGOING_CALL.get(_class, const jni.JStringType());

  static final _id_ACTION_OPEN_DOCUMENT = _class.staticFieldId(
    r"ACTION_OPEN_DOCUMENT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_OPEN_DOCUMENT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_OPEN_DOCUMENT =>
      _id_ACTION_OPEN_DOCUMENT.get(_class, const jni.JStringType());

  static final _id_ACTION_OPEN_DOCUMENT_TREE = _class.staticFieldId(
    r"ACTION_OPEN_DOCUMENT_TREE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_OPEN_DOCUMENT_TREE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_OPEN_DOCUMENT_TREE =>
      _id_ACTION_OPEN_DOCUMENT_TREE.get(_class, const jni.JStringType());

  static final _id_ACTION_PACKAGES_SUSPENDED = _class.staticFieldId(
    r"ACTION_PACKAGES_SUSPENDED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_PACKAGES_SUSPENDED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PACKAGES_SUSPENDED =>
      _id_ACTION_PACKAGES_SUSPENDED.get(_class, const jni.JStringType());

  static final _id_ACTION_PACKAGES_UNSUSPENDED = _class.staticFieldId(
    r"ACTION_PACKAGES_UNSUSPENDED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_PACKAGES_UNSUSPENDED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PACKAGES_UNSUSPENDED =>
      _id_ACTION_PACKAGES_UNSUSPENDED.get(_class, const jni.JStringType());

  static final _id_ACTION_PACKAGE_ADDED = _class.staticFieldId(
    r"ACTION_PACKAGE_ADDED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_PACKAGE_ADDED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PACKAGE_ADDED =>
      _id_ACTION_PACKAGE_ADDED.get(_class, const jni.JStringType());

  static final _id_ACTION_PACKAGE_CHANGED = _class.staticFieldId(
    r"ACTION_PACKAGE_CHANGED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_PACKAGE_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PACKAGE_CHANGED =>
      _id_ACTION_PACKAGE_CHANGED.get(_class, const jni.JStringType());

  static final _id_ACTION_PACKAGE_DATA_CLEARED = _class.staticFieldId(
    r"ACTION_PACKAGE_DATA_CLEARED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_PACKAGE_DATA_CLEARED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PACKAGE_DATA_CLEARED =>
      _id_ACTION_PACKAGE_DATA_CLEARED.get(_class, const jni.JStringType());

  static final _id_ACTION_PACKAGE_FIRST_LAUNCH = _class.staticFieldId(
    r"ACTION_PACKAGE_FIRST_LAUNCH",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_PACKAGE_FIRST_LAUNCH
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PACKAGE_FIRST_LAUNCH =>
      _id_ACTION_PACKAGE_FIRST_LAUNCH.get(_class, const jni.JStringType());

  static final _id_ACTION_PACKAGE_FULLY_REMOVED = _class.staticFieldId(
    r"ACTION_PACKAGE_FULLY_REMOVED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_PACKAGE_FULLY_REMOVED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PACKAGE_FULLY_REMOVED =>
      _id_ACTION_PACKAGE_FULLY_REMOVED.get(_class, const jni.JStringType());

  static final _id_ACTION_PACKAGE_INSTALL = _class.staticFieldId(
    r"ACTION_PACKAGE_INSTALL",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_PACKAGE_INSTALL
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PACKAGE_INSTALL =>
      _id_ACTION_PACKAGE_INSTALL.get(_class, const jni.JStringType());

  static final _id_ACTION_PACKAGE_NEEDS_VERIFICATION = _class.staticFieldId(
    r"ACTION_PACKAGE_NEEDS_VERIFICATION",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_PACKAGE_NEEDS_VERIFICATION
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PACKAGE_NEEDS_VERIFICATION =>
      _id_ACTION_PACKAGE_NEEDS_VERIFICATION.get(
          _class, const jni.JStringType());

  static final _id_ACTION_PACKAGE_REMOVED = _class.staticFieldId(
    r"ACTION_PACKAGE_REMOVED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_PACKAGE_REMOVED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PACKAGE_REMOVED =>
      _id_ACTION_PACKAGE_REMOVED.get(_class, const jni.JStringType());

  static final _id_ACTION_PACKAGE_REPLACED = _class.staticFieldId(
    r"ACTION_PACKAGE_REPLACED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_PACKAGE_REPLACED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PACKAGE_REPLACED =>
      _id_ACTION_PACKAGE_REPLACED.get(_class, const jni.JStringType());

  static final _id_ACTION_PACKAGE_RESTARTED = _class.staticFieldId(
    r"ACTION_PACKAGE_RESTARTED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_PACKAGE_RESTARTED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PACKAGE_RESTARTED =>
      _id_ACTION_PACKAGE_RESTARTED.get(_class, const jni.JStringType());

  static final _id_ACTION_PACKAGE_VERIFIED = _class.staticFieldId(
    r"ACTION_PACKAGE_VERIFIED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_PACKAGE_VERIFIED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PACKAGE_VERIFIED =>
      _id_ACTION_PACKAGE_VERIFIED.get(_class, const jni.JStringType());

  static final _id_ACTION_PASTE = _class.staticFieldId(
    r"ACTION_PASTE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_PASTE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PASTE =>
      _id_ACTION_PASTE.get(_class, const jni.JStringType());

  static final _id_ACTION_PICK = _class.staticFieldId(
    r"ACTION_PICK",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_PICK
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PICK =>
      _id_ACTION_PICK.get(_class, const jni.JStringType());

  static final _id_ACTION_PICK_ACTIVITY = _class.staticFieldId(
    r"ACTION_PICK_ACTIVITY",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_PICK_ACTIVITY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PICK_ACTIVITY =>
      _id_ACTION_PICK_ACTIVITY.get(_class, const jni.JStringType());

  static final _id_ACTION_POWER_CONNECTED = _class.staticFieldId(
    r"ACTION_POWER_CONNECTED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_POWER_CONNECTED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_POWER_CONNECTED =>
      _id_ACTION_POWER_CONNECTED.get(_class, const jni.JStringType());

  static final _id_ACTION_POWER_DISCONNECTED = _class.staticFieldId(
    r"ACTION_POWER_DISCONNECTED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_POWER_DISCONNECTED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_POWER_DISCONNECTED =>
      _id_ACTION_POWER_DISCONNECTED.get(_class, const jni.JStringType());

  static final _id_ACTION_POWER_USAGE_SUMMARY = _class.staticFieldId(
    r"ACTION_POWER_USAGE_SUMMARY",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_POWER_USAGE_SUMMARY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_POWER_USAGE_SUMMARY =>
      _id_ACTION_POWER_USAGE_SUMMARY.get(_class, const jni.JStringType());

  static final _id_ACTION_PROCESS_TEXT = _class.staticFieldId(
    r"ACTION_PROCESS_TEXT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_PROCESS_TEXT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PROCESS_TEXT =>
      _id_ACTION_PROCESS_TEXT.get(_class, const jni.JStringType());

  static final _id_ACTION_PROFILE_ACCESSIBLE = _class.staticFieldId(
    r"ACTION_PROFILE_ACCESSIBLE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_PROFILE_ACCESSIBLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PROFILE_ACCESSIBLE =>
      _id_ACTION_PROFILE_ACCESSIBLE.get(_class, const jni.JStringType());

  static final _id_ACTION_PROFILE_INACCESSIBLE = _class.staticFieldId(
    r"ACTION_PROFILE_INACCESSIBLE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_PROFILE_INACCESSIBLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PROFILE_INACCESSIBLE =>
      _id_ACTION_PROFILE_INACCESSIBLE.get(_class, const jni.JStringType());

  static final _id_ACTION_PROVIDER_CHANGED = _class.staticFieldId(
    r"ACTION_PROVIDER_CHANGED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_PROVIDER_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_PROVIDER_CHANGED =>
      _id_ACTION_PROVIDER_CHANGED.get(_class, const jni.JStringType());

  static final _id_ACTION_QUICK_CLOCK = _class.staticFieldId(
    r"ACTION_QUICK_CLOCK",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_QUICK_CLOCK
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_QUICK_CLOCK =>
      _id_ACTION_QUICK_CLOCK.get(_class, const jni.JStringType());

  static final _id_ACTION_QUICK_VIEW = _class.staticFieldId(
    r"ACTION_QUICK_VIEW",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_QUICK_VIEW
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_QUICK_VIEW =>
      _id_ACTION_QUICK_VIEW.get(_class, const jni.JStringType());

  static final _id_ACTION_REBOOT = _class.staticFieldId(
    r"ACTION_REBOOT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_REBOOT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_REBOOT =>
      _id_ACTION_REBOOT.get(_class, const jni.JStringType());

  static final _id_ACTION_RUN = _class.staticFieldId(
    r"ACTION_RUN",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_RUN
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_RUN =>
      _id_ACTION_RUN.get(_class, const jni.JStringType());

  static final _id_ACTION_SAFETY_CENTER = _class.staticFieldId(
    r"ACTION_SAFETY_CENTER",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_SAFETY_CENTER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SAFETY_CENTER =>
      _id_ACTION_SAFETY_CENTER.get(_class, const jni.JStringType());

  static final _id_ACTION_SCREEN_OFF = _class.staticFieldId(
    r"ACTION_SCREEN_OFF",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_SCREEN_OFF
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SCREEN_OFF =>
      _id_ACTION_SCREEN_OFF.get(_class, const jni.JStringType());

  static final _id_ACTION_SCREEN_ON = _class.staticFieldId(
    r"ACTION_SCREEN_ON",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_SCREEN_ON
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SCREEN_ON =>
      _id_ACTION_SCREEN_ON.get(_class, const jni.JStringType());

  static final _id_ACTION_SEARCH = _class.staticFieldId(
    r"ACTION_SEARCH",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_SEARCH
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SEARCH =>
      _id_ACTION_SEARCH.get(_class, const jni.JStringType());

  static final _id_ACTION_SEARCH_LONG_PRESS = _class.staticFieldId(
    r"ACTION_SEARCH_LONG_PRESS",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_SEARCH_LONG_PRESS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SEARCH_LONG_PRESS =>
      _id_ACTION_SEARCH_LONG_PRESS.get(_class, const jni.JStringType());

  static final _id_ACTION_SEND = _class.staticFieldId(
    r"ACTION_SEND",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_SEND
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SEND =>
      _id_ACTION_SEND.get(_class, const jni.JStringType());

  static final _id_ACTION_SENDTO = _class.staticFieldId(
    r"ACTION_SENDTO",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_SENDTO
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SENDTO =>
      _id_ACTION_SENDTO.get(_class, const jni.JStringType());

  static final _id_ACTION_SEND_MULTIPLE = _class.staticFieldId(
    r"ACTION_SEND_MULTIPLE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_SEND_MULTIPLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SEND_MULTIPLE =>
      _id_ACTION_SEND_MULTIPLE.get(_class, const jni.JStringType());

  static final _id_ACTION_SET_WALLPAPER = _class.staticFieldId(
    r"ACTION_SET_WALLPAPER",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_SET_WALLPAPER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SET_WALLPAPER =>
      _id_ACTION_SET_WALLPAPER.get(_class, const jni.JStringType());

  static final _id_ACTION_SHOW_APP_INFO = _class.staticFieldId(
    r"ACTION_SHOW_APP_INFO",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_SHOW_APP_INFO
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SHOW_APP_INFO =>
      _id_ACTION_SHOW_APP_INFO.get(_class, const jni.JStringType());

  static final _id_ACTION_SHOW_WORK_APPS = _class.staticFieldId(
    r"ACTION_SHOW_WORK_APPS",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_SHOW_WORK_APPS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SHOW_WORK_APPS =>
      _id_ACTION_SHOW_WORK_APPS.get(_class, const jni.JStringType());

  static final _id_ACTION_SHUTDOWN = _class.staticFieldId(
    r"ACTION_SHUTDOWN",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_SHUTDOWN
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SHUTDOWN =>
      _id_ACTION_SHUTDOWN.get(_class, const jni.JStringType());

  static final _id_ACTION_SYNC = _class.staticFieldId(
    r"ACTION_SYNC",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_SYNC
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SYNC =>
      _id_ACTION_SYNC.get(_class, const jni.JStringType());

  static final _id_ACTION_SYSTEM_TUTORIAL = _class.staticFieldId(
    r"ACTION_SYSTEM_TUTORIAL",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_SYSTEM_TUTORIAL
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_SYSTEM_TUTORIAL =>
      _id_ACTION_SYSTEM_TUTORIAL.get(_class, const jni.JStringType());

  static final _id_ACTION_TIMEZONE_CHANGED = _class.staticFieldId(
    r"ACTION_TIMEZONE_CHANGED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_TIMEZONE_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_TIMEZONE_CHANGED =>
      _id_ACTION_TIMEZONE_CHANGED.get(_class, const jni.JStringType());

  static final _id_ACTION_TIME_CHANGED = _class.staticFieldId(
    r"ACTION_TIME_CHANGED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_TIME_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_TIME_CHANGED =>
      _id_ACTION_TIME_CHANGED.get(_class, const jni.JStringType());

  static final _id_ACTION_TIME_TICK = _class.staticFieldId(
    r"ACTION_TIME_TICK",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_TIME_TICK
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_TIME_TICK =>
      _id_ACTION_TIME_TICK.get(_class, const jni.JStringType());

  static final _id_ACTION_TRANSLATE = _class.staticFieldId(
    r"ACTION_TRANSLATE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_TRANSLATE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_TRANSLATE =>
      _id_ACTION_TRANSLATE.get(_class, const jni.JStringType());

  static final _id_ACTION_UID_REMOVED = _class.staticFieldId(
    r"ACTION_UID_REMOVED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_UID_REMOVED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_UID_REMOVED =>
      _id_ACTION_UID_REMOVED.get(_class, const jni.JStringType());

  static final _id_ACTION_UMS_CONNECTED = _class.staticFieldId(
    r"ACTION_UMS_CONNECTED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_UMS_CONNECTED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_UMS_CONNECTED =>
      _id_ACTION_UMS_CONNECTED.get(_class, const jni.JStringType());

  static final _id_ACTION_UMS_DISCONNECTED = _class.staticFieldId(
    r"ACTION_UMS_DISCONNECTED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_UMS_DISCONNECTED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_UMS_DISCONNECTED =>
      _id_ACTION_UMS_DISCONNECTED.get(_class, const jni.JStringType());

  static final _id_ACTION_UNINSTALL_PACKAGE = _class.staticFieldId(
    r"ACTION_UNINSTALL_PACKAGE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_UNINSTALL_PACKAGE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_UNINSTALL_PACKAGE =>
      _id_ACTION_UNINSTALL_PACKAGE.get(_class, const jni.JStringType());

  static final _id_ACTION_USER_BACKGROUND = _class.staticFieldId(
    r"ACTION_USER_BACKGROUND",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_USER_BACKGROUND
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_USER_BACKGROUND =>
      _id_ACTION_USER_BACKGROUND.get(_class, const jni.JStringType());

  static final _id_ACTION_USER_FOREGROUND = _class.staticFieldId(
    r"ACTION_USER_FOREGROUND",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_USER_FOREGROUND
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_USER_FOREGROUND =>
      _id_ACTION_USER_FOREGROUND.get(_class, const jni.JStringType());

  static final _id_ACTION_USER_INITIALIZE = _class.staticFieldId(
    r"ACTION_USER_INITIALIZE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_USER_INITIALIZE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_USER_INITIALIZE =>
      _id_ACTION_USER_INITIALIZE.get(_class, const jni.JStringType());

  static final _id_ACTION_USER_PRESENT = _class.staticFieldId(
    r"ACTION_USER_PRESENT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_USER_PRESENT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_USER_PRESENT =>
      _id_ACTION_USER_PRESENT.get(_class, const jni.JStringType());

  static final _id_ACTION_USER_UNLOCKED = _class.staticFieldId(
    r"ACTION_USER_UNLOCKED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_USER_UNLOCKED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_USER_UNLOCKED =>
      _id_ACTION_USER_UNLOCKED.get(_class, const jni.JStringType());

  static final _id_ACTION_VIEW = _class.staticFieldId(
    r"ACTION_VIEW",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_VIEW
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_VIEW =>
      _id_ACTION_VIEW.get(_class, const jni.JStringType());

  static final _id_ACTION_VIEW_LOCUS = _class.staticFieldId(
    r"ACTION_VIEW_LOCUS",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_VIEW_LOCUS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_VIEW_LOCUS =>
      _id_ACTION_VIEW_LOCUS.get(_class, const jni.JStringType());

  static final _id_ACTION_VIEW_PERMISSION_USAGE = _class.staticFieldId(
    r"ACTION_VIEW_PERMISSION_USAGE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_VIEW_PERMISSION_USAGE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_VIEW_PERMISSION_USAGE =>
      _id_ACTION_VIEW_PERMISSION_USAGE.get(_class, const jni.JStringType());

  static final _id_ACTION_VIEW_PERMISSION_USAGE_FOR_PERIOD =
      _class.staticFieldId(
    r"ACTION_VIEW_PERMISSION_USAGE_FOR_PERIOD",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_VIEW_PERMISSION_USAGE_FOR_PERIOD
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_VIEW_PERMISSION_USAGE_FOR_PERIOD =>
      _id_ACTION_VIEW_PERMISSION_USAGE_FOR_PERIOD.get(
          _class, const jni.JStringType());

  static final _id_ACTION_VOICE_COMMAND = _class.staticFieldId(
    r"ACTION_VOICE_COMMAND",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_VOICE_COMMAND
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_VOICE_COMMAND =>
      _id_ACTION_VOICE_COMMAND.get(_class, const jni.JStringType());

  static final _id_ACTION_WALLPAPER_CHANGED = _class.staticFieldId(
    r"ACTION_WALLPAPER_CHANGED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_WALLPAPER_CHANGED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_WALLPAPER_CHANGED =>
      _id_ACTION_WALLPAPER_CHANGED.get(_class, const jni.JStringType());

  static final _id_ACTION_WEB_SEARCH = _class.staticFieldId(
    r"ACTION_WEB_SEARCH",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String ACTION_WEB_SEARCH
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get ACTION_WEB_SEARCH =>
      _id_ACTION_WEB_SEARCH.get(_class, const jni.JStringType());

  static final _id_CATEGORY_ACCESSIBILITY_SHORTCUT_TARGET =
      _class.staticFieldId(
    r"CATEGORY_ACCESSIBILITY_SHORTCUT_TARGET",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY_ACCESSIBILITY_SHORTCUT_TARGET
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_ACCESSIBILITY_SHORTCUT_TARGET =>
      _id_CATEGORY_ACCESSIBILITY_SHORTCUT_TARGET.get(
          _class, const jni.JStringType());

  static final _id_CATEGORY_ALTERNATIVE = _class.staticFieldId(
    r"CATEGORY_ALTERNATIVE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY_ALTERNATIVE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_ALTERNATIVE =>
      _id_CATEGORY_ALTERNATIVE.get(_class, const jni.JStringType());

  static final _id_CATEGORY_APP_BROWSER = _class.staticFieldId(
    r"CATEGORY_APP_BROWSER",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY_APP_BROWSER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_APP_BROWSER =>
      _id_CATEGORY_APP_BROWSER.get(_class, const jni.JStringType());

  static final _id_CATEGORY_APP_CALCULATOR = _class.staticFieldId(
    r"CATEGORY_APP_CALCULATOR",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY_APP_CALCULATOR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_APP_CALCULATOR =>
      _id_CATEGORY_APP_CALCULATOR.get(_class, const jni.JStringType());

  static final _id_CATEGORY_APP_CALENDAR = _class.staticFieldId(
    r"CATEGORY_APP_CALENDAR",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY_APP_CALENDAR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_APP_CALENDAR =>
      _id_CATEGORY_APP_CALENDAR.get(_class, const jni.JStringType());

  static final _id_CATEGORY_APP_CONTACTS = _class.staticFieldId(
    r"CATEGORY_APP_CONTACTS",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY_APP_CONTACTS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_APP_CONTACTS =>
      _id_CATEGORY_APP_CONTACTS.get(_class, const jni.JStringType());

  static final _id_CATEGORY_APP_EMAIL = _class.staticFieldId(
    r"CATEGORY_APP_EMAIL",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY_APP_EMAIL
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_APP_EMAIL =>
      _id_CATEGORY_APP_EMAIL.get(_class, const jni.JStringType());

  static final _id_CATEGORY_APP_FILES = _class.staticFieldId(
    r"CATEGORY_APP_FILES",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY_APP_FILES
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_APP_FILES =>
      _id_CATEGORY_APP_FILES.get(_class, const jni.JStringType());

  static final _id_CATEGORY_APP_FITNESS = _class.staticFieldId(
    r"CATEGORY_APP_FITNESS",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY_APP_FITNESS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_APP_FITNESS =>
      _id_CATEGORY_APP_FITNESS.get(_class, const jni.JStringType());

  static final _id_CATEGORY_APP_GALLERY = _class.staticFieldId(
    r"CATEGORY_APP_GALLERY",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY_APP_GALLERY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_APP_GALLERY =>
      _id_CATEGORY_APP_GALLERY.get(_class, const jni.JStringType());

  static final _id_CATEGORY_APP_MAPS = _class.staticFieldId(
    r"CATEGORY_APP_MAPS",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY_APP_MAPS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_APP_MAPS =>
      _id_CATEGORY_APP_MAPS.get(_class, const jni.JStringType());

  static final _id_CATEGORY_APP_MARKET = _class.staticFieldId(
    r"CATEGORY_APP_MARKET",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY_APP_MARKET
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_APP_MARKET =>
      _id_CATEGORY_APP_MARKET.get(_class, const jni.JStringType());

  static final _id_CATEGORY_APP_MESSAGING = _class.staticFieldId(
    r"CATEGORY_APP_MESSAGING",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY_APP_MESSAGING
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_APP_MESSAGING =>
      _id_CATEGORY_APP_MESSAGING.get(_class, const jni.JStringType());

  static final _id_CATEGORY_APP_MUSIC = _class.staticFieldId(
    r"CATEGORY_APP_MUSIC",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY_APP_MUSIC
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_APP_MUSIC =>
      _id_CATEGORY_APP_MUSIC.get(_class, const jni.JStringType());

  static final _id_CATEGORY_APP_WEATHER = _class.staticFieldId(
    r"CATEGORY_APP_WEATHER",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY_APP_WEATHER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_APP_WEATHER =>
      _id_CATEGORY_APP_WEATHER.get(_class, const jni.JStringType());

  static final _id_CATEGORY_BROWSABLE = _class.staticFieldId(
    r"CATEGORY_BROWSABLE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY_BROWSABLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_BROWSABLE =>
      _id_CATEGORY_BROWSABLE.get(_class, const jni.JStringType());

  static final _id_CATEGORY_CAR_DOCK = _class.staticFieldId(
    r"CATEGORY_CAR_DOCK",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY_CAR_DOCK
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_CAR_DOCK =>
      _id_CATEGORY_CAR_DOCK.get(_class, const jni.JStringType());

  static final _id_CATEGORY_CAR_MODE = _class.staticFieldId(
    r"CATEGORY_CAR_MODE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY_CAR_MODE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_CAR_MODE =>
      _id_CATEGORY_CAR_MODE.get(_class, const jni.JStringType());

  static final _id_CATEGORY_DEFAULT = _class.staticFieldId(
    r"CATEGORY_DEFAULT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY_DEFAULT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_DEFAULT =>
      _id_CATEGORY_DEFAULT.get(_class, const jni.JStringType());

  static final _id_CATEGORY_DESK_DOCK = _class.staticFieldId(
    r"CATEGORY_DESK_DOCK",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY_DESK_DOCK
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_DESK_DOCK =>
      _id_CATEGORY_DESK_DOCK.get(_class, const jni.JStringType());

  static final _id_CATEGORY_DEVELOPMENT_PREFERENCE = _class.staticFieldId(
    r"CATEGORY_DEVELOPMENT_PREFERENCE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY_DEVELOPMENT_PREFERENCE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_DEVELOPMENT_PREFERENCE =>
      _id_CATEGORY_DEVELOPMENT_PREFERENCE.get(_class, const jni.JStringType());

  static final _id_CATEGORY_EMBED = _class.staticFieldId(
    r"CATEGORY_EMBED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY_EMBED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_EMBED =>
      _id_CATEGORY_EMBED.get(_class, const jni.JStringType());

  static final _id_CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST =
      _class.staticFieldId(
    r"CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST =>
      _id_CATEGORY_FRAMEWORK_INSTRUMENTATION_TEST.get(
          _class, const jni.JStringType());

  static final _id_CATEGORY_HE_DESK_DOCK = _class.staticFieldId(
    r"CATEGORY_HE_DESK_DOCK",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY_HE_DESK_DOCK
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_HE_DESK_DOCK =>
      _id_CATEGORY_HE_DESK_DOCK.get(_class, const jni.JStringType());

  static final _id_CATEGORY_HOME = _class.staticFieldId(
    r"CATEGORY_HOME",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY_HOME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_HOME =>
      _id_CATEGORY_HOME.get(_class, const jni.JStringType());

  static final _id_CATEGORY_INFO = _class.staticFieldId(
    r"CATEGORY_INFO",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY_INFO
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_INFO =>
      _id_CATEGORY_INFO.get(_class, const jni.JStringType());

  static final _id_CATEGORY_LAUNCHER = _class.staticFieldId(
    r"CATEGORY_LAUNCHER",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY_LAUNCHER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_LAUNCHER =>
      _id_CATEGORY_LAUNCHER.get(_class, const jni.JStringType());

  static final _id_CATEGORY_LEANBACK_LAUNCHER = _class.staticFieldId(
    r"CATEGORY_LEANBACK_LAUNCHER",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY_LEANBACK_LAUNCHER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_LEANBACK_LAUNCHER =>
      _id_CATEGORY_LEANBACK_LAUNCHER.get(_class, const jni.JStringType());

  static final _id_CATEGORY_LE_DESK_DOCK = _class.staticFieldId(
    r"CATEGORY_LE_DESK_DOCK",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY_LE_DESK_DOCK
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_LE_DESK_DOCK =>
      _id_CATEGORY_LE_DESK_DOCK.get(_class, const jni.JStringType());

  static final _id_CATEGORY_MONKEY = _class.staticFieldId(
    r"CATEGORY_MONKEY",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY_MONKEY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_MONKEY =>
      _id_CATEGORY_MONKEY.get(_class, const jni.JStringType());

  static final _id_CATEGORY_OPENABLE = _class.staticFieldId(
    r"CATEGORY_OPENABLE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY_OPENABLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_OPENABLE =>
      _id_CATEGORY_OPENABLE.get(_class, const jni.JStringType());

  static final _id_CATEGORY_PREFERENCE = _class.staticFieldId(
    r"CATEGORY_PREFERENCE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY_PREFERENCE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_PREFERENCE =>
      _id_CATEGORY_PREFERENCE.get(_class, const jni.JStringType());

  static final _id_CATEGORY_SAMPLE_CODE = _class.staticFieldId(
    r"CATEGORY_SAMPLE_CODE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY_SAMPLE_CODE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_SAMPLE_CODE =>
      _id_CATEGORY_SAMPLE_CODE.get(_class, const jni.JStringType());

  static final _id_CATEGORY_SECONDARY_HOME = _class.staticFieldId(
    r"CATEGORY_SECONDARY_HOME",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY_SECONDARY_HOME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_SECONDARY_HOME =>
      _id_CATEGORY_SECONDARY_HOME.get(_class, const jni.JStringType());

  static final _id_CATEGORY_SELECTED_ALTERNATIVE = _class.staticFieldId(
    r"CATEGORY_SELECTED_ALTERNATIVE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY_SELECTED_ALTERNATIVE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_SELECTED_ALTERNATIVE =>
      _id_CATEGORY_SELECTED_ALTERNATIVE.get(_class, const jni.JStringType());

  static final _id_CATEGORY_TAB = _class.staticFieldId(
    r"CATEGORY_TAB",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY_TAB
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_TAB =>
      _id_CATEGORY_TAB.get(_class, const jni.JStringType());

  static final _id_CATEGORY_TEST = _class.staticFieldId(
    r"CATEGORY_TEST",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY_TEST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_TEST =>
      _id_CATEGORY_TEST.get(_class, const jni.JStringType());

  static final _id_CATEGORY_TYPED_OPENABLE = _class.staticFieldId(
    r"CATEGORY_TYPED_OPENABLE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY_TYPED_OPENABLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_TYPED_OPENABLE =>
      _id_CATEGORY_TYPED_OPENABLE.get(_class, const jni.JStringType());

  static final _id_CATEGORY_UNIT_TEST = _class.staticFieldId(
    r"CATEGORY_UNIT_TEST",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY_UNIT_TEST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_UNIT_TEST =>
      _id_CATEGORY_UNIT_TEST.get(_class, const jni.JStringType());

  static final _id_CATEGORY_VOICE = _class.staticFieldId(
    r"CATEGORY_VOICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY_VOICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_VOICE =>
      _id_CATEGORY_VOICE.get(_class, const jni.JStringType());

  static final _id_CATEGORY_VR_HOME = _class.staticFieldId(
    r"CATEGORY_VR_HOME",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String CATEGORY_VR_HOME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get CATEGORY_VR_HOME =>
      _id_CATEGORY_VR_HOME.get(_class, const jni.JStringType());

  static final _id_CREATOR = _class.staticFieldId(
    r"CREATOR",
    r"Landroid/os/Parcelable$Creator;",
  );

  /// from: static public final android.os.Parcelable$Creator CREATOR
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JObject get CREATOR =>
      _id_CREATOR.get(_class, const jni.JObjectType());

  static final _id_EXTRA_ALARM_COUNT = _class.staticFieldId(
    r"EXTRA_ALARM_COUNT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_ALARM_COUNT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_ALARM_COUNT =>
      _id_EXTRA_ALARM_COUNT.get(_class, const jni.JStringType());

  static final _id_EXTRA_ALLOW_MULTIPLE = _class.staticFieldId(
    r"EXTRA_ALLOW_MULTIPLE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_ALLOW_MULTIPLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_ALLOW_MULTIPLE =>
      _id_EXTRA_ALLOW_MULTIPLE.get(_class, const jni.JStringType());

  static final _id_EXTRA_ALLOW_REPLACE = _class.staticFieldId(
    r"EXTRA_ALLOW_REPLACE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_ALLOW_REPLACE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_ALLOW_REPLACE =>
      _id_EXTRA_ALLOW_REPLACE.get(_class, const jni.JStringType());

  static final _id_EXTRA_ALTERNATE_INTENTS = _class.staticFieldId(
    r"EXTRA_ALTERNATE_INTENTS",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_ALTERNATE_INTENTS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_ALTERNATE_INTENTS =>
      _id_EXTRA_ALTERNATE_INTENTS.get(_class, const jni.JStringType());

  static final _id_EXTRA_ASSIST_CONTEXT = _class.staticFieldId(
    r"EXTRA_ASSIST_CONTEXT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_ASSIST_CONTEXT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_ASSIST_CONTEXT =>
      _id_EXTRA_ASSIST_CONTEXT.get(_class, const jni.JStringType());

  static final _id_EXTRA_ASSIST_INPUT_DEVICE_ID = _class.staticFieldId(
    r"EXTRA_ASSIST_INPUT_DEVICE_ID",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_ASSIST_INPUT_DEVICE_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_ASSIST_INPUT_DEVICE_ID =>
      _id_EXTRA_ASSIST_INPUT_DEVICE_ID.get(_class, const jni.JStringType());

  static final _id_EXTRA_ASSIST_INPUT_HINT_KEYBOARD = _class.staticFieldId(
    r"EXTRA_ASSIST_INPUT_HINT_KEYBOARD",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_ASSIST_INPUT_HINT_KEYBOARD
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_ASSIST_INPUT_HINT_KEYBOARD =>
      _id_EXTRA_ASSIST_INPUT_HINT_KEYBOARD.get(_class, const jni.JStringType());

  static final _id_EXTRA_ASSIST_PACKAGE = _class.staticFieldId(
    r"EXTRA_ASSIST_PACKAGE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_ASSIST_PACKAGE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_ASSIST_PACKAGE =>
      _id_EXTRA_ASSIST_PACKAGE.get(_class, const jni.JStringType());

  static final _id_EXTRA_ASSIST_UID = _class.staticFieldId(
    r"EXTRA_ASSIST_UID",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_ASSIST_UID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_ASSIST_UID =>
      _id_EXTRA_ASSIST_UID.get(_class, const jni.JStringType());

  static final _id_EXTRA_ATTRIBUTION_TAGS = _class.staticFieldId(
    r"EXTRA_ATTRIBUTION_TAGS",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_ATTRIBUTION_TAGS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_ATTRIBUTION_TAGS =>
      _id_EXTRA_ATTRIBUTION_TAGS.get(_class, const jni.JStringType());

  static final _id_EXTRA_AUTO_LAUNCH_SINGLE_CHOICE = _class.staticFieldId(
    r"EXTRA_AUTO_LAUNCH_SINGLE_CHOICE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_AUTO_LAUNCH_SINGLE_CHOICE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_AUTO_LAUNCH_SINGLE_CHOICE =>
      _id_EXTRA_AUTO_LAUNCH_SINGLE_CHOICE.get(_class, const jni.JStringType());

  static final _id_EXTRA_BCC = _class.staticFieldId(
    r"EXTRA_BCC",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_BCC
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_BCC =>
      _id_EXTRA_BCC.get(_class, const jni.JStringType());

  static final _id_EXTRA_BUG_REPORT = _class.staticFieldId(
    r"EXTRA_BUG_REPORT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_BUG_REPORT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_BUG_REPORT =>
      _id_EXTRA_BUG_REPORT.get(_class, const jni.JStringType());

  static final _id_EXTRA_CC = _class.staticFieldId(
    r"EXTRA_CC",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_CC
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_CC =>
      _id_EXTRA_CC.get(_class, const jni.JStringType());

  static final _id_EXTRA_CHANGED_COMPONENT_NAME = _class.staticFieldId(
    r"EXTRA_CHANGED_COMPONENT_NAME",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_CHANGED_COMPONENT_NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_CHANGED_COMPONENT_NAME =>
      _id_EXTRA_CHANGED_COMPONENT_NAME.get(_class, const jni.JStringType());

  static final _id_EXTRA_CHANGED_COMPONENT_NAME_LIST = _class.staticFieldId(
    r"EXTRA_CHANGED_COMPONENT_NAME_LIST",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_CHANGED_COMPONENT_NAME_LIST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_CHANGED_COMPONENT_NAME_LIST =>
      _id_EXTRA_CHANGED_COMPONENT_NAME_LIST.get(
          _class, const jni.JStringType());

  static final _id_EXTRA_CHANGED_PACKAGE_LIST = _class.staticFieldId(
    r"EXTRA_CHANGED_PACKAGE_LIST",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_CHANGED_PACKAGE_LIST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_CHANGED_PACKAGE_LIST =>
      _id_EXTRA_CHANGED_PACKAGE_LIST.get(_class, const jni.JStringType());

  static final _id_EXTRA_CHANGED_UID_LIST = _class.staticFieldId(
    r"EXTRA_CHANGED_UID_LIST",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_CHANGED_UID_LIST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_CHANGED_UID_LIST =>
      _id_EXTRA_CHANGED_UID_LIST.get(_class, const jni.JStringType());

  static final _id_EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER =
      _class.staticFieldId(
    r"EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER =>
      _id_EXTRA_CHOOSER_REFINEMENT_INTENT_SENDER.get(
          _class, const jni.JStringType());

  static final _id_EXTRA_CHOOSER_TARGETS = _class.staticFieldId(
    r"EXTRA_CHOOSER_TARGETS",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_CHOOSER_TARGETS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_CHOOSER_TARGETS =>
      _id_EXTRA_CHOOSER_TARGETS.get(_class, const jni.JStringType());

  static final _id_EXTRA_CHOSEN_COMPONENT = _class.staticFieldId(
    r"EXTRA_CHOSEN_COMPONENT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_CHOSEN_COMPONENT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_CHOSEN_COMPONENT =>
      _id_EXTRA_CHOSEN_COMPONENT.get(_class, const jni.JStringType());

  static final _id_EXTRA_CHOSEN_COMPONENT_INTENT_SENDER = _class.staticFieldId(
    r"EXTRA_CHOSEN_COMPONENT_INTENT_SENDER",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_CHOSEN_COMPONENT_INTENT_SENDER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_CHOSEN_COMPONENT_INTENT_SENDER =>
      _id_EXTRA_CHOSEN_COMPONENT_INTENT_SENDER.get(
          _class, const jni.JStringType());

  static final _id_EXTRA_COMPONENT_NAME = _class.staticFieldId(
    r"EXTRA_COMPONENT_NAME",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_COMPONENT_NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_COMPONENT_NAME =>
      _id_EXTRA_COMPONENT_NAME.get(_class, const jni.JStringType());

  static final _id_EXTRA_CONTENT_ANNOTATIONS = _class.staticFieldId(
    r"EXTRA_CONTENT_ANNOTATIONS",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_CONTENT_ANNOTATIONS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_CONTENT_ANNOTATIONS =>
      _id_EXTRA_CONTENT_ANNOTATIONS.get(_class, const jni.JStringType());

  static final _id_EXTRA_CONTENT_QUERY = _class.staticFieldId(
    r"EXTRA_CONTENT_QUERY",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_CONTENT_QUERY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_CONTENT_QUERY =>
      _id_EXTRA_CONTENT_QUERY.get(_class, const jni.JStringType());

  static final _id_EXTRA_DATA_REMOVED = _class.staticFieldId(
    r"EXTRA_DATA_REMOVED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_DATA_REMOVED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_DATA_REMOVED =>
      _id_EXTRA_DATA_REMOVED.get(_class, const jni.JStringType());

  static final _id_EXTRA_DOCK_STATE = _class.staticFieldId(
    r"EXTRA_DOCK_STATE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_DOCK_STATE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_DOCK_STATE =>
      _id_EXTRA_DOCK_STATE.get(_class, const jni.JStringType());

  /// from: static public final int EXTRA_DOCK_STATE_CAR
  static const EXTRA_DOCK_STATE_CAR = 2;

  /// from: static public final int EXTRA_DOCK_STATE_DESK
  static const EXTRA_DOCK_STATE_DESK = 1;

  /// from: static public final int EXTRA_DOCK_STATE_HE_DESK
  static const EXTRA_DOCK_STATE_HE_DESK = 4;

  /// from: static public final int EXTRA_DOCK_STATE_LE_DESK
  static const EXTRA_DOCK_STATE_LE_DESK = 3;

  /// from: static public final int EXTRA_DOCK_STATE_UNDOCKED
  static const EXTRA_DOCK_STATE_UNDOCKED = 0;
  static final _id_EXTRA_DONT_KILL_APP = _class.staticFieldId(
    r"EXTRA_DONT_KILL_APP",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_DONT_KILL_APP
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_DONT_KILL_APP =>
      _id_EXTRA_DONT_KILL_APP.get(_class, const jni.JStringType());

  static final _id_EXTRA_DURATION_MILLIS = _class.staticFieldId(
    r"EXTRA_DURATION_MILLIS",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_DURATION_MILLIS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_DURATION_MILLIS =>
      _id_EXTRA_DURATION_MILLIS.get(_class, const jni.JStringType());

  static final _id_EXTRA_EMAIL = _class.staticFieldId(
    r"EXTRA_EMAIL",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_EMAIL
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_EMAIL =>
      _id_EXTRA_EMAIL.get(_class, const jni.JStringType());

  static final _id_EXTRA_END_TIME = _class.staticFieldId(
    r"EXTRA_END_TIME",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_END_TIME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_END_TIME =>
      _id_EXTRA_END_TIME.get(_class, const jni.JStringType());

  static final _id_EXTRA_EXCLUDE_COMPONENTS = _class.staticFieldId(
    r"EXTRA_EXCLUDE_COMPONENTS",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_EXCLUDE_COMPONENTS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_EXCLUDE_COMPONENTS =>
      _id_EXTRA_EXCLUDE_COMPONENTS.get(_class, const jni.JStringType());

  static final _id_EXTRA_FROM_STORAGE = _class.staticFieldId(
    r"EXTRA_FROM_STORAGE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_FROM_STORAGE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_FROM_STORAGE =>
      _id_EXTRA_FROM_STORAGE.get(_class, const jni.JStringType());

  static final _id_EXTRA_HTML_TEXT = _class.staticFieldId(
    r"EXTRA_HTML_TEXT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_HTML_TEXT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_HTML_TEXT =>
      _id_EXTRA_HTML_TEXT.get(_class, const jni.JStringType());

  static final _id_EXTRA_INDEX = _class.staticFieldId(
    r"EXTRA_INDEX",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_INDEX
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_INDEX =>
      _id_EXTRA_INDEX.get(_class, const jni.JStringType());

  static final _id_EXTRA_INITIAL_INTENTS = _class.staticFieldId(
    r"EXTRA_INITIAL_INTENTS",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_INITIAL_INTENTS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_INITIAL_INTENTS =>
      _id_EXTRA_INITIAL_INTENTS.get(_class, const jni.JStringType());

  static final _id_EXTRA_INSTALLER_PACKAGE_NAME = _class.staticFieldId(
    r"EXTRA_INSTALLER_PACKAGE_NAME",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_INSTALLER_PACKAGE_NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_INSTALLER_PACKAGE_NAME =>
      _id_EXTRA_INSTALLER_PACKAGE_NAME.get(_class, const jni.JStringType());

  static final _id_EXTRA_INTENT = _class.staticFieldId(
    r"EXTRA_INTENT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_INTENT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_INTENT =>
      _id_EXTRA_INTENT.get(_class, const jni.JStringType());

  static final _id_EXTRA_KEY_EVENT = _class.staticFieldId(
    r"EXTRA_KEY_EVENT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_KEY_EVENT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_KEY_EVENT =>
      _id_EXTRA_KEY_EVENT.get(_class, const jni.JStringType());

  static final _id_EXTRA_LOCALE_LIST = _class.staticFieldId(
    r"EXTRA_LOCALE_LIST",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_LOCALE_LIST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_LOCALE_LIST =>
      _id_EXTRA_LOCALE_LIST.get(_class, const jni.JStringType());

  static final _id_EXTRA_LOCAL_ONLY = _class.staticFieldId(
    r"EXTRA_LOCAL_ONLY",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_LOCAL_ONLY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_LOCAL_ONLY =>
      _id_EXTRA_LOCAL_ONLY.get(_class, const jni.JStringType());

  static final _id_EXTRA_LOCUS_ID = _class.staticFieldId(
    r"EXTRA_LOCUS_ID",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_LOCUS_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_LOCUS_ID =>
      _id_EXTRA_LOCUS_ID.get(_class, const jni.JStringType());

  static final _id_EXTRA_MIME_TYPES = _class.staticFieldId(
    r"EXTRA_MIME_TYPES",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_MIME_TYPES
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_MIME_TYPES =>
      _id_EXTRA_MIME_TYPES.get(_class, const jni.JStringType());

  static final _id_EXTRA_NOT_UNKNOWN_SOURCE = _class.staticFieldId(
    r"EXTRA_NOT_UNKNOWN_SOURCE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_NOT_UNKNOWN_SOURCE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_NOT_UNKNOWN_SOURCE =>
      _id_EXTRA_NOT_UNKNOWN_SOURCE.get(_class, const jni.JStringType());

  static final _id_EXTRA_ORIGINATING_URI = _class.staticFieldId(
    r"EXTRA_ORIGINATING_URI",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_ORIGINATING_URI
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_ORIGINATING_URI =>
      _id_EXTRA_ORIGINATING_URI.get(_class, const jni.JStringType());

  static final _id_EXTRA_PACKAGE_NAME = _class.staticFieldId(
    r"EXTRA_PACKAGE_NAME",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_PACKAGE_NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_PACKAGE_NAME =>
      _id_EXTRA_PACKAGE_NAME.get(_class, const jni.JStringType());

  static final _id_EXTRA_PERMISSION_GROUP_NAME = _class.staticFieldId(
    r"EXTRA_PERMISSION_GROUP_NAME",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_PERMISSION_GROUP_NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_PERMISSION_GROUP_NAME =>
      _id_EXTRA_PERMISSION_GROUP_NAME.get(_class, const jni.JStringType());

  static final _id_EXTRA_PHONE_NUMBER = _class.staticFieldId(
    r"EXTRA_PHONE_NUMBER",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_PHONE_NUMBER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_PHONE_NUMBER =>
      _id_EXTRA_PHONE_NUMBER.get(_class, const jni.JStringType());

  static final _id_EXTRA_PROCESS_TEXT = _class.staticFieldId(
    r"EXTRA_PROCESS_TEXT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_PROCESS_TEXT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_PROCESS_TEXT =>
      _id_EXTRA_PROCESS_TEXT.get(_class, const jni.JStringType());

  static final _id_EXTRA_PROCESS_TEXT_READONLY = _class.staticFieldId(
    r"EXTRA_PROCESS_TEXT_READONLY",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_PROCESS_TEXT_READONLY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_PROCESS_TEXT_READONLY =>
      _id_EXTRA_PROCESS_TEXT_READONLY.get(_class, const jni.JStringType());

  static final _id_EXTRA_QUICK_VIEW_FEATURES = _class.staticFieldId(
    r"EXTRA_QUICK_VIEW_FEATURES",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_QUICK_VIEW_FEATURES
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_QUICK_VIEW_FEATURES =>
      _id_EXTRA_QUICK_VIEW_FEATURES.get(_class, const jni.JStringType());

  static final _id_EXTRA_QUIET_MODE = _class.staticFieldId(
    r"EXTRA_QUIET_MODE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_QUIET_MODE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_QUIET_MODE =>
      _id_EXTRA_QUIET_MODE.get(_class, const jni.JStringType());

  static final _id_EXTRA_REFERRER = _class.staticFieldId(
    r"EXTRA_REFERRER",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_REFERRER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_REFERRER =>
      _id_EXTRA_REFERRER.get(_class, const jni.JStringType());

  static final _id_EXTRA_REFERRER_NAME = _class.staticFieldId(
    r"EXTRA_REFERRER_NAME",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_REFERRER_NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_REFERRER_NAME =>
      _id_EXTRA_REFERRER_NAME.get(_class, const jni.JStringType());

  static final _id_EXTRA_REMOTE_INTENT_TOKEN = _class.staticFieldId(
    r"EXTRA_REMOTE_INTENT_TOKEN",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_REMOTE_INTENT_TOKEN
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_REMOTE_INTENT_TOKEN =>
      _id_EXTRA_REMOTE_INTENT_TOKEN.get(_class, const jni.JStringType());

  static final _id_EXTRA_REPLACEMENT_EXTRAS = _class.staticFieldId(
    r"EXTRA_REPLACEMENT_EXTRAS",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_REPLACEMENT_EXTRAS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_REPLACEMENT_EXTRAS =>
      _id_EXTRA_REPLACEMENT_EXTRAS.get(_class, const jni.JStringType());

  static final _id_EXTRA_REPLACING = _class.staticFieldId(
    r"EXTRA_REPLACING",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_REPLACING
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_REPLACING =>
      _id_EXTRA_REPLACING.get(_class, const jni.JStringType());

  static final _id_EXTRA_RESTRICTIONS_BUNDLE = _class.staticFieldId(
    r"EXTRA_RESTRICTIONS_BUNDLE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_RESTRICTIONS_BUNDLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_RESTRICTIONS_BUNDLE =>
      _id_EXTRA_RESTRICTIONS_BUNDLE.get(_class, const jni.JStringType());

  static final _id_EXTRA_RESTRICTIONS_INTENT = _class.staticFieldId(
    r"EXTRA_RESTRICTIONS_INTENT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_RESTRICTIONS_INTENT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_RESTRICTIONS_INTENT =>
      _id_EXTRA_RESTRICTIONS_INTENT.get(_class, const jni.JStringType());

  static final _id_EXTRA_RESTRICTIONS_LIST = _class.staticFieldId(
    r"EXTRA_RESTRICTIONS_LIST",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_RESTRICTIONS_LIST
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_RESTRICTIONS_LIST =>
      _id_EXTRA_RESTRICTIONS_LIST.get(_class, const jni.JStringType());

  static final _id_EXTRA_RESULT_RECEIVER = _class.staticFieldId(
    r"EXTRA_RESULT_RECEIVER",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_RESULT_RECEIVER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_RESULT_RECEIVER =>
      _id_EXTRA_RESULT_RECEIVER.get(_class, const jni.JStringType());

  static final _id_EXTRA_RETURN_RESULT = _class.staticFieldId(
    r"EXTRA_RETURN_RESULT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_RETURN_RESULT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_RETURN_RESULT =>
      _id_EXTRA_RETURN_RESULT.get(_class, const jni.JStringType());

  static final _id_EXTRA_SHORTCUT_ICON = _class.staticFieldId(
    r"EXTRA_SHORTCUT_ICON",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_SHORTCUT_ICON
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_SHORTCUT_ICON =>
      _id_EXTRA_SHORTCUT_ICON.get(_class, const jni.JStringType());

  static final _id_EXTRA_SHORTCUT_ICON_RESOURCE = _class.staticFieldId(
    r"EXTRA_SHORTCUT_ICON_RESOURCE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_SHORTCUT_ICON_RESOURCE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_SHORTCUT_ICON_RESOURCE =>
      _id_EXTRA_SHORTCUT_ICON_RESOURCE.get(_class, const jni.JStringType());

  static final _id_EXTRA_SHORTCUT_ID = _class.staticFieldId(
    r"EXTRA_SHORTCUT_ID",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_SHORTCUT_ID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_SHORTCUT_ID =>
      _id_EXTRA_SHORTCUT_ID.get(_class, const jni.JStringType());

  static final _id_EXTRA_SHORTCUT_INTENT = _class.staticFieldId(
    r"EXTRA_SHORTCUT_INTENT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_SHORTCUT_INTENT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_SHORTCUT_INTENT =>
      _id_EXTRA_SHORTCUT_INTENT.get(_class, const jni.JStringType());

  static final _id_EXTRA_SHORTCUT_NAME = _class.staticFieldId(
    r"EXTRA_SHORTCUT_NAME",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_SHORTCUT_NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_SHORTCUT_NAME =>
      _id_EXTRA_SHORTCUT_NAME.get(_class, const jni.JStringType());

  static final _id_EXTRA_SHUTDOWN_USERSPACE_ONLY = _class.staticFieldId(
    r"EXTRA_SHUTDOWN_USERSPACE_ONLY",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_SHUTDOWN_USERSPACE_ONLY
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_SHUTDOWN_USERSPACE_ONLY =>
      _id_EXTRA_SHUTDOWN_USERSPACE_ONLY.get(_class, const jni.JStringType());

  static final _id_EXTRA_SPLIT_NAME = _class.staticFieldId(
    r"EXTRA_SPLIT_NAME",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_SPLIT_NAME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_SPLIT_NAME =>
      _id_EXTRA_SPLIT_NAME.get(_class, const jni.JStringType());

  static final _id_EXTRA_START_TIME = _class.staticFieldId(
    r"EXTRA_START_TIME",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_START_TIME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_START_TIME =>
      _id_EXTRA_START_TIME.get(_class, const jni.JStringType());

  static final _id_EXTRA_STREAM = _class.staticFieldId(
    r"EXTRA_STREAM",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_STREAM
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_STREAM =>
      _id_EXTRA_STREAM.get(_class, const jni.JStringType());

  static final _id_EXTRA_SUBJECT = _class.staticFieldId(
    r"EXTRA_SUBJECT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_SUBJECT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_SUBJECT =>
      _id_EXTRA_SUBJECT.get(_class, const jni.JStringType());

  static final _id_EXTRA_SUSPENDED_PACKAGE_EXTRAS = _class.staticFieldId(
    r"EXTRA_SUSPENDED_PACKAGE_EXTRAS",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_SUSPENDED_PACKAGE_EXTRAS
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_SUSPENDED_PACKAGE_EXTRAS =>
      _id_EXTRA_SUSPENDED_PACKAGE_EXTRAS.get(_class, const jni.JStringType());

  static final _id_EXTRA_TEMPLATE = _class.staticFieldId(
    r"EXTRA_TEMPLATE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_TEMPLATE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_TEMPLATE =>
      _id_EXTRA_TEMPLATE.get(_class, const jni.JStringType());

  static final _id_EXTRA_TEXT = _class.staticFieldId(
    r"EXTRA_TEXT",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_TEXT
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_TEXT =>
      _id_EXTRA_TEXT.get(_class, const jni.JStringType());

  static final _id_EXTRA_TIME = _class.staticFieldId(
    r"EXTRA_TIME",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_TIME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_TIME =>
      _id_EXTRA_TIME.get(_class, const jni.JStringType());

  static final _id_EXTRA_TIMEZONE = _class.staticFieldId(
    r"EXTRA_TIMEZONE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_TIMEZONE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_TIMEZONE =>
      _id_EXTRA_TIMEZONE.get(_class, const jni.JStringType());

  static final _id_EXTRA_TITLE = _class.staticFieldId(
    r"EXTRA_TITLE",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_TITLE
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_TITLE =>
      _id_EXTRA_TITLE.get(_class, const jni.JStringType());

  static final _id_EXTRA_UID = _class.staticFieldId(
    r"EXTRA_UID",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_UID
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_UID =>
      _id_EXTRA_UID.get(_class, const jni.JStringType());

  static final _id_EXTRA_USER = _class.staticFieldId(
    r"EXTRA_USER",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_USER
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_USER =>
      _id_EXTRA_USER.get(_class, const jni.JStringType());

  static final _id_EXTRA_USER_INITIATED = _class.staticFieldId(
    r"EXTRA_USER_INITIATED",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String EXTRA_USER_INITIATED
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get EXTRA_USER_INITIATED =>
      _id_EXTRA_USER_INITIATED.get(_class, const jni.JStringType());

  /// from: static public final int FILL_IN_ACTION
  static const FILL_IN_ACTION = 1;

  /// from: static public final int FILL_IN_CATEGORIES
  static const FILL_IN_CATEGORIES = 4;

  /// from: static public final int FILL_IN_CLIP_DATA
  static const FILL_IN_CLIP_DATA = 128;

  /// from: static public final int FILL_IN_COMPONENT
  static const FILL_IN_COMPONENT = 8;

  /// from: static public final int FILL_IN_DATA
  static const FILL_IN_DATA = 2;

  /// from: static public final int FILL_IN_IDENTIFIER
  static const FILL_IN_IDENTIFIER = 256;

  /// from: static public final int FILL_IN_PACKAGE
  static const FILL_IN_PACKAGE = 16;

  /// from: static public final int FILL_IN_SELECTOR
  static const FILL_IN_SELECTOR = 64;

  /// from: static public final int FILL_IN_SOURCE_BOUNDS
  static const FILL_IN_SOURCE_BOUNDS = 32;

  /// from: static public final int FLAG_ACTIVITY_BROUGHT_TO_FRONT
  static const FLAG_ACTIVITY_BROUGHT_TO_FRONT = 4194304;

  /// from: static public final int FLAG_ACTIVITY_CLEAR_TASK
  static const FLAG_ACTIVITY_CLEAR_TASK = 32768;

  /// from: static public final int FLAG_ACTIVITY_CLEAR_TOP
  static const FLAG_ACTIVITY_CLEAR_TOP = 67108864;

  /// from: static public final int FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET
  static const FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET = 524288;

  /// from: static public final int FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS
  static const FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS = 8388608;

  /// from: static public final int FLAG_ACTIVITY_FORWARD_RESULT
  static const FLAG_ACTIVITY_FORWARD_RESULT = 33554432;

  /// from: static public final int FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY
  static const FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY = 1048576;

  /// from: static public final int FLAG_ACTIVITY_LAUNCH_ADJACENT
  static const FLAG_ACTIVITY_LAUNCH_ADJACENT = 4096;

  /// from: static public final int FLAG_ACTIVITY_MATCH_EXTERNAL
  static const FLAG_ACTIVITY_MATCH_EXTERNAL = 2048;

  /// from: static public final int FLAG_ACTIVITY_MULTIPLE_TASK
  static const FLAG_ACTIVITY_MULTIPLE_TASK = 134217728;

  /// from: static public final int FLAG_ACTIVITY_NEW_DOCUMENT
  static const FLAG_ACTIVITY_NEW_DOCUMENT = 524288;

  /// from: static public final int FLAG_ACTIVITY_NEW_TASK
  static const FLAG_ACTIVITY_NEW_TASK = 268435456;

  /// from: static public final int FLAG_ACTIVITY_NO_ANIMATION
  static const FLAG_ACTIVITY_NO_ANIMATION = 65536;

  /// from: static public final int FLAG_ACTIVITY_NO_HISTORY
  static const FLAG_ACTIVITY_NO_HISTORY = 1073741824;

  /// from: static public final int FLAG_ACTIVITY_NO_USER_ACTION
  static const FLAG_ACTIVITY_NO_USER_ACTION = 262144;

  /// from: static public final int FLAG_ACTIVITY_PREVIOUS_IS_TOP
  static const FLAG_ACTIVITY_PREVIOUS_IS_TOP = 16777216;

  /// from: static public final int FLAG_ACTIVITY_REORDER_TO_FRONT
  static const FLAG_ACTIVITY_REORDER_TO_FRONT = 131072;

  /// from: static public final int FLAG_ACTIVITY_REQUIRE_DEFAULT
  static const FLAG_ACTIVITY_REQUIRE_DEFAULT = 512;

  /// from: static public final int FLAG_ACTIVITY_REQUIRE_NON_BROWSER
  static const FLAG_ACTIVITY_REQUIRE_NON_BROWSER = 1024;

  /// from: static public final int FLAG_ACTIVITY_RESET_TASK_IF_NEEDED
  static const FLAG_ACTIVITY_RESET_TASK_IF_NEEDED = 2097152;

  /// from: static public final int FLAG_ACTIVITY_RETAIN_IN_RECENTS
  static const FLAG_ACTIVITY_RETAIN_IN_RECENTS = 8192;

  /// from: static public final int FLAG_ACTIVITY_SINGLE_TOP
  static const FLAG_ACTIVITY_SINGLE_TOP = 536870912;

  /// from: static public final int FLAG_ACTIVITY_TASK_ON_HOME
  static const FLAG_ACTIVITY_TASK_ON_HOME = 16384;

  /// from: static public final int FLAG_DEBUG_LOG_RESOLUTION
  static const FLAG_DEBUG_LOG_RESOLUTION = 8;

  /// from: static public final int FLAG_DIRECT_BOOT_AUTO
  static const FLAG_DIRECT_BOOT_AUTO = 256;

  /// from: static public final int FLAG_EXCLUDE_STOPPED_PACKAGES
  static const FLAG_EXCLUDE_STOPPED_PACKAGES = 16;

  /// from: static public final int FLAG_FROM_BACKGROUND
  static const FLAG_FROM_BACKGROUND = 4;

  /// from: static public final int FLAG_GRANT_PERSISTABLE_URI_PERMISSION
  static const FLAG_GRANT_PERSISTABLE_URI_PERMISSION = 64;

  /// from: static public final int FLAG_GRANT_PREFIX_URI_PERMISSION
  static const FLAG_GRANT_PREFIX_URI_PERMISSION = 128;

  /// from: static public final int FLAG_GRANT_READ_URI_PERMISSION
  static const FLAG_GRANT_READ_URI_PERMISSION = 1;

  /// from: static public final int FLAG_GRANT_WRITE_URI_PERMISSION
  static const FLAG_GRANT_WRITE_URI_PERMISSION = 2;

  /// from: static public final int FLAG_INCLUDE_STOPPED_PACKAGES
  static const FLAG_INCLUDE_STOPPED_PACKAGES = 32;

  /// from: static public final int FLAG_RECEIVER_FOREGROUND
  static const FLAG_RECEIVER_FOREGROUND = 268435456;

  /// from: static public final int FLAG_RECEIVER_NO_ABORT
  static const FLAG_RECEIVER_NO_ABORT = 134217728;

  /// from: static public final int FLAG_RECEIVER_REGISTERED_ONLY
  static const FLAG_RECEIVER_REGISTERED_ONLY = 1073741824;

  /// from: static public final int FLAG_RECEIVER_REPLACE_PENDING
  static const FLAG_RECEIVER_REPLACE_PENDING = 536870912;

  /// from: static public final int FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS
  static const FLAG_RECEIVER_VISIBLE_TO_INSTANT_APPS = 2097152;
  static final _id_METADATA_DOCK_HOME = _class.staticFieldId(
    r"METADATA_DOCK_HOME",
    r"Ljava/lang/String;",
  );

  /// from: static public final java.lang.String METADATA_DOCK_HOME
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString get METADATA_DOCK_HOME =>
      _id_METADATA_DOCK_HOME.get(_class, const jni.JStringType());

  /// from: static public final int URI_ALLOW_UNSAFE
  static const URI_ALLOW_UNSAFE = 4;

  /// from: static public final int URI_ANDROID_APP_SCHEME
  static const URI_ANDROID_APP_SCHEME = 2;

  /// from: static public final int URI_INTENT_SCHEME
  static const URI_INTENT_SCHEME = 1;
  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent() {
    return Intent.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_new1 = _class.constructorId(
    r"(Landroid/content/Intent;)V",
  );

  static final _new1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent.new1(
    Intent intent,
  ) {
    return Intent.fromReference(_new1(_class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr, intent.reference.pointer)
        .reference);
  }

  static final _id_new2 = _class.constructorId(
    r"(Ljava/lang/String;)V",
  );

  static final _new2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent.new2(
    jni.JString string,
  ) {
    return Intent.fromReference(_new2(_class.reference.pointer,
            _id_new2 as jni.JMethodIDPtr, string.reference.pointer)
        .reference);
  }

  static final _id_new3 = _class.constructorId(
    r"(Ljava/lang/String;Landroid/net/Uri;)V",
  );

  static final _new3 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String string, android.net.Uri uri)
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent.new3(
    jni.JString string,
    jni.JObject uri,
  ) {
    return Intent.fromReference(_new3(
            _class.reference.pointer,
            _id_new3 as jni.JMethodIDPtr,
            string.reference.pointer,
            uri.reference.pointer)
        .reference);
  }

  static final _id_new4 = _class.constructorId(
    r"(Landroid/content/Context;Ljava/lang/Class;)V",
  );

  static final _new4 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(android.content.Context context, java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent.new4(
    Context context,
    jni.JObject class0,
  ) {
    return Intent.fromReference(_new4(
            _class.reference.pointer,
            _id_new4 as jni.JMethodIDPtr,
            context.reference.pointer,
            class0.reference.pointer)
        .reference);
  }

  static final _id_new5 = _class.constructorId(
    r"(Ljava/lang/String;Landroid/net/Uri;Landroid/content/Context;Ljava/lang/Class;)V",
  );

  static final _new5 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.lang.String string, android.net.Uri uri, android.content.Context context, java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  factory Intent.new5(
    jni.JString string,
    jni.JObject uri,
    Context context,
    jni.JObject class0,
  ) {
    return Intent.fromReference(_new5(
            _class.reference.pointer,
            _id_new5 as jni.JMethodIDPtr,
            string.reference.pointer,
            uri.reference.pointer,
            context.reference.pointer,
            class0.reference.pointer)
        .reference);
  }

  static final _id_createChooser = _class.staticMethodId(
    r"createChooser",
    r"(Landroid/content/Intent;Ljava/lang/CharSequence;)Landroid/content/Intent;",
  );

  static final _createChooser = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.content.Intent createChooser(android.content.Intent intent, java.lang.CharSequence charSequence)
  /// The returned object must be released after use, by calling the [release] method.
  static Intent createChooser(
    Intent intent,
    jni.JObject charSequence,
  ) {
    return _createChooser(
            _class.reference.pointer,
            _id_createChooser as jni.JMethodIDPtr,
            intent.reference.pointer,
            charSequence.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_createChooser1 = _class.staticMethodId(
    r"createChooser",
    r"(Landroid/content/Intent;Ljava/lang/CharSequence;Landroid/content/IntentSender;)Landroid/content/Intent;",
  );

  static final _createChooser1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.content.Intent createChooser(android.content.Intent intent, java.lang.CharSequence charSequence, android.content.IntentSender intentSender)
  /// The returned object must be released after use, by calling the [release] method.
  static Intent createChooser1(
    Intent intent,
    jni.JObject charSequence,
    jni.JObject intentSender,
  ) {
    return _createChooser1(
            _class.reference.pointer,
            _id_createChooser1 as jni.JMethodIDPtr,
            intent.reference.pointer,
            charSequence.reference.pointer,
            intentSender.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_clone = _class.instanceMethodId(
    r"clone",
    r"()Ljava/lang/Object;",
  );

  static final _clone = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.Object clone()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject clone() {
    return _clone(reference.pointer, _id_clone as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_cloneFilter = _class.instanceMethodId(
    r"cloneFilter",
    r"()Landroid/content/Intent;",
  );

  static final _cloneFilter = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.content.Intent cloneFilter()
  /// The returned object must be released after use, by calling the [release] method.
  Intent cloneFilter() {
    return _cloneFilter(reference.pointer, _id_cloneFilter as jni.JMethodIDPtr)
        .object(const $IntentType());
  }

  static final _id_makeMainActivity = _class.staticMethodId(
    r"makeMainActivity",
    r"(Landroid/content/ComponentName;)Landroid/content/Intent;",
  );

  static final _makeMainActivity = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.content.Intent makeMainActivity(android.content.ComponentName componentName)
  /// The returned object must be released after use, by calling the [release] method.
  static Intent makeMainActivity(
    jni.JObject componentName,
  ) {
    return _makeMainActivity(
            _class.reference.pointer,
            _id_makeMainActivity as jni.JMethodIDPtr,
            componentName.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_makeMainSelectorActivity = _class.staticMethodId(
    r"makeMainSelectorActivity",
    r"(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;",
  );

  static final _makeMainSelectorActivity = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: static public android.content.Intent makeMainSelectorActivity(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  static Intent makeMainSelectorActivity(
    jni.JString string,
    jni.JString string1,
  ) {
    return _makeMainSelectorActivity(
            _class.reference.pointer,
            _id_makeMainSelectorActivity as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_makeRestartActivityTask = _class.staticMethodId(
    r"makeRestartActivityTask",
    r"(Landroid/content/ComponentName;)Landroid/content/Intent;",
  );

  static final _makeRestartActivityTask = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.content.Intent makeRestartActivityTask(android.content.ComponentName componentName)
  /// The returned object must be released after use, by calling the [release] method.
  static Intent makeRestartActivityTask(
    jni.JObject componentName,
  ) {
    return _makeRestartActivityTask(
            _class.reference.pointer,
            _id_makeRestartActivityTask as jni.JMethodIDPtr,
            componentName.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_getIntent = _class.staticMethodId(
    r"getIntent",
    r"(Ljava/lang/String;)Landroid/content/Intent;",
  );

  static final _getIntent = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.content.Intent getIntent(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static Intent getIntent(
    jni.JString string,
  ) {
    return _getIntent(_class.reference.pointer,
            _id_getIntent as jni.JMethodIDPtr, string.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_parseUri = _class.staticMethodId(
    r"parseUri",
    r"(Ljava/lang/String;I)Landroid/content/Intent;",
  );

  static final _parseUri = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: static public android.content.Intent parseUri(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  static Intent parseUri(
    jni.JString string,
    int i,
  ) {
    return _parseUri(_class.reference.pointer, _id_parseUri as jni.JMethodIDPtr,
            string.reference.pointer, i)
        .object(const $IntentType());
  }

  static final _id_getIntentOld = _class.staticMethodId(
    r"getIntentOld",
    r"(Ljava/lang/String;)Landroid/content/Intent;",
  );

  static final _getIntentOld = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.content.Intent getIntentOld(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static Intent getIntentOld(
    jni.JString string,
  ) {
    return _getIntentOld(_class.reference.pointer,
            _id_getIntentOld as jni.JMethodIDPtr, string.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_getAction = _class.instanceMethodId(
    r"getAction",
    r"()Ljava/lang/String;",
  );

  static final _getAction = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getAction()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getAction() {
    return _getAction(reference.pointer, _id_getAction as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getData = _class.instanceMethodId(
    r"getData",
    r"()Landroid/net/Uri;",
  );

  static final _getData = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.net.Uri getData()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getData() {
    return _getData(reference.pointer, _id_getData as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getDataString = _class.instanceMethodId(
    r"getDataString",
    r"()Ljava/lang/String;",
  );

  static final _getDataString = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getDataString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getDataString() {
    return _getDataString(
            reference.pointer, _id_getDataString as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getScheme = _class.instanceMethodId(
    r"getScheme",
    r"()Ljava/lang/String;",
  );

  static final _getScheme = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getScheme()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getScheme() {
    return _getScheme(reference.pointer, _id_getScheme as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getType = _class.instanceMethodId(
    r"getType",
    r"()Ljava/lang/String;",
  );

  static final _getType = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getType()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getType() {
    return _getType(reference.pointer, _id_getType as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_resolveType = _class.instanceMethodId(
    r"resolveType",
    r"(Landroid/content/Context;)Ljava/lang/String;",
  );

  static final _resolveType = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String resolveType(android.content.Context context)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString resolveType(
    Context context,
  ) {
    return _resolveType(reference.pointer, _id_resolveType as jni.JMethodIDPtr,
            context.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_resolveType1 = _class.instanceMethodId(
    r"resolveType",
    r"(Landroid/content/ContentResolver;)Ljava/lang/String;",
  );

  static final _resolveType1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String resolveType(android.content.ContentResolver contentResolver)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString resolveType1(
    jni.JObject contentResolver,
  ) {
    return _resolveType1(
            reference.pointer,
            _id_resolveType1 as jni.JMethodIDPtr,
            contentResolver.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_resolveTypeIfNeeded = _class.instanceMethodId(
    r"resolveTypeIfNeeded",
    r"(Landroid/content/ContentResolver;)Ljava/lang/String;",
  );

  static final _resolveTypeIfNeeded = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String resolveTypeIfNeeded(android.content.ContentResolver contentResolver)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString resolveTypeIfNeeded(
    jni.JObject contentResolver,
  ) {
    return _resolveTypeIfNeeded(
            reference.pointer,
            _id_resolveTypeIfNeeded as jni.JMethodIDPtr,
            contentResolver.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_getIdentifier = _class.instanceMethodId(
    r"getIdentifier",
    r"()Ljava/lang/String;",
  );

  static final _getIdentifier = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getIdentifier()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getIdentifier() {
    return _getIdentifier(
            reference.pointer, _id_getIdentifier as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_hasCategory = _class.instanceMethodId(
    r"hasCategory",
    r"(Ljava/lang/String;)Z",
  );

  static final _hasCategory = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean hasCategory(java.lang.String string)
  bool hasCategory(
    jni.JString string,
  ) {
    return _hasCategory(reference.pointer, _id_hasCategory as jni.JMethodIDPtr,
            string.reference.pointer)
        .boolean;
  }

  static final _id_getCategories = _class.instanceMethodId(
    r"getCategories",
    r"()Ljava/util/Set;",
  );

  static final _getCategories = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.util.Set getCategories()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JSet<jni.JString> getCategories() {
    return _getCategories(
            reference.pointer, _id_getCategories as jni.JMethodIDPtr)
        .object(const jni.JSetType(jni.JStringType()));
  }

  static final _id_getSelector = _class.instanceMethodId(
    r"getSelector",
    r"()Landroid/content/Intent;",
  );

  static final _getSelector = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.content.Intent getSelector()
  /// The returned object must be released after use, by calling the [release] method.
  Intent getSelector() {
    return _getSelector(reference.pointer, _id_getSelector as jni.JMethodIDPtr)
        .object(const $IntentType());
  }

  static final _id_getClipData = _class.instanceMethodId(
    r"getClipData",
    r"()Landroid/content/ClipData;",
  );

  static final _getClipData = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.content.ClipData getClipData()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getClipData() {
    return _getClipData(reference.pointer, _id_getClipData as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setExtrasClassLoader = _class.instanceMethodId(
    r"setExtrasClassLoader",
    r"(Ljava/lang/ClassLoader;)V",
  );

  static final _setExtrasClassLoader = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setExtrasClassLoader(java.lang.ClassLoader classLoader)
  void setExtrasClassLoader(
    jni.JObject classLoader,
  ) {
    _setExtrasClassLoader(
            reference.pointer,
            _id_setExtrasClassLoader as jni.JMethodIDPtr,
            classLoader.reference.pointer)
        .check();
  }

  static final _id_hasExtra = _class.instanceMethodId(
    r"hasExtra",
    r"(Ljava/lang/String;)Z",
  );

  static final _hasExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean hasExtra(java.lang.String string)
  bool hasExtra(
    jni.JString string,
  ) {
    return _hasExtra(reference.pointer, _id_hasExtra as jni.JMethodIDPtr,
            string.reference.pointer)
        .boolean;
  }

  static final _id_hasFileDescriptors = _class.instanceMethodId(
    r"hasFileDescriptors",
    r"()Z",
  );

  static final _hasFileDescriptors = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean hasFileDescriptors()
  bool hasFileDescriptors() {
    return _hasFileDescriptors(
            reference.pointer, _id_hasFileDescriptors as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getBooleanExtra = _class.instanceMethodId(
    r"getBooleanExtra",
    r"(Ljava/lang/String;Z)Z",
  );

  static final _getBooleanExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean getBooleanExtra(java.lang.String string, boolean z)
  bool getBooleanExtra(
    jni.JString string,
    bool z,
  ) {
    return _getBooleanExtra(
            reference.pointer,
            _id_getBooleanExtra as jni.JMethodIDPtr,
            string.reference.pointer,
            z ? 1 : 0)
        .boolean;
  }

  static final _id_getByteExtra = _class.instanceMethodId(
    r"getByteExtra",
    r"(Ljava/lang/String;B)B",
  );

  static final _getByteExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallByteMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public byte getByteExtra(java.lang.String string, byte b)
  int getByteExtra(
    jni.JString string,
    int b,
  ) {
    return _getByteExtra(reference.pointer,
            _id_getByteExtra as jni.JMethodIDPtr, string.reference.pointer, b)
        .byte;
  }

  static final _id_getShortExtra = _class.instanceMethodId(
    r"getShortExtra",
    r"(Ljava/lang/String;S)S",
  );

  static final _getShortExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallShortMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public short getShortExtra(java.lang.String string, short s)
  int getShortExtra(
    jni.JString string,
    int s,
  ) {
    return _getShortExtra(reference.pointer,
            _id_getShortExtra as jni.JMethodIDPtr, string.reference.pointer, s)
        .short;
  }

  static final _id_getCharExtra = _class.instanceMethodId(
    r"getCharExtra",
    r"(Ljava/lang/String;C)C",
  );

  static final _getCharExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallCharMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public char getCharExtra(java.lang.String string, char c)
  int getCharExtra(
    jni.JString string,
    int c,
  ) {
    return _getCharExtra(reference.pointer,
            _id_getCharExtra as jni.JMethodIDPtr, string.reference.pointer, c)
        .char;
  }

  static final _id_getIntExtra = _class.instanceMethodId(
    r"getIntExtra",
    r"(Ljava/lang/String;I)I",
  );

  static final _getIntExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public int getIntExtra(java.lang.String string, int i)
  int getIntExtra(
    jni.JString string,
    int i,
  ) {
    return _getIntExtra(reference.pointer, _id_getIntExtra as jni.JMethodIDPtr,
            string.reference.pointer, i)
        .integer;
  }

  static final _id_getLongExtra = _class.instanceMethodId(
    r"getLongExtra",
    r"(Ljava/lang/String;J)J",
  );

  static final _getLongExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallLongMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public long getLongExtra(java.lang.String string, long j)
  int getLongExtra(
    jni.JString string,
    int j,
  ) {
    return _getLongExtra(reference.pointer,
            _id_getLongExtra as jni.JMethodIDPtr, string.reference.pointer, j)
        .long;
  }

  static final _id_getFloatExtra = _class.instanceMethodId(
    r"getFloatExtra",
    r"(Ljava/lang/String;F)F",
  );

  static final _getFloatExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Double)>)>>(
          "globalEnv_CallFloatMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, double)>();

  /// from: public float getFloatExtra(java.lang.String string, float f)
  double getFloatExtra(
    jni.JString string,
    double f,
  ) {
    return _getFloatExtra(reference.pointer,
            _id_getFloatExtra as jni.JMethodIDPtr, string.reference.pointer, f)
        .float;
  }

  static final _id_getDoubleExtra = _class.instanceMethodId(
    r"getDoubleExtra",
    r"(Ljava/lang/String;D)D",
  );

  static final _getDoubleExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Double)>)>>(
          "globalEnv_CallDoubleMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, double)>();

  /// from: public double getDoubleExtra(java.lang.String string, double d)
  double getDoubleExtra(
    jni.JString string,
    double d,
  ) {
    return _getDoubleExtra(reference.pointer,
            _id_getDoubleExtra as jni.JMethodIDPtr, string.reference.pointer, d)
        .doubleFloat;
  }

  static final _id_getStringExtra = _class.instanceMethodId(
    r"getStringExtra",
    r"(Ljava/lang/String;)Ljava/lang/String;",
  );

  static final _getStringExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String getStringExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getStringExtra(
    jni.JString string,
  ) {
    return _getStringExtra(reference.pointer,
            _id_getStringExtra as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JStringType());
  }

  static final _id_getCharSequenceExtra = _class.instanceMethodId(
    r"getCharSequenceExtra",
    r"(Ljava/lang/String;)Ljava/lang/CharSequence;",
  );

  static final _getCharSequenceExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.CharSequence getCharSequenceExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCharSequenceExtra(
    jni.JString string,
  ) {
    return _getCharSequenceExtra(
            reference.pointer,
            _id_getCharSequenceExtra as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getParcelableExtra = _class.instanceMethodId(
    r"getParcelableExtra",
    r"(Ljava/lang/String;)Landroid/os/Parcelable;",
  );

  static final _getParcelableExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public T getParcelableExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  $T getParcelableExtra<$T extends jni.JObject>(
    jni.JString string, {
    required jni.JObjType<$T> T,
  }) {
    return _getParcelableExtra(
            reference.pointer,
            _id_getParcelableExtra as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(T);
  }

  static final _id_getParcelableExtra1 = _class.instanceMethodId(
    r"getParcelableExtra",
    r"(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Object;",
  );

  static final _getParcelableExtra1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public T getParcelableExtra(java.lang.String string, java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  $T getParcelableExtra1<$T extends jni.JObject>(
    jni.JString string,
    jni.JObject class0, {
    required jni.JObjType<$T> T,
  }) {
    return _getParcelableExtra1(
            reference.pointer,
            _id_getParcelableExtra1 as jni.JMethodIDPtr,
            string.reference.pointer,
            class0.reference.pointer)
        .object(T);
  }

  static final _id_getParcelableArrayExtra = _class.instanceMethodId(
    r"getParcelableArrayExtra",
    r"(Ljava/lang/String;)[Landroid/os/Parcelable;",
  );

  static final _getParcelableArrayExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.Parcelable[] getParcelableArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getParcelableArrayExtra(
    jni.JString string,
  ) {
    return _getParcelableArrayExtra(
            reference.pointer,
            _id_getParcelableArrayExtra as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JArrayType(jni.JObjectType()));
  }

  static final _id_getParcelableArrayExtra1 = _class.instanceMethodId(
    r"getParcelableArrayExtra",
    r"(Ljava/lang/String;Ljava/lang/Class;)[Ljava/lang/Object;",
  );

  static final _getParcelableArrayExtra1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object[] getParcelableArrayExtra(java.lang.String string, java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<$T> getParcelableArrayExtra1<$T extends jni.JObject>(
    jni.JString string,
    jni.JObject class0, {
    required jni.JObjType<$T> T,
  }) {
    return _getParcelableArrayExtra1(
            reference.pointer,
            _id_getParcelableArrayExtra1 as jni.JMethodIDPtr,
            string.reference.pointer,
            class0.reference.pointer)
        .object(jni.JArrayType(T));
  }

  static final _id_getParcelableArrayListExtra = _class.instanceMethodId(
    r"getParcelableArrayListExtra",
    r"(Ljava/lang/String;)Ljava/util/ArrayList;",
  );

  static final _getParcelableArrayListExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.ArrayList getParcelableArrayListExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getParcelableArrayListExtra<$T extends jni.JObject>(
    jni.JString string, {
    required jni.JObjType<$T> T,
  }) {
    return _getParcelableArrayListExtra(
            reference.pointer,
            _id_getParcelableArrayListExtra as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getParcelableArrayListExtra1 = _class.instanceMethodId(
    r"getParcelableArrayListExtra",
    r"(Ljava/lang/String;Ljava/lang/Class;)Ljava/util/ArrayList;",
  );

  static final _getParcelableArrayListExtra1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.ArrayList getParcelableArrayListExtra(java.lang.String string, java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getParcelableArrayListExtra1<$T extends jni.JObject>(
    jni.JString string,
    jni.JObject class0, {
    required jni.JObjType<$T> T,
  }) {
    return _getParcelableArrayListExtra1(
            reference.pointer,
            _id_getParcelableArrayListExtra1 as jni.JMethodIDPtr,
            string.reference.pointer,
            class0.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getSerializableExtra = _class.instanceMethodId(
    r"getSerializableExtra",
    r"(Ljava/lang/String;)Ljava/io/Serializable;",
  );

  static final _getSerializableExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.io.Serializable getSerializableExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSerializableExtra(
    jni.JString string,
  ) {
    return _getSerializableExtra(
            reference.pointer,
            _id_getSerializableExtra as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getSerializableExtra1 = _class.instanceMethodId(
    r"getSerializableExtra",
    r"(Ljava/lang/String;Ljava/lang/Class;)Ljava/io/Serializable;",
  );

  static final _getSerializableExtra1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public T getSerializableExtra(java.lang.String string, java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  $T getSerializableExtra1<$T extends jni.JObject>(
    jni.JString string,
    jni.JObject class0, {
    required jni.JObjType<$T> T,
  }) {
    return _getSerializableExtra1(
            reference.pointer,
            _id_getSerializableExtra1 as jni.JMethodIDPtr,
            string.reference.pointer,
            class0.reference.pointer)
        .object(T);
  }

  static final _id_getIntegerArrayListExtra = _class.instanceMethodId(
    r"getIntegerArrayListExtra",
    r"(Ljava/lang/String;)Ljava/util/ArrayList;",
  );

  static final _getIntegerArrayListExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.ArrayList getIntegerArrayListExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getIntegerArrayListExtra(
    jni.JString string,
  ) {
    return _getIntegerArrayListExtra(
            reference.pointer,
            _id_getIntegerArrayListExtra as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getStringArrayListExtra = _class.instanceMethodId(
    r"getStringArrayListExtra",
    r"(Ljava/lang/String;)Ljava/util/ArrayList;",
  );

  static final _getStringArrayListExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.ArrayList getStringArrayListExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getStringArrayListExtra(
    jni.JString string,
  ) {
    return _getStringArrayListExtra(
            reference.pointer,
            _id_getStringArrayListExtra as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getCharSequenceArrayListExtra = _class.instanceMethodId(
    r"getCharSequenceArrayListExtra",
    r"(Ljava/lang/String;)Ljava/util/ArrayList;",
  );

  static final _getCharSequenceArrayListExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.util.ArrayList getCharSequenceArrayListExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCharSequenceArrayListExtra(
    jni.JString string,
  ) {
    return _getCharSequenceArrayListExtra(
            reference.pointer,
            _id_getCharSequenceArrayListExtra as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getBooleanArrayExtra = _class.instanceMethodId(
    r"getBooleanArrayExtra",
    r"(Ljava/lang/String;)[Z",
  );

  static final _getBooleanArrayExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean[] getBooleanArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jboolean> getBooleanArrayExtra(
    jni.JString string,
  ) {
    return _getBooleanArrayExtra(
            reference.pointer,
            _id_getBooleanArrayExtra as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JArrayType(jni.jbooleanType()));
  }

  static final _id_getByteArrayExtra = _class.instanceMethodId(
    r"getByteArrayExtra",
    r"(Ljava/lang/String;)[B",
  );

  static final _getByteArrayExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public byte[] getByteArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jbyte> getByteArrayExtra(
    jni.JString string,
  ) {
    return _getByteArrayExtra(reference.pointer,
            _id_getByteArrayExtra as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JArrayType(jni.jbyteType()));
  }

  static final _id_getShortArrayExtra = _class.instanceMethodId(
    r"getShortArrayExtra",
    r"(Ljava/lang/String;)[S",
  );

  static final _getShortArrayExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public short[] getShortArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jshort> getShortArrayExtra(
    jni.JString string,
  ) {
    return _getShortArrayExtra(
            reference.pointer,
            _id_getShortArrayExtra as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JArrayType(jni.jshortType()));
  }

  static final _id_getCharArrayExtra = _class.instanceMethodId(
    r"getCharArrayExtra",
    r"(Ljava/lang/String;)[C",
  );

  static final _getCharArrayExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public char[] getCharArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jchar> getCharArrayExtra(
    jni.JString string,
  ) {
    return _getCharArrayExtra(reference.pointer,
            _id_getCharArrayExtra as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JArrayType(jni.jcharType()));
  }

  static final _id_getIntArrayExtra = _class.instanceMethodId(
    r"getIntArrayExtra",
    r"(Ljava/lang/String;)[I",
  );

  static final _getIntArrayExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public int[] getIntArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jint> getIntArrayExtra(
    jni.JString string,
  ) {
    return _getIntArrayExtra(reference.pointer,
            _id_getIntArrayExtra as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JArrayType(jni.jintType()));
  }

  static final _id_getLongArrayExtra = _class.instanceMethodId(
    r"getLongArrayExtra",
    r"(Ljava/lang/String;)[J",
  );

  static final _getLongArrayExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public long[] getLongArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jlong> getLongArrayExtra(
    jni.JString string,
  ) {
    return _getLongArrayExtra(reference.pointer,
            _id_getLongArrayExtra as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JArrayType(jni.jlongType()));
  }

  static final _id_getFloatArrayExtra = _class.instanceMethodId(
    r"getFloatArrayExtra",
    r"(Ljava/lang/String;)[F",
  );

  static final _getFloatArrayExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public float[] getFloatArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jfloat> getFloatArrayExtra(
    jni.JString string,
  ) {
    return _getFloatArrayExtra(
            reference.pointer,
            _id_getFloatArrayExtra as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JArrayType(jni.jfloatType()));
  }

  static final _id_getDoubleArrayExtra = _class.instanceMethodId(
    r"getDoubleArrayExtra",
    r"(Ljava/lang/String;)[D",
  );

  static final _getDoubleArrayExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public double[] getDoubleArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.jdouble> getDoubleArrayExtra(
    jni.JString string,
  ) {
    return _getDoubleArrayExtra(
            reference.pointer,
            _id_getDoubleArrayExtra as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JArrayType(jni.jdoubleType()));
  }

  static final _id_getStringArrayExtra = _class.instanceMethodId(
    r"getStringArrayExtra",
    r"(Ljava/lang/String;)[Ljava/lang/String;",
  );

  static final _getStringArrayExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.String[] getStringArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JString> getStringArrayExtra(
    jni.JString string,
  ) {
    return _getStringArrayExtra(
            reference.pointer,
            _id_getStringArrayExtra as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JArrayType(jni.JStringType()));
  }

  static final _id_getCharSequenceArrayExtra = _class.instanceMethodId(
    r"getCharSequenceArrayExtra",
    r"(Ljava/lang/String;)[Ljava/lang/CharSequence;",
  );

  static final _getCharSequenceArrayExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.CharSequence[] getCharSequenceArrayExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JArray<jni.JObject> getCharSequenceArrayExtra(
    jni.JString string,
  ) {
    return _getCharSequenceArrayExtra(
            reference.pointer,
            _id_getCharSequenceArrayExtra as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const jni.JArrayType(jni.JObjectType()));
  }

  static final _id_getBundleExtra = _class.instanceMethodId(
    r"getBundleExtra",
    r"(Ljava/lang/String;)Landroid/os/Bundle;",
  );

  static final _getBundleExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.os.Bundle getBundleExtra(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getBundleExtra(
    jni.JString string,
  ) {
    return _getBundleExtra(reference.pointer,
            _id_getBundleExtra as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_getExtras = _class.instanceMethodId(
    r"getExtras",
    r"()Landroid/os/Bundle;",
  );

  static final _getExtras = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.os.Bundle getExtras()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getExtras() {
    return _getExtras(reference.pointer, _id_getExtras as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getFlags = _class.instanceMethodId(
    r"getFlags",
    r"()I",
  );

  static final _getFlags = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getFlags()
  int getFlags() {
    return _getFlags(reference.pointer, _id_getFlags as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getPackage = _class.instanceMethodId(
    r"getPackage",
    r"()Ljava/lang/String;",
  );

  static final _getPackage = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getPackage()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getPackage() {
    return _getPackage(reference.pointer, _id_getPackage as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getComponent = _class.instanceMethodId(
    r"getComponent",
    r"()Landroid/content/ComponentName;",
  );

  static final _getComponent = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.content.ComponentName getComponent()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getComponent() {
    return _getComponent(
            reference.pointer, _id_getComponent as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getSourceBounds = _class.instanceMethodId(
    r"getSourceBounds",
    r"()Landroid/graphics/Rect;",
  );

  static final _getSourceBounds = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.graphics.Rect getSourceBounds()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSourceBounds() {
    return _getSourceBounds(
            reference.pointer, _id_getSourceBounds as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_resolveActivity = _class.instanceMethodId(
    r"resolveActivity",
    r"(Landroid/content/pm/PackageManager;)Landroid/content/ComponentName;",
  );

  static final _resolveActivity = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.ComponentName resolveActivity(android.content.pm.PackageManager packageManager)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject resolveActivity(
    jni.JObject packageManager,
  ) {
    return _resolveActivity(
            reference.pointer,
            _id_resolveActivity as jni.JMethodIDPtr,
            packageManager.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_resolveActivityInfo = _class.instanceMethodId(
    r"resolveActivityInfo",
    r"(Landroid/content/pm/PackageManager;I)Landroid/content/pm/ActivityInfo;",
  );

  static final _resolveActivityInfo = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.content.pm.ActivityInfo resolveActivityInfo(android.content.pm.PackageManager packageManager, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject resolveActivityInfo(
    jni.JObject packageManager,
    int i,
  ) {
    return _resolveActivityInfo(
            reference.pointer,
            _id_resolveActivityInfo as jni.JMethodIDPtr,
            packageManager.reference.pointer,
            i)
        .object(const jni.JObjectType());
  }

  static final _id_setAction = _class.instanceMethodId(
    r"setAction",
    r"(Ljava/lang/String;)Landroid/content/Intent;",
  );

  static final _setAction = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent setAction(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setAction(
    jni.JString string,
  ) {
    return _setAction(reference.pointer, _id_setAction as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_setData = _class.instanceMethodId(
    r"setData",
    r"(Landroid/net/Uri;)Landroid/content/Intent;",
  );

  static final _setData = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent setData(android.net.Uri uri)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setData(
    jni.JObject uri,
  ) {
    return _setData(reference.pointer, _id_setData as jni.JMethodIDPtr,
            uri.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_setDataAndNormalize = _class.instanceMethodId(
    r"setDataAndNormalize",
    r"(Landroid/net/Uri;)Landroid/content/Intent;",
  );

  static final _setDataAndNormalize = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent setDataAndNormalize(android.net.Uri uri)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setDataAndNormalize(
    jni.JObject uri,
  ) {
    return _setDataAndNormalize(reference.pointer,
            _id_setDataAndNormalize as jni.JMethodIDPtr, uri.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_setType = _class.instanceMethodId(
    r"setType",
    r"(Ljava/lang/String;)Landroid/content/Intent;",
  );

  static final _setType = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent setType(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setType(
    jni.JString string,
  ) {
    return _setType(reference.pointer, _id_setType as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_setTypeAndNormalize = _class.instanceMethodId(
    r"setTypeAndNormalize",
    r"(Ljava/lang/String;)Landroid/content/Intent;",
  );

  static final _setTypeAndNormalize = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent setTypeAndNormalize(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setTypeAndNormalize(
    jni.JString string,
  ) {
    return _setTypeAndNormalize(
            reference.pointer,
            _id_setTypeAndNormalize as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_setDataAndType = _class.instanceMethodId(
    r"setDataAndType",
    r"(Landroid/net/Uri;Ljava/lang/String;)Landroid/content/Intent;",
  );

  static final _setDataAndType = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent setDataAndType(android.net.Uri uri, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setDataAndType(
    jni.JObject uri,
    jni.JString string,
  ) {
    return _setDataAndType(
            reference.pointer,
            _id_setDataAndType as jni.JMethodIDPtr,
            uri.reference.pointer,
            string.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_setDataAndTypeAndNormalize = _class.instanceMethodId(
    r"setDataAndTypeAndNormalize",
    r"(Landroid/net/Uri;Ljava/lang/String;)Landroid/content/Intent;",
  );

  static final _setDataAndTypeAndNormalize = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent setDataAndTypeAndNormalize(android.net.Uri uri, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setDataAndTypeAndNormalize(
    jni.JObject uri,
    jni.JString string,
  ) {
    return _setDataAndTypeAndNormalize(
            reference.pointer,
            _id_setDataAndTypeAndNormalize as jni.JMethodIDPtr,
            uri.reference.pointer,
            string.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_setIdentifier = _class.instanceMethodId(
    r"setIdentifier",
    r"(Ljava/lang/String;)Landroid/content/Intent;",
  );

  static final _setIdentifier = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent setIdentifier(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setIdentifier(
    jni.JString string,
  ) {
    return _setIdentifier(reference.pointer,
            _id_setIdentifier as jni.JMethodIDPtr, string.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_addCategory = _class.instanceMethodId(
    r"addCategory",
    r"(Ljava/lang/String;)Landroid/content/Intent;",
  );

  static final _addCategory = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent addCategory(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Intent addCategory(
    jni.JString string,
  ) {
    return _addCategory(reference.pointer, _id_addCategory as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_removeCategory = _class.instanceMethodId(
    r"removeCategory",
    r"(Ljava/lang/String;)V",
  );

  static final _removeCategory = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void removeCategory(java.lang.String string)
  void removeCategory(
    jni.JString string,
  ) {
    _removeCategory(reference.pointer, _id_removeCategory as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_setSelector = _class.instanceMethodId(
    r"setSelector",
    r"(Landroid/content/Intent;)V",
  );

  static final _setSelector = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setSelector(android.content.Intent intent)
  void setSelector(
    Intent intent,
  ) {
    _setSelector(reference.pointer, _id_setSelector as jni.JMethodIDPtr,
            intent.reference.pointer)
        .check();
  }

  static final _id_setClipData = _class.instanceMethodId(
    r"setClipData",
    r"(Landroid/content/ClipData;)V",
  );

  static final _setClipData = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setClipData(android.content.ClipData clipData)
  void setClipData(
    jni.JObject clipData,
  ) {
    _setClipData(reference.pointer, _id_setClipData as jni.JMethodIDPtr,
            clipData.reference.pointer)
        .check();
  }

  static final _id_putExtra = _class.instanceMethodId(
    r"putExtra",
    r"(Ljava/lang/String;Z)Landroid/content/Intent;",
  );

  static final _putExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, boolean z)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra(
    jni.JString string,
    bool z,
  ) {
    return _putExtra(reference.pointer, _id_putExtra as jni.JMethodIDPtr,
            string.reference.pointer, z ? 1 : 0)
        .object(const $IntentType());
  }

  static final _id_putExtra1 = _class.instanceMethodId(
    r"putExtra",
    r"(Ljava/lang/String;B)Landroid/content/Intent;",
  );

  static final _putExtra1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, byte b)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra1(
    jni.JString string,
    int b,
  ) {
    return _putExtra1(reference.pointer, _id_putExtra1 as jni.JMethodIDPtr,
            string.reference.pointer, b)
        .object(const $IntentType());
  }

  static final _id_putExtra2 = _class.instanceMethodId(
    r"putExtra",
    r"(Ljava/lang/String;C)Landroid/content/Intent;",
  );

  static final _putExtra2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, char c)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra2(
    jni.JString string,
    int c,
  ) {
    return _putExtra2(reference.pointer, _id_putExtra2 as jni.JMethodIDPtr,
            string.reference.pointer, c)
        .object(const $IntentType());
  }

  static final _id_putExtra3 = _class.instanceMethodId(
    r"putExtra",
    r"(Ljava/lang/String;S)Landroid/content/Intent;",
  );

  static final _putExtra3 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, short s)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra3(
    jni.JString string,
    int s,
  ) {
    return _putExtra3(reference.pointer, _id_putExtra3 as jni.JMethodIDPtr,
            string.reference.pointer, s)
        .object(const $IntentType());
  }

  static final _id_putExtra4 = _class.instanceMethodId(
    r"putExtra",
    r"(Ljava/lang/String;I)Landroid/content/Intent;",
  );

  static final _putExtra4 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, int i)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra4(
    jni.JString string,
    int i,
  ) {
    return _putExtra4(reference.pointer, _id_putExtra4 as jni.JMethodIDPtr,
            string.reference.pointer, i)
        .object(const $IntentType());
  }

  static final _id_putExtra5 = _class.instanceMethodId(
    r"putExtra",
    r"(Ljava/lang/String;J)Landroid/content/Intent;",
  );

  static final _putExtra5 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, long j)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra5(
    jni.JString string,
    int j,
  ) {
    return _putExtra5(reference.pointer, _id_putExtra5 as jni.JMethodIDPtr,
            string.reference.pointer, j)
        .object(const $IntentType());
  }

  static final _id_putExtra6 = _class.instanceMethodId(
    r"putExtra",
    r"(Ljava/lang/String;F)Landroid/content/Intent;",
  );

  static final _putExtra6 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Double)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, double)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, float f)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra6(
    jni.JString string,
    double f,
  ) {
    return _putExtra6(reference.pointer, _id_putExtra6 as jni.JMethodIDPtr,
            string.reference.pointer, f)
        .object(const $IntentType());
  }

  static final _id_putExtra7 = _class.instanceMethodId(
    r"putExtra",
    r"(Ljava/lang/String;D)Landroid/content/Intent;",
  );

  static final _putExtra7 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Double)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, double)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, double d)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra7(
    jni.JString string,
    double d,
  ) {
    return _putExtra7(reference.pointer, _id_putExtra7 as jni.JMethodIDPtr,
            string.reference.pointer, d)
        .object(const $IntentType());
  }

  static final _id_putExtra8 = _class.instanceMethodId(
    r"putExtra",
    r"(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;",
  );

  static final _putExtra8 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra8(
    jni.JString string,
    jni.JString string1,
  ) {
    return _putExtra8(reference.pointer, _id_putExtra8 as jni.JMethodIDPtr,
            string.reference.pointer, string1.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putExtra9 = _class.instanceMethodId(
    r"putExtra",
    r"(Ljava/lang/String;Ljava/lang/CharSequence;)Landroid/content/Intent;",
  );

  static final _putExtra9 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, java.lang.CharSequence charSequence)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra9(
    jni.JString string,
    jni.JObject charSequence,
  ) {
    return _putExtra9(reference.pointer, _id_putExtra9 as jni.JMethodIDPtr,
            string.reference.pointer, charSequence.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putExtra10 = _class.instanceMethodId(
    r"putExtra",
    r"(Ljava/lang/String;Landroid/os/Parcelable;)Landroid/content/Intent;",
  );

  static final _putExtra10 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, android.os.Parcelable parcelable)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra10(
    jni.JString string,
    jni.JObject parcelable,
  ) {
    return _putExtra10(reference.pointer, _id_putExtra10 as jni.JMethodIDPtr,
            string.reference.pointer, parcelable.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putExtra11 = _class.instanceMethodId(
    r"putExtra",
    r"(Ljava/lang/String;[Landroid/os/Parcelable;)Landroid/content/Intent;",
  );

  static final _putExtra11 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, android.os.Parcelable[] parcelables)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra11(
    jni.JString string,
    jni.JArray<jni.JObject> parcelables,
  ) {
    return _putExtra11(reference.pointer, _id_putExtra11 as jni.JMethodIDPtr,
            string.reference.pointer, parcelables.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putParcelableArrayListExtra = _class.instanceMethodId(
    r"putParcelableArrayListExtra",
    r"(Ljava/lang/String;Ljava/util/ArrayList;)Landroid/content/Intent;",
  );

  static final _putParcelableArrayListExtra = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putParcelableArrayListExtra(java.lang.String string, java.util.ArrayList arrayList)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putParcelableArrayListExtra(
    jni.JString string,
    jni.JObject arrayList,
  ) {
    return _putParcelableArrayListExtra(
            reference.pointer,
            _id_putParcelableArrayListExtra as jni.JMethodIDPtr,
            string.reference.pointer,
            arrayList.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putIntegerArrayListExtra = _class.instanceMethodId(
    r"putIntegerArrayListExtra",
    r"(Ljava/lang/String;Ljava/util/ArrayList;)Landroid/content/Intent;",
  );

  static final _putIntegerArrayListExtra = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putIntegerArrayListExtra(java.lang.String string, java.util.ArrayList arrayList)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putIntegerArrayListExtra(
    jni.JString string,
    jni.JObject arrayList,
  ) {
    return _putIntegerArrayListExtra(
            reference.pointer,
            _id_putIntegerArrayListExtra as jni.JMethodIDPtr,
            string.reference.pointer,
            arrayList.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putStringArrayListExtra = _class.instanceMethodId(
    r"putStringArrayListExtra",
    r"(Ljava/lang/String;Ljava/util/ArrayList;)Landroid/content/Intent;",
  );

  static final _putStringArrayListExtra = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putStringArrayListExtra(java.lang.String string, java.util.ArrayList arrayList)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putStringArrayListExtra(
    jni.JString string,
    jni.JObject arrayList,
  ) {
    return _putStringArrayListExtra(
            reference.pointer,
            _id_putStringArrayListExtra as jni.JMethodIDPtr,
            string.reference.pointer,
            arrayList.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putCharSequenceArrayListExtra = _class.instanceMethodId(
    r"putCharSequenceArrayListExtra",
    r"(Ljava/lang/String;Ljava/util/ArrayList;)Landroid/content/Intent;",
  );

  static final _putCharSequenceArrayListExtra = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putCharSequenceArrayListExtra(java.lang.String string, java.util.ArrayList arrayList)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putCharSequenceArrayListExtra(
    jni.JString string,
    jni.JObject arrayList,
  ) {
    return _putCharSequenceArrayListExtra(
            reference.pointer,
            _id_putCharSequenceArrayListExtra as jni.JMethodIDPtr,
            string.reference.pointer,
            arrayList.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putExtra12 = _class.instanceMethodId(
    r"putExtra",
    r"(Ljava/lang/String;Ljava/io/Serializable;)Landroid/content/Intent;",
  );

  static final _putExtra12 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, java.io.Serializable serializable)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra12(
    jni.JString string,
    jni.JObject serializable,
  ) {
    return _putExtra12(reference.pointer, _id_putExtra12 as jni.JMethodIDPtr,
            string.reference.pointer, serializable.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putExtra13 = _class.instanceMethodId(
    r"putExtra",
    r"(Ljava/lang/String;[Z)Landroid/content/Intent;",
  );

  static final _putExtra13 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, boolean[] zs)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra13(
    jni.JString string,
    jni.JArray<jni.jboolean> zs,
  ) {
    return _putExtra13(reference.pointer, _id_putExtra13 as jni.JMethodIDPtr,
            string.reference.pointer, zs.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putExtra14 = _class.instanceMethodId(
    r"putExtra",
    r"(Ljava/lang/String;[B)Landroid/content/Intent;",
  );

  static final _putExtra14 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, byte[] bs)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra14(
    jni.JString string,
    jni.JArray<jni.jbyte> bs,
  ) {
    return _putExtra14(reference.pointer, _id_putExtra14 as jni.JMethodIDPtr,
            string.reference.pointer, bs.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putExtra15 = _class.instanceMethodId(
    r"putExtra",
    r"(Ljava/lang/String;[S)Landroid/content/Intent;",
  );

  static final _putExtra15 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, short[] ss)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra15(
    jni.JString string,
    jni.JArray<jni.jshort> ss,
  ) {
    return _putExtra15(reference.pointer, _id_putExtra15 as jni.JMethodIDPtr,
            string.reference.pointer, ss.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putExtra16 = _class.instanceMethodId(
    r"putExtra",
    r"(Ljava/lang/String;[C)Landroid/content/Intent;",
  );

  static final _putExtra16 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, char[] cs)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra16(
    jni.JString string,
    jni.JArray<jni.jchar> cs,
  ) {
    return _putExtra16(reference.pointer, _id_putExtra16 as jni.JMethodIDPtr,
            string.reference.pointer, cs.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putExtra17 = _class.instanceMethodId(
    r"putExtra",
    r"(Ljava/lang/String;[I)Landroid/content/Intent;",
  );

  static final _putExtra17 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, int[] is)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra17(
    jni.JString string,
    jni.JArray<jni.jint> is0,
  ) {
    return _putExtra17(reference.pointer, _id_putExtra17 as jni.JMethodIDPtr,
            string.reference.pointer, is0.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putExtra18 = _class.instanceMethodId(
    r"putExtra",
    r"(Ljava/lang/String;[J)Landroid/content/Intent;",
  );

  static final _putExtra18 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, long[] js)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra18(
    jni.JString string,
    jni.JArray<jni.jlong> js,
  ) {
    return _putExtra18(reference.pointer, _id_putExtra18 as jni.JMethodIDPtr,
            string.reference.pointer, js.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putExtra19 = _class.instanceMethodId(
    r"putExtra",
    r"(Ljava/lang/String;[F)Landroid/content/Intent;",
  );

  static final _putExtra19 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, float[] fs)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra19(
    jni.JString string,
    jni.JArray<jni.jfloat> fs,
  ) {
    return _putExtra19(reference.pointer, _id_putExtra19 as jni.JMethodIDPtr,
            string.reference.pointer, fs.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putExtra20 = _class.instanceMethodId(
    r"putExtra",
    r"(Ljava/lang/String;[D)Landroid/content/Intent;",
  );

  static final _putExtra20 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, double[] ds)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra20(
    jni.JString string,
    jni.JArray<jni.jdouble> ds,
  ) {
    return _putExtra20(reference.pointer, _id_putExtra20 as jni.JMethodIDPtr,
            string.reference.pointer, ds.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putExtra21 = _class.instanceMethodId(
    r"putExtra",
    r"(Ljava/lang/String;[Ljava/lang/String;)Landroid/content/Intent;",
  );

  static final _putExtra21 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, java.lang.String[] strings)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra21(
    jni.JString string,
    jni.JArray<jni.JString> strings,
  ) {
    return _putExtra21(reference.pointer, _id_putExtra21 as jni.JMethodIDPtr,
            string.reference.pointer, strings.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putExtra22 = _class.instanceMethodId(
    r"putExtra",
    r"(Ljava/lang/String;[Ljava/lang/CharSequence;)Landroid/content/Intent;",
  );

  static final _putExtra22 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, java.lang.CharSequence[] charSequences)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra22(
    jni.JString string,
    jni.JArray<jni.JObject> charSequences,
  ) {
    return _putExtra22(reference.pointer, _id_putExtra22 as jni.JMethodIDPtr,
            string.reference.pointer, charSequences.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putExtra23 = _class.instanceMethodId(
    r"putExtra",
    r"(Ljava/lang/String;Landroid/os/Bundle;)Landroid/content/Intent;",
  );

  static final _putExtra23 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtra(java.lang.String string, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtra23(
    jni.JString string,
    jni.JObject bundle,
  ) {
    return _putExtra23(reference.pointer, _id_putExtra23 as jni.JMethodIDPtr,
            string.reference.pointer, bundle.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putExtras = _class.instanceMethodId(
    r"putExtras",
    r"(Landroid/content/Intent;)Landroid/content/Intent;",
  );

  static final _putExtras = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtras(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtras(
    Intent intent,
  ) {
    return _putExtras(reference.pointer, _id_putExtras as jni.JMethodIDPtr,
            intent.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_putExtras1 = _class.instanceMethodId(
    r"putExtras",
    r"(Landroid/os/Bundle;)Landroid/content/Intent;",
  );

  static final _putExtras1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent putExtras(android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  Intent putExtras1(
    jni.JObject bundle,
  ) {
    return _putExtras1(reference.pointer, _id_putExtras1 as jni.JMethodIDPtr,
            bundle.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_replaceExtras = _class.instanceMethodId(
    r"replaceExtras",
    r"(Landroid/content/Intent;)Landroid/content/Intent;",
  );

  static final _replaceExtras = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent replaceExtras(android.content.Intent intent)
  /// The returned object must be released after use, by calling the [release] method.
  Intent replaceExtras(
    Intent intent,
  ) {
    return _replaceExtras(reference.pointer,
            _id_replaceExtras as jni.JMethodIDPtr, intent.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_replaceExtras1 = _class.instanceMethodId(
    r"replaceExtras",
    r"(Landroid/os/Bundle;)Landroid/content/Intent;",
  );

  static final _replaceExtras1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent replaceExtras(android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  Intent replaceExtras1(
    jni.JObject bundle,
  ) {
    return _replaceExtras1(reference.pointer,
            _id_replaceExtras1 as jni.JMethodIDPtr, bundle.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_removeExtra = _class.instanceMethodId(
    r"removeExtra",
    r"(Ljava/lang/String;)V",
  );

  static final _removeExtra = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void removeExtra(java.lang.String string)
  void removeExtra(
    jni.JString string,
  ) {
    _removeExtra(reference.pointer, _id_removeExtra as jni.JMethodIDPtr,
            string.reference.pointer)
        .check();
  }

  static final _id_setFlags = _class.instanceMethodId(
    r"setFlags",
    r"(I)Landroid/content/Intent;",
  );

  static final _setFlags = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public android.content.Intent setFlags(int i)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setFlags(
    int i,
  ) {
    return _setFlags(reference.pointer, _id_setFlags as jni.JMethodIDPtr, i)
        .object(const $IntentType());
  }

  static final _id_addFlags = _class.instanceMethodId(
    r"addFlags",
    r"(I)Landroid/content/Intent;",
  );

  static final _addFlags = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public android.content.Intent addFlags(int i)
  /// The returned object must be released after use, by calling the [release] method.
  Intent addFlags(
    int i,
  ) {
    return _addFlags(reference.pointer, _id_addFlags as jni.JMethodIDPtr, i)
        .object(const $IntentType());
  }

  static final _id_removeFlags = _class.instanceMethodId(
    r"removeFlags",
    r"(I)V",
  );

  static final _removeFlags = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void removeFlags(int i)
  void removeFlags(
    int i,
  ) {
    _removeFlags(reference.pointer, _id_removeFlags as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_setPackage = _class.instanceMethodId(
    r"setPackage",
    r"(Ljava/lang/String;)Landroid/content/Intent;",
  );

  static final _setPackage = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent setPackage(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setPackage(
    jni.JString string,
  ) {
    return _setPackage(reference.pointer, _id_setPackage as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_setComponent = _class.instanceMethodId(
    r"setComponent",
    r"(Landroid/content/ComponentName;)Landroid/content/Intent;",
  );

  static final _setComponent = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent setComponent(android.content.ComponentName componentName)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setComponent(
    jni.JObject componentName,
  ) {
    return _setComponent(
            reference.pointer,
            _id_setComponent as jni.JMethodIDPtr,
            componentName.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_setClassName = _class.instanceMethodId(
    r"setClassName",
    r"(Landroid/content/Context;Ljava/lang/String;)Landroid/content/Intent;",
  );

  static final _setClassName = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent setClassName(android.content.Context context, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setClassName(
    Context context,
    jni.JString string,
  ) {
    return _setClassName(
            reference.pointer,
            _id_setClassName as jni.JMethodIDPtr,
            context.reference.pointer,
            string.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_setClassName1 = _class.instanceMethodId(
    r"setClassName",
    r"(Ljava/lang/String;Ljava/lang/String;)Landroid/content/Intent;",
  );

  static final _setClassName1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent setClassName(java.lang.String string, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setClassName1(
    jni.JString string,
    jni.JString string1,
  ) {
    return _setClassName1(
            reference.pointer,
            _id_setClassName1 as jni.JMethodIDPtr,
            string.reference.pointer,
            string1.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_setClass = _class.instanceMethodId(
    r"setClass",
    r"(Landroid/content/Context;Ljava/lang/Class;)Landroid/content/Intent;",
  );

  static final _setClass = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public android.content.Intent setClass(android.content.Context context, java.lang.Class class)
  /// The returned object must be released after use, by calling the [release] method.
  Intent setClass(
    Context context,
    jni.JObject class0,
  ) {
    return _setClass(reference.pointer, _id_setClass as jni.JMethodIDPtr,
            context.reference.pointer, class0.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_setSourceBounds = _class.instanceMethodId(
    r"setSourceBounds",
    r"(Landroid/graphics/Rect;)V",
  );

  static final _setSourceBounds = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setSourceBounds(android.graphics.Rect rect)
  void setSourceBounds(
    jni.JObject rect,
  ) {
    _setSourceBounds(reference.pointer, _id_setSourceBounds as jni.JMethodIDPtr,
            rect.reference.pointer)
        .check();
  }

  static final _id_fillIn = _class.instanceMethodId(
    r"fillIn",
    r"(Landroid/content/Intent;I)I",
  );

  static final _fillIn = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public int fillIn(android.content.Intent intent, int i)
  int fillIn(
    Intent intent,
    int i,
  ) {
    return _fillIn(reference.pointer, _id_fillIn as jni.JMethodIDPtr,
            intent.reference.pointer, i)
        .integer;
  }

  static final _id_filterEquals = _class.instanceMethodId(
    r"filterEquals",
    r"(Landroid/content/Intent;)Z",
  );

  static final _filterEquals = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean filterEquals(android.content.Intent intent)
  bool filterEquals(
    Intent intent,
  ) {
    return _filterEquals(reference.pointer,
            _id_filterEquals as jni.JMethodIDPtr, intent.reference.pointer)
        .boolean;
  }

  static final _id_filterHashCode = _class.instanceMethodId(
    r"filterHashCode",
    r"()I",
  );

  static final _filterHashCode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int filterHashCode()
  int filterHashCode() {
    return _filterHashCode(
            reference.pointer, _id_filterHashCode as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_toString1 = _class.instanceMethodId(
    r"toString",
    r"()Ljava/lang/String;",
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_toURI = _class.instanceMethodId(
    r"toURI",
    r"()Ljava/lang/String;",
  );

  static final _toURI = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String toURI()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toURI() {
    return _toURI(reference.pointer, _id_toURI as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_toUri = _class.instanceMethodId(
    r"toUri",
    r"(I)Ljava/lang/String;",
  );

  static final _toUri = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public java.lang.String toUri(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toUri(
    int i,
  ) {
    return _toUri(reference.pointer, _id_toUri as jni.JMethodIDPtr, i)
        .object(const jni.JStringType());
  }

  static final _id_describeContents = _class.instanceMethodId(
    r"describeContents",
    r"()I",
  );

  static final _describeContents = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int describeContents()
  int describeContents() {
    return _describeContents(
            reference.pointer, _id_describeContents as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_writeToParcel = _class.instanceMethodId(
    r"writeToParcel",
    r"(Landroid/os/Parcel;I)V",
  );

  static final _writeToParcel = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public void writeToParcel(android.os.Parcel parcel, int i)
  void writeToParcel(
    jni.JObject parcel,
    int i,
  ) {
    _writeToParcel(reference.pointer, _id_writeToParcel as jni.JMethodIDPtr,
            parcel.reference.pointer, i)
        .check();
  }

  static final _id_readFromParcel = _class.instanceMethodId(
    r"readFromParcel",
    r"(Landroid/os/Parcel;)V",
  );

  static final _readFromParcel = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void readFromParcel(android.os.Parcel parcel)
  void readFromParcel(
    jni.JObject parcel,
  ) {
    _readFromParcel(reference.pointer, _id_readFromParcel as jni.JMethodIDPtr,
            parcel.reference.pointer)
        .check();
  }

  static final _id_parseIntent = _class.staticMethodId(
    r"parseIntent",
    r"(Landroid/content/res/Resources;Lorg/xmlpull/v1/XmlPullParser;Landroid/util/AttributeSet;)Landroid/content/Intent;",
  );

  static final _parseIntent = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public android.content.Intent parseIntent(android.content.res.Resources resources, org.xmlpull.v1.XmlPullParser xmlPullParser, android.util.AttributeSet attributeSet)
  /// The returned object must be released after use, by calling the [release] method.
  static Intent parseIntent(
    jni.JObject resources,
    jni.JObject xmlPullParser,
    jni.JObject attributeSet,
  ) {
    return _parseIntent(
            _class.reference.pointer,
            _id_parseIntent as jni.JMethodIDPtr,
            resources.reference.pointer,
            xmlPullParser.reference.pointer,
            attributeSet.reference.pointer)
        .object(const $IntentType());
  }

  static final _id_normalizeMimeType = _class.staticMethodId(
    r"normalizeMimeType",
    r"(Ljava/lang/String;)Ljava/lang/String;",
  );

  static final _normalizeMimeType = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.lang.String normalizeMimeType(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JString normalizeMimeType(
    jni.JString string,
  ) {
    return _normalizeMimeType(_class.reference.pointer,
            _id_normalizeMimeType as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JStringType());
  }
}

final class $IntentType extends jni.JObjType<Intent> {
  const $IntentType();

  @override
  String get signature => r"Landroid/content/Intent;";

  @override
  Intent fromReference(jni.JReference reference) =>
      Intent.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($IntentType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($IntentType) && other is $IntentType;
  }
}

/// from: android.app.Activity
class Activity extends jni.JObject {
  @override
  late final jni.JObjType<Activity> $type = type;

  Activity.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"android/app/Activity");

  /// The type which includes information such as the signature of this class.
  static const type = $ActivityType();

  /// from: static public final int DEFAULT_KEYS_DIALER
  static const DEFAULT_KEYS_DIALER = 1;

  /// from: static public final int DEFAULT_KEYS_DISABLE
  static const DEFAULT_KEYS_DISABLE = 0;

  /// from: static public final int DEFAULT_KEYS_SEARCH_GLOBAL
  static const DEFAULT_KEYS_SEARCH_GLOBAL = 4;

  /// from: static public final int DEFAULT_KEYS_SEARCH_LOCAL
  static const DEFAULT_KEYS_SEARCH_LOCAL = 3;

  /// from: static public final int DEFAULT_KEYS_SHORTCUT
  static const DEFAULT_KEYS_SHORTCUT = 2;
  static final _id_FOCUSED_STATE_SET = _class.staticFieldId(
    r"FOCUSED_STATE_SET",
    r"[I",
  );

  /// from: static protected final int[] FOCUSED_STATE_SET
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JArray<jni.jint> get FOCUSED_STATE_SET =>
      _id_FOCUSED_STATE_SET.get(_class, const jni.JArrayType(jni.jintType()));

  /// from: static public final int RESULT_CANCELED
  static const RESULT_CANCELED = 0;

  /// from: static public final int RESULT_FIRST_USER
  static const RESULT_FIRST_USER = 1;

  /// from: static public final int RESULT_OK
  static const RESULT_OK = -1;
  static final _id_new0 = _class.constructorId(
    r"()V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void <init>()
  /// The returned object must be released after use, by calling the [release] method.
  factory Activity() {
    return Activity.fromReference(
        _new0(_class.reference.pointer, _id_new0 as jni.JMethodIDPtr)
            .reference);
  }

  static final _id_getIntent = _class.instanceMethodId(
    r"getIntent",
    r"()Landroid/content/Intent;",
  );

  static final _getIntent = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.content.Intent getIntent()
  /// The returned object must be released after use, by calling the [release] method.
  Intent getIntent() {
    return _getIntent(reference.pointer, _id_getIntent as jni.JMethodIDPtr)
        .object(const $IntentType());
  }

  static final _id_setIntent = _class.instanceMethodId(
    r"setIntent",
    r"(Landroid/content/Intent;)V",
  );

  static final _setIntent = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setIntent(android.content.Intent intent)
  void setIntent(
    Intent intent,
  ) {
    _setIntent(reference.pointer, _id_setIntent as jni.JMethodIDPtr,
            intent.reference.pointer)
        .check();
  }

  static final _id_setLocusContext = _class.instanceMethodId(
    r"setLocusContext",
    r"(Landroid/content/LocusId;Landroid/os/Bundle;)V",
  );

  static final _setLocusContext = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setLocusContext(android.content.LocusId locusId, android.os.Bundle bundle)
  void setLocusContext(
    jni.JObject locusId,
    jni.JObject bundle,
  ) {
    _setLocusContext(reference.pointer, _id_setLocusContext as jni.JMethodIDPtr,
            locusId.reference.pointer, bundle.reference.pointer)
        .check();
  }

  static final _id_getApplication = _class.instanceMethodId(
    r"getApplication",
    r"()Landroid/app/Application;",
  );

  static final _getApplication = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final android.app.Application getApplication()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getApplication() {
    return _getApplication(
            reference.pointer, _id_getApplication as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_isChild = _class.instanceMethodId(
    r"isChild",
    r"()Z",
  );

  static final _isChild = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final boolean isChild()
  bool isChild() {
    return _isChild(reference.pointer, _id_isChild as jni.JMethodIDPtr).boolean;
  }

  static final _id_getParent = _class.instanceMethodId(
    r"getParent",
    r"()Landroid/app/Activity;",
  );

  static final _getParent = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final android.app.Activity getParent()
  /// The returned object must be released after use, by calling the [release] method.
  Activity getParent() {
    return _getParent(reference.pointer, _id_getParent as jni.JMethodIDPtr)
        .object(const $ActivityType());
  }

  static final _id_getWindowManager = _class.instanceMethodId(
    r"getWindowManager",
    r"()Landroid/view/WindowManager;",
  );

  static final _getWindowManager = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.view.WindowManager getWindowManager()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getWindowManager() {
    return _getWindowManager(
            reference.pointer, _id_getWindowManager as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getWindow = _class.instanceMethodId(
    r"getWindow",
    r"()Landroid/view/Window;",
  );

  static final _getWindow = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.view.Window getWindow()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getWindow() {
    return _getWindow(reference.pointer, _id_getWindow as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getLoaderManager = _class.instanceMethodId(
    r"getLoaderManager",
    r"()Landroid/app/LoaderManager;",
  );

  static final _getLoaderManager = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.app.LoaderManager getLoaderManager()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getLoaderManager() {
    return _getLoaderManager(
            reference.pointer, _id_getLoaderManager as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getCurrentFocus = _class.instanceMethodId(
    r"getCurrentFocus",
    r"()Landroid/view/View;",
  );

  static final _getCurrentFocus = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.view.View getCurrentFocus()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCurrentFocus() {
    return _getCurrentFocus(
            reference.pointer, _id_getCurrentFocus as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_attachBaseContext = _class.instanceMethodId(
    r"attachBaseContext",
    r"(Landroid/content/Context;)V",
  );

  static final _attachBaseContext = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: protected void attachBaseContext(android.content.Context context)
  void attachBaseContext(
    Context context,
  ) {
    _attachBaseContext(
            reference.pointer,
            _id_attachBaseContext as jni.JMethodIDPtr,
            context.reference.pointer)
        .check();
  }

  static final _id_registerActivityLifecycleCallbacks = _class.instanceMethodId(
    r"registerActivityLifecycleCallbacks",
    r"(Landroid/app/Application$ActivityLifecycleCallbacks;)V",
  );

  static final _registerActivityLifecycleCallbacks =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              "globalEnv_CallVoidMethod")
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: public void registerActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks activityLifecycleCallbacks)
  void registerActivityLifecycleCallbacks(
    jni.JObject activityLifecycleCallbacks,
  ) {
    _registerActivityLifecycleCallbacks(
            reference.pointer,
            _id_registerActivityLifecycleCallbacks as jni.JMethodIDPtr,
            activityLifecycleCallbacks.reference.pointer)
        .check();
  }

  static final _id_unregisterActivityLifecycleCallbacks =
      _class.instanceMethodId(
    r"unregisterActivityLifecycleCallbacks",
    r"(Landroid/app/Application$ActivityLifecycleCallbacks;)V",
  );

  static final _unregisterActivityLifecycleCallbacks =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              "globalEnv_CallVoidMethod")
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: public void unregisterActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks activityLifecycleCallbacks)
  void unregisterActivityLifecycleCallbacks(
    jni.JObject activityLifecycleCallbacks,
  ) {
    _unregisterActivityLifecycleCallbacks(
            reference.pointer,
            _id_unregisterActivityLifecycleCallbacks as jni.JMethodIDPtr,
            activityLifecycleCallbacks.reference.pointer)
        .check();
  }

  static final _id_registerComponentCallbacks = _class.instanceMethodId(
    r"registerComponentCallbacks",
    r"(Landroid/content/ComponentCallbacks;)V",
  );

  static final _registerComponentCallbacks = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void registerComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)
  void registerComponentCallbacks(
    jni.JObject componentCallbacks,
  ) {
    _registerComponentCallbacks(
            reference.pointer,
            _id_registerComponentCallbacks as jni.JMethodIDPtr,
            componentCallbacks.reference.pointer)
        .check();
  }

  static final _id_unregisterComponentCallbacks = _class.instanceMethodId(
    r"unregisterComponentCallbacks",
    r"(Landroid/content/ComponentCallbacks;)V",
  );

  static final _unregisterComponentCallbacks = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void unregisterComponentCallbacks(android.content.ComponentCallbacks componentCallbacks)
  void unregisterComponentCallbacks(
    jni.JObject componentCallbacks,
  ) {
    _unregisterComponentCallbacks(
            reference.pointer,
            _id_unregisterComponentCallbacks as jni.JMethodIDPtr,
            componentCallbacks.reference.pointer)
        .check();
  }

  static final _id_onCreate = _class.instanceMethodId(
    r"onCreate",
    r"(Landroid/os/Bundle;)V",
  );

  static final _onCreate = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: protected void onCreate(android.os.Bundle bundle)
  void onCreate(
    jni.JObject bundle,
  ) {
    _onCreate(reference.pointer, _id_onCreate as jni.JMethodIDPtr,
            bundle.reference.pointer)
        .check();
  }

  static final _id_getSplashScreen = _class.instanceMethodId(
    r"getSplashScreen",
    r"()Landroid/window/SplashScreen;",
  );

  static final _getSplashScreen = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final android.window.SplashScreen getSplashScreen()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSplashScreen() {
    return _getSplashScreen(
            reference.pointer, _id_getSplashScreen as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_onCreate1 = _class.instanceMethodId(
    r"onCreate",
    r"(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V",
  );

  static final _onCreate1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onCreate(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)
  void onCreate1(
    jni.JObject bundle,
    jni.JObject persistableBundle,
  ) {
    _onCreate1(reference.pointer, _id_onCreate1 as jni.JMethodIDPtr,
            bundle.reference.pointer, persistableBundle.reference.pointer)
        .check();
  }

  static final _id_onRestoreInstanceState = _class.instanceMethodId(
    r"onRestoreInstanceState",
    r"(Landroid/os/Bundle;)V",
  );

  static final _onRestoreInstanceState = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: protected void onRestoreInstanceState(android.os.Bundle bundle)
  void onRestoreInstanceState(
    jni.JObject bundle,
  ) {
    _onRestoreInstanceState(
            reference.pointer,
            _id_onRestoreInstanceState as jni.JMethodIDPtr,
            bundle.reference.pointer)
        .check();
  }

  static final _id_onRestoreInstanceState1 = _class.instanceMethodId(
    r"onRestoreInstanceState",
    r"(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V",
  );

  static final _onRestoreInstanceState1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onRestoreInstanceState(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)
  void onRestoreInstanceState1(
    jni.JObject bundle,
    jni.JObject persistableBundle,
  ) {
    _onRestoreInstanceState1(
            reference.pointer,
            _id_onRestoreInstanceState1 as jni.JMethodIDPtr,
            bundle.reference.pointer,
            persistableBundle.reference.pointer)
        .check();
  }

  static final _id_onPostCreate = _class.instanceMethodId(
    r"onPostCreate",
    r"(Landroid/os/Bundle;)V",
  );

  static final _onPostCreate = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: protected void onPostCreate(android.os.Bundle bundle)
  void onPostCreate(
    jni.JObject bundle,
  ) {
    _onPostCreate(reference.pointer, _id_onPostCreate as jni.JMethodIDPtr,
            bundle.reference.pointer)
        .check();
  }

  static final _id_onPostCreate1 = _class.instanceMethodId(
    r"onPostCreate",
    r"(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V",
  );

  static final _onPostCreate1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onPostCreate(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)
  void onPostCreate1(
    jni.JObject bundle,
    jni.JObject persistableBundle,
  ) {
    _onPostCreate1(reference.pointer, _id_onPostCreate1 as jni.JMethodIDPtr,
            bundle.reference.pointer, persistableBundle.reference.pointer)
        .check();
  }

  static final _id_onStart = _class.instanceMethodId(
    r"onStart",
    r"()V",
  );

  static final _onStart = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: protected void onStart()
  void onStart() {
    _onStart(reference.pointer, _id_onStart as jni.JMethodIDPtr).check();
  }

  static final _id_onRestart = _class.instanceMethodId(
    r"onRestart",
    r"()V",
  );

  static final _onRestart = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: protected void onRestart()
  void onRestart() {
    _onRestart(reference.pointer, _id_onRestart as jni.JMethodIDPtr).check();
  }

  static final _id_onStateNotSaved = _class.instanceMethodId(
    r"onStateNotSaved",
    r"()V",
  );

  static final _onStateNotSaved = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void onStateNotSaved()
  void onStateNotSaved() {
    _onStateNotSaved(reference.pointer, _id_onStateNotSaved as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onResume = _class.instanceMethodId(
    r"onResume",
    r"()V",
  );

  static final _onResume = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: protected void onResume()
  void onResume() {
    _onResume(reference.pointer, _id_onResume as jni.JMethodIDPtr).check();
  }

  static final _id_onPostResume = _class.instanceMethodId(
    r"onPostResume",
    r"()V",
  );

  static final _onPostResume = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: protected void onPostResume()
  void onPostResume() {
    _onPostResume(reference.pointer, _id_onPostResume as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onTopResumedActivityChanged = _class.instanceMethodId(
    r"onTopResumedActivityChanged",
    r"(Z)V",
  );

  static final _onTopResumedActivityChanged = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void onTopResumedActivityChanged(boolean z)
  void onTopResumedActivityChanged(
    bool z,
  ) {
    _onTopResumedActivityChanged(reference.pointer,
            _id_onTopResumedActivityChanged as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isVoiceInteraction = _class.instanceMethodId(
    r"isVoiceInteraction",
    r"()Z",
  );

  static final _isVoiceInteraction = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isVoiceInteraction()
  bool isVoiceInteraction() {
    return _isVoiceInteraction(
            reference.pointer, _id_isVoiceInteraction as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isVoiceInteractionRoot = _class.instanceMethodId(
    r"isVoiceInteractionRoot",
    r"()Z",
  );

  static final _isVoiceInteractionRoot = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isVoiceInteractionRoot()
  bool isVoiceInteractionRoot() {
    return _isVoiceInteractionRoot(
            reference.pointer, _id_isVoiceInteractionRoot as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getVoiceInteractor = _class.instanceMethodId(
    r"getVoiceInteractor",
    r"()Landroid/app/VoiceInteractor;",
  );

  static final _getVoiceInteractor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.app.VoiceInteractor getVoiceInteractor()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getVoiceInteractor() {
    return _getVoiceInteractor(
            reference.pointer, _id_getVoiceInteractor as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_isLocalVoiceInteractionSupported = _class.instanceMethodId(
    r"isLocalVoiceInteractionSupported",
    r"()Z",
  );

  static final _isLocalVoiceInteractionSupported =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>("globalEnv_CallBooleanMethod")
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: public boolean isLocalVoiceInteractionSupported()
  bool isLocalVoiceInteractionSupported() {
    return _isLocalVoiceInteractionSupported(reference.pointer,
            _id_isLocalVoiceInteractionSupported as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_startLocalVoiceInteraction = _class.instanceMethodId(
    r"startLocalVoiceInteraction",
    r"(Landroid/os/Bundle;)V",
  );

  static final _startLocalVoiceInteraction = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void startLocalVoiceInteraction(android.os.Bundle bundle)
  void startLocalVoiceInteraction(
    jni.JObject bundle,
  ) {
    _startLocalVoiceInteraction(
            reference.pointer,
            _id_startLocalVoiceInteraction as jni.JMethodIDPtr,
            bundle.reference.pointer)
        .check();
  }

  static final _id_onLocalVoiceInteractionStarted = _class.instanceMethodId(
    r"onLocalVoiceInteractionStarted",
    r"()V",
  );

  static final _onLocalVoiceInteractionStarted = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void onLocalVoiceInteractionStarted()
  void onLocalVoiceInteractionStarted() {
    _onLocalVoiceInteractionStarted(reference.pointer,
            _id_onLocalVoiceInteractionStarted as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onLocalVoiceInteractionStopped = _class.instanceMethodId(
    r"onLocalVoiceInteractionStopped",
    r"()V",
  );

  static final _onLocalVoiceInteractionStopped = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void onLocalVoiceInteractionStopped()
  void onLocalVoiceInteractionStopped() {
    _onLocalVoiceInteractionStopped(reference.pointer,
            _id_onLocalVoiceInteractionStopped as jni.JMethodIDPtr)
        .check();
  }

  static final _id_stopLocalVoiceInteraction = _class.instanceMethodId(
    r"stopLocalVoiceInteraction",
    r"()V",
  );

  static final _stopLocalVoiceInteraction = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void stopLocalVoiceInteraction()
  void stopLocalVoiceInteraction() {
    _stopLocalVoiceInteraction(reference.pointer,
            _id_stopLocalVoiceInteraction as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onNewIntent = _class.instanceMethodId(
    r"onNewIntent",
    r"(Landroid/content/Intent;)V",
  );

  static final _onNewIntent = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: protected void onNewIntent(android.content.Intent intent)
  void onNewIntent(
    Intent intent,
  ) {
    _onNewIntent(reference.pointer, _id_onNewIntent as jni.JMethodIDPtr,
            intent.reference.pointer)
        .check();
  }

  static final _id_onSaveInstanceState = _class.instanceMethodId(
    r"onSaveInstanceState",
    r"(Landroid/os/Bundle;)V",
  );

  static final _onSaveInstanceState = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: protected void onSaveInstanceState(android.os.Bundle bundle)
  void onSaveInstanceState(
    jni.JObject bundle,
  ) {
    _onSaveInstanceState(
            reference.pointer,
            _id_onSaveInstanceState as jni.JMethodIDPtr,
            bundle.reference.pointer)
        .check();
  }

  static final _id_onSaveInstanceState1 = _class.instanceMethodId(
    r"onSaveInstanceState",
    r"(Landroid/os/Bundle;Landroid/os/PersistableBundle;)V",
  );

  static final _onSaveInstanceState1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onSaveInstanceState(android.os.Bundle bundle, android.os.PersistableBundle persistableBundle)
  void onSaveInstanceState1(
    jni.JObject bundle,
    jni.JObject persistableBundle,
  ) {
    _onSaveInstanceState1(
            reference.pointer,
            _id_onSaveInstanceState1 as jni.JMethodIDPtr,
            bundle.reference.pointer,
            persistableBundle.reference.pointer)
        .check();
  }

  static final _id_onPause = _class.instanceMethodId(
    r"onPause",
    r"()V",
  );

  static final _onPause = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: protected void onPause()
  void onPause() {
    _onPause(reference.pointer, _id_onPause as jni.JMethodIDPtr).check();
  }

  static final _id_onUserLeaveHint = _class.instanceMethodId(
    r"onUserLeaveHint",
    r"()V",
  );

  static final _onUserLeaveHint = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: protected void onUserLeaveHint()
  void onUserLeaveHint() {
    _onUserLeaveHint(reference.pointer, _id_onUserLeaveHint as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onCreateThumbnail = _class.instanceMethodId(
    r"onCreateThumbnail",
    r"(Landroid/graphics/Bitmap;Landroid/graphics/Canvas;)Z",
  );

  static final _onCreateThumbnail = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onCreateThumbnail(android.graphics.Bitmap bitmap, android.graphics.Canvas canvas)
  bool onCreateThumbnail(
    jni.JObject bitmap,
    jni.JObject canvas,
  ) {
    return _onCreateThumbnail(
            reference.pointer,
            _id_onCreateThumbnail as jni.JMethodIDPtr,
            bitmap.reference.pointer,
            canvas.reference.pointer)
        .boolean;
  }

  static final _id_onCreateDescription = _class.instanceMethodId(
    r"onCreateDescription",
    r"()Ljava/lang/CharSequence;",
  );

  static final _onCreateDescription = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.CharSequence onCreateDescription()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onCreateDescription() {
    return _onCreateDescription(
            reference.pointer, _id_onCreateDescription as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_onProvideAssistData = _class.instanceMethodId(
    r"onProvideAssistData",
    r"(Landroid/os/Bundle;)V",
  );

  static final _onProvideAssistData = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onProvideAssistData(android.os.Bundle bundle)
  void onProvideAssistData(
    jni.JObject bundle,
  ) {
    _onProvideAssistData(
            reference.pointer,
            _id_onProvideAssistData as jni.JMethodIDPtr,
            bundle.reference.pointer)
        .check();
  }

  static final _id_onProvideAssistContent = _class.instanceMethodId(
    r"onProvideAssistContent",
    r"(Landroid/app/assist/AssistContent;)V",
  );

  static final _onProvideAssistContent = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onProvideAssistContent(android.app.assist.AssistContent assistContent)
  void onProvideAssistContent(
    jni.JObject assistContent,
  ) {
    _onProvideAssistContent(
            reference.pointer,
            _id_onProvideAssistContent as jni.JMethodIDPtr,
            assistContent.reference.pointer)
        .check();
  }

  static final _id_onGetDirectActions = _class.instanceMethodId(
    r"onGetDirectActions",
    r"(Landroid/os/CancellationSignal;Ljava/util/function/Consumer;)V",
  );

  static final _onGetDirectActions = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onGetDirectActions(android.os.CancellationSignal cancellationSignal, java.util.function.Consumer consumer)
  void onGetDirectActions(
    jni.JObject cancellationSignal,
    jni.JObject consumer,
  ) {
    _onGetDirectActions(
            reference.pointer,
            _id_onGetDirectActions as jni.JMethodIDPtr,
            cancellationSignal.reference.pointer,
            consumer.reference.pointer)
        .check();
  }

  static final _id_onPerformDirectAction = _class.instanceMethodId(
    r"onPerformDirectAction",
    r"(Ljava/lang/String;Landroid/os/Bundle;Landroid/os/CancellationSignal;Ljava/util/function/Consumer;)V",
  );

  static final _onPerformDirectAction = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onPerformDirectAction(java.lang.String string, android.os.Bundle bundle, android.os.CancellationSignal cancellationSignal, java.util.function.Consumer consumer)
  void onPerformDirectAction(
    jni.JString string,
    jni.JObject bundle,
    jni.JObject cancellationSignal,
    jni.JObject consumer,
  ) {
    _onPerformDirectAction(
            reference.pointer,
            _id_onPerformDirectAction as jni.JMethodIDPtr,
            string.reference.pointer,
            bundle.reference.pointer,
            cancellationSignal.reference.pointer,
            consumer.reference.pointer)
        .check();
  }

  static final _id_requestShowKeyboardShortcuts = _class.instanceMethodId(
    r"requestShowKeyboardShortcuts",
    r"()V",
  );

  static final _requestShowKeyboardShortcuts = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final void requestShowKeyboardShortcuts()
  void requestShowKeyboardShortcuts() {
    _requestShowKeyboardShortcuts(reference.pointer,
            _id_requestShowKeyboardShortcuts as jni.JMethodIDPtr)
        .check();
  }

  static final _id_dismissKeyboardShortcutsHelper = _class.instanceMethodId(
    r"dismissKeyboardShortcutsHelper",
    r"()V",
  );

  static final _dismissKeyboardShortcutsHelper = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final void dismissKeyboardShortcutsHelper()
  void dismissKeyboardShortcutsHelper() {
    _dismissKeyboardShortcutsHelper(reference.pointer,
            _id_dismissKeyboardShortcutsHelper as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onProvideKeyboardShortcuts = _class.instanceMethodId(
    r"onProvideKeyboardShortcuts",
    r"(Ljava/util/List;Landroid/view/Menu;I)V",
  );

  static final _onProvideKeyboardShortcuts = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void onProvideKeyboardShortcuts(java.util.List list, android.view.Menu menu, int i)
  void onProvideKeyboardShortcuts(
    jni.JList<jni.JObject> list,
    jni.JObject menu,
    int i,
  ) {
    _onProvideKeyboardShortcuts(
            reference.pointer,
            _id_onProvideKeyboardShortcuts as jni.JMethodIDPtr,
            list.reference.pointer,
            menu.reference.pointer,
            i)
        .check();
  }

  static final _id_showAssist = _class.instanceMethodId(
    r"showAssist",
    r"(Landroid/os/Bundle;)Z",
  );

  static final _showAssist = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean showAssist(android.os.Bundle bundle)
  bool showAssist(
    jni.JObject bundle,
  ) {
    return _showAssist(reference.pointer, _id_showAssist as jni.JMethodIDPtr,
            bundle.reference.pointer)
        .boolean;
  }

  static final _id_onStop = _class.instanceMethodId(
    r"onStop",
    r"()V",
  );

  static final _onStop = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: protected void onStop()
  void onStop() {
    _onStop(reference.pointer, _id_onStop as jni.JMethodIDPtr).check();
  }

  static final _id_onDestroy = _class.instanceMethodId(
    r"onDestroy",
    r"()V",
  );

  static final _onDestroy = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: protected void onDestroy()
  void onDestroy() {
    _onDestroy(reference.pointer, _id_onDestroy as jni.JMethodIDPtr).check();
  }

  static final _id_reportFullyDrawn = _class.instanceMethodId(
    r"reportFullyDrawn",
    r"()V",
  );

  static final _reportFullyDrawn = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void reportFullyDrawn()
  void reportFullyDrawn() {
    _reportFullyDrawn(
            reference.pointer, _id_reportFullyDrawn as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onMultiWindowModeChanged = _class.instanceMethodId(
    r"onMultiWindowModeChanged",
    r"(ZLandroid/content/res/Configuration;)V",
  );

  static final _onMultiWindowModeChanged = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Int64, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: public void onMultiWindowModeChanged(boolean z, android.content.res.Configuration configuration)
  void onMultiWindowModeChanged(
    bool z,
    jni.JObject configuration,
  ) {
    _onMultiWindowModeChanged(
            reference.pointer,
            _id_onMultiWindowModeChanged as jni.JMethodIDPtr,
            z ? 1 : 0,
            configuration.reference.pointer)
        .check();
  }

  static final _id_onMultiWindowModeChanged1 = _class.instanceMethodId(
    r"onMultiWindowModeChanged",
    r"(Z)V",
  );

  static final _onMultiWindowModeChanged1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void onMultiWindowModeChanged(boolean z)
  void onMultiWindowModeChanged1(
    bool z,
  ) {
    _onMultiWindowModeChanged1(reference.pointer,
            _id_onMultiWindowModeChanged1 as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isInMultiWindowMode = _class.instanceMethodId(
    r"isInMultiWindowMode",
    r"()Z",
  );

  static final _isInMultiWindowMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isInMultiWindowMode()
  bool isInMultiWindowMode() {
    return _isInMultiWindowMode(
            reference.pointer, _id_isInMultiWindowMode as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_onPictureInPictureModeChanged = _class.instanceMethodId(
    r"onPictureInPictureModeChanged",
    r"(ZLandroid/content/res/Configuration;)V",
  );

  static final _onPictureInPictureModeChanged = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Int64, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: public void onPictureInPictureModeChanged(boolean z, android.content.res.Configuration configuration)
  void onPictureInPictureModeChanged(
    bool z,
    jni.JObject configuration,
  ) {
    _onPictureInPictureModeChanged(
            reference.pointer,
            _id_onPictureInPictureModeChanged as jni.JMethodIDPtr,
            z ? 1 : 0,
            configuration.reference.pointer)
        .check();
  }

  static final _id_onPictureInPictureUiStateChanged = _class.instanceMethodId(
    r"onPictureInPictureUiStateChanged",
    r"(Landroid/app/PictureInPictureUiState;)V",
  );

  static final _onPictureInPictureUiStateChanged =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JThrowablePtr Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              "globalEnv_CallVoidMethod")
          .asFunction<
              jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr, ffi.Pointer<ffi.Void>)>();

  /// from: public void onPictureInPictureUiStateChanged(android.app.PictureInPictureUiState pictureInPictureUiState)
  void onPictureInPictureUiStateChanged(
    jni.JObject pictureInPictureUiState,
  ) {
    _onPictureInPictureUiStateChanged(
            reference.pointer,
            _id_onPictureInPictureUiStateChanged as jni.JMethodIDPtr,
            pictureInPictureUiState.reference.pointer)
        .check();
  }

  static final _id_onPictureInPictureModeChanged1 = _class.instanceMethodId(
    r"onPictureInPictureModeChanged",
    r"(Z)V",
  );

  static final _onPictureInPictureModeChanged1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void onPictureInPictureModeChanged(boolean z)
  void onPictureInPictureModeChanged1(
    bool z,
  ) {
    _onPictureInPictureModeChanged1(reference.pointer,
            _id_onPictureInPictureModeChanged1 as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isInPictureInPictureMode = _class.instanceMethodId(
    r"isInPictureInPictureMode",
    r"()Z",
  );

  static final _isInPictureInPictureMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isInPictureInPictureMode()
  bool isInPictureInPictureMode() {
    return _isInPictureInPictureMode(
            reference.pointer, _id_isInPictureInPictureMode as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_enterPictureInPictureMode = _class.instanceMethodId(
    r"enterPictureInPictureMode",
    r"()V",
  );

  static final _enterPictureInPictureMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void enterPictureInPictureMode()
  void enterPictureInPictureMode() {
    _enterPictureInPictureMode(reference.pointer,
            _id_enterPictureInPictureMode as jni.JMethodIDPtr)
        .check();
  }

  static final _id_enterPictureInPictureMode1 = _class.instanceMethodId(
    r"enterPictureInPictureMode",
    r"(Landroid/app/PictureInPictureParams;)Z",
  );

  static final _enterPictureInPictureMode1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean enterPictureInPictureMode(android.app.PictureInPictureParams pictureInPictureParams)
  bool enterPictureInPictureMode1(
    jni.JObject pictureInPictureParams,
  ) {
    return _enterPictureInPictureMode1(
            reference.pointer,
            _id_enterPictureInPictureMode1 as jni.JMethodIDPtr,
            pictureInPictureParams.reference.pointer)
        .boolean;
  }

  static final _id_setPictureInPictureParams = _class.instanceMethodId(
    r"setPictureInPictureParams",
    r"(Landroid/app/PictureInPictureParams;)V",
  );

  static final _setPictureInPictureParams = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setPictureInPictureParams(android.app.PictureInPictureParams pictureInPictureParams)
  void setPictureInPictureParams(
    jni.JObject pictureInPictureParams,
  ) {
    _setPictureInPictureParams(
            reference.pointer,
            _id_setPictureInPictureParams as jni.JMethodIDPtr,
            pictureInPictureParams.reference.pointer)
        .check();
  }

  static final _id_getMaxNumPictureInPictureActions = _class.instanceMethodId(
    r"getMaxNumPictureInPictureActions",
    r"()I",
  );

  static final _getMaxNumPictureInPictureActions =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>("globalEnv_CallIntMethod")
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: public int getMaxNumPictureInPictureActions()
  int getMaxNumPictureInPictureActions() {
    return _getMaxNumPictureInPictureActions(reference.pointer,
            _id_getMaxNumPictureInPictureActions as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_onPictureInPictureRequested = _class.instanceMethodId(
    r"onPictureInPictureRequested",
    r"()Z",
  );

  static final _onPictureInPictureRequested = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean onPictureInPictureRequested()
  bool onPictureInPictureRequested() {
    return _onPictureInPictureRequested(reference.pointer,
            _id_onPictureInPictureRequested as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setShouldDockBigOverlays = _class.instanceMethodId(
    r"setShouldDockBigOverlays",
    r"(Z)V",
  );

  static final _setShouldDockBigOverlays = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void setShouldDockBigOverlays(boolean z)
  void setShouldDockBigOverlays(
    bool z,
  ) {
    _setShouldDockBigOverlays(reference.pointer,
            _id_setShouldDockBigOverlays as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_shouldDockBigOverlays = _class.instanceMethodId(
    r"shouldDockBigOverlays",
    r"()Z",
  );

  static final _shouldDockBigOverlays = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean shouldDockBigOverlays()
  bool shouldDockBigOverlays() {
    return _shouldDockBigOverlays(
            reference.pointer, _id_shouldDockBigOverlays as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_onConfigurationChanged = _class.instanceMethodId(
    r"onConfigurationChanged",
    r"(Landroid/content/res/Configuration;)V",
  );

  static final _onConfigurationChanged = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onConfigurationChanged(android.content.res.Configuration configuration)
  void onConfigurationChanged(
    jni.JObject configuration,
  ) {
    _onConfigurationChanged(
            reference.pointer,
            _id_onConfigurationChanged as jni.JMethodIDPtr,
            configuration.reference.pointer)
        .check();
  }

  static final _id_getChangingConfigurations = _class.instanceMethodId(
    r"getChangingConfigurations",
    r"()I",
  );

  static final _getChangingConfigurations = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getChangingConfigurations()
  int getChangingConfigurations() {
    return _getChangingConfigurations(reference.pointer,
            _id_getChangingConfigurations as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getLastNonConfigurationInstance = _class.instanceMethodId(
    r"getLastNonConfigurationInstance",
    r"()Ljava/lang/Object;",
  );

  static final _getLastNonConfigurationInstance = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.Object getLastNonConfigurationInstance()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getLastNonConfigurationInstance() {
    return _getLastNonConfigurationInstance(reference.pointer,
            _id_getLastNonConfigurationInstance as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_onRetainNonConfigurationInstance = _class.instanceMethodId(
    r"onRetainNonConfigurationInstance",
    r"()Ljava/lang/Object;",
  );

  static final _onRetainNonConfigurationInstance =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                    ffi.Pointer<ffi.Void>,
                    jni.JMethodIDPtr,
                  )>>("globalEnv_CallObjectMethod")
          .asFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>();

  /// from: public java.lang.Object onRetainNonConfigurationInstance()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onRetainNonConfigurationInstance() {
    return _onRetainNonConfigurationInstance(reference.pointer,
            _id_onRetainNonConfigurationInstance as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_onLowMemory = _class.instanceMethodId(
    r"onLowMemory",
    r"()V",
  );

  static final _onLowMemory = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void onLowMemory()
  void onLowMemory() {
    _onLowMemory(reference.pointer, _id_onLowMemory as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onTrimMemory = _class.instanceMethodId(
    r"onTrimMemory",
    r"(I)V",
  );

  static final _onTrimMemory = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void onTrimMemory(int i)
  void onTrimMemory(
    int i,
  ) {
    _onTrimMemory(reference.pointer, _id_onTrimMemory as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_getFragmentManager = _class.instanceMethodId(
    r"getFragmentManager",
    r"()Landroid/app/FragmentManager;",
  );

  static final _getFragmentManager = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.app.FragmentManager getFragmentManager()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getFragmentManager() {
    return _getFragmentManager(
            reference.pointer, _id_getFragmentManager as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_onAttachFragment = _class.instanceMethodId(
    r"onAttachFragment",
    r"(Landroid/app/Fragment;)V",
  );

  static final _onAttachFragment = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onAttachFragment(android.app.Fragment fragment)
  void onAttachFragment(
    jni.JObject fragment,
  ) {
    _onAttachFragment(
            reference.pointer,
            _id_onAttachFragment as jni.JMethodIDPtr,
            fragment.reference.pointer)
        .check();
  }

  static final _id_managedQuery = _class.instanceMethodId(
    r"managedQuery",
    r"(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor;",
  );

  static final _managedQuery = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final android.database.Cursor managedQuery(android.net.Uri uri, java.lang.String[] strings, java.lang.String string, java.lang.String[] strings1, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject managedQuery(
    jni.JObject uri,
    jni.JArray<jni.JString> strings,
    jni.JString string,
    jni.JArray<jni.JString> strings1,
    jni.JString string1,
  ) {
    return _managedQuery(
            reference.pointer,
            _id_managedQuery as jni.JMethodIDPtr,
            uri.reference.pointer,
            strings.reference.pointer,
            string.reference.pointer,
            strings1.reference.pointer,
            string1.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_startManagingCursor = _class.instanceMethodId(
    r"startManagingCursor",
    r"(Landroid/database/Cursor;)V",
  );

  static final _startManagingCursor = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void startManagingCursor(android.database.Cursor cursor)
  void startManagingCursor(
    jni.JObject cursor,
  ) {
    _startManagingCursor(
            reference.pointer,
            _id_startManagingCursor as jni.JMethodIDPtr,
            cursor.reference.pointer)
        .check();
  }

  static final _id_stopManagingCursor = _class.instanceMethodId(
    r"stopManagingCursor",
    r"(Landroid/database/Cursor;)V",
  );

  static final _stopManagingCursor = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void stopManagingCursor(android.database.Cursor cursor)
  void stopManagingCursor(
    jni.JObject cursor,
  ) {
    _stopManagingCursor(
            reference.pointer,
            _id_stopManagingCursor as jni.JMethodIDPtr,
            cursor.reference.pointer)
        .check();
  }

  static final _id_findViewById = _class.instanceMethodId(
    r"findViewById",
    r"(I)Landroid/view/View;",
  );

  static final _findViewById = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public T findViewById(int i)
  /// The returned object must be released after use, by calling the [release] method.
  $T findViewById<$T extends jni.JObject>(
    int i, {
    required jni.JObjType<$T> T,
  }) {
    return _findViewById(
            reference.pointer, _id_findViewById as jni.JMethodIDPtr, i)
        .object(T);
  }

  static final _id_requireViewById = _class.instanceMethodId(
    r"requireViewById",
    r"(I)Landroid/view/View;",
  );

  static final _requireViewById = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final T requireViewById(int i)
  /// The returned object must be released after use, by calling the [release] method.
  $T requireViewById<$T extends jni.JObject>(
    int i, {
    required jni.JObjType<$T> T,
  }) {
    return _requireViewById(
            reference.pointer, _id_requireViewById as jni.JMethodIDPtr, i)
        .object(T);
  }

  static final _id_getActionBar = _class.instanceMethodId(
    r"getActionBar",
    r"()Landroid/app/ActionBar;",
  );

  static final _getActionBar = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.app.ActionBar getActionBar()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getActionBar() {
    return _getActionBar(
            reference.pointer, _id_getActionBar as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setActionBar = _class.instanceMethodId(
    r"setActionBar",
    r"(Landroid/widget/Toolbar;)V",
  );

  static final _setActionBar = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setActionBar(android.widget.Toolbar toolbar)
  void setActionBar(
    jni.JObject toolbar,
  ) {
    _setActionBar(reference.pointer, _id_setActionBar as jni.JMethodIDPtr,
            toolbar.reference.pointer)
        .check();
  }

  static final _id_setContentView = _class.instanceMethodId(
    r"setContentView",
    r"(I)V",
  );

  static final _setContentView = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void setContentView(int i)
  void setContentView(
    int i,
  ) {
    _setContentView(
            reference.pointer, _id_setContentView as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_setContentView1 = _class.instanceMethodId(
    r"setContentView",
    r"(Landroid/view/View;)V",
  );

  static final _setContentView1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setContentView(android.view.View view)
  void setContentView1(
    jni.JObject view,
  ) {
    _setContentView1(reference.pointer, _id_setContentView1 as jni.JMethodIDPtr,
            view.reference.pointer)
        .check();
  }

  static final _id_setContentView2 = _class.instanceMethodId(
    r"setContentView",
    r"(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V",
  );

  static final _setContentView2 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void setContentView(android.view.View view, android.view.ViewGroup$LayoutParams layoutParams)
  void setContentView2(
    jni.JObject view,
    jni.JObject layoutParams,
  ) {
    _setContentView2(reference.pointer, _id_setContentView2 as jni.JMethodIDPtr,
            view.reference.pointer, layoutParams.reference.pointer)
        .check();
  }

  static final _id_addContentView = _class.instanceMethodId(
    r"addContentView",
    r"(Landroid/view/View;Landroid/view/ViewGroup$LayoutParams;)V",
  );

  static final _addContentView = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void addContentView(android.view.View view, android.view.ViewGroup$LayoutParams layoutParams)
  void addContentView(
    jni.JObject view,
    jni.JObject layoutParams,
  ) {
    _addContentView(reference.pointer, _id_addContentView as jni.JMethodIDPtr,
            view.reference.pointer, layoutParams.reference.pointer)
        .check();
  }

  static final _id_getContentTransitionManager = _class.instanceMethodId(
    r"getContentTransitionManager",
    r"()Landroid/transition/TransitionManager;",
  );

  static final _getContentTransitionManager = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.transition.TransitionManager getContentTransitionManager()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getContentTransitionManager() {
    return _getContentTransitionManager(reference.pointer,
            _id_getContentTransitionManager as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setContentTransitionManager = _class.instanceMethodId(
    r"setContentTransitionManager",
    r"(Landroid/transition/TransitionManager;)V",
  );

  static final _setContentTransitionManager = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setContentTransitionManager(android.transition.TransitionManager transitionManager)
  void setContentTransitionManager(
    jni.JObject transitionManager,
  ) {
    _setContentTransitionManager(
            reference.pointer,
            _id_setContentTransitionManager as jni.JMethodIDPtr,
            transitionManager.reference.pointer)
        .check();
  }

  static final _id_getContentScene = _class.instanceMethodId(
    r"getContentScene",
    r"()Landroid/transition/Scene;",
  );

  static final _getContentScene = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.transition.Scene getContentScene()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getContentScene() {
    return _getContentScene(
            reference.pointer, _id_getContentScene as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setFinishOnTouchOutside = _class.instanceMethodId(
    r"setFinishOnTouchOutside",
    r"(Z)V",
  );

  static final _setFinishOnTouchOutside = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void setFinishOnTouchOutside(boolean z)
  void setFinishOnTouchOutside(
    bool z,
  ) {
    _setFinishOnTouchOutside(reference.pointer,
            _id_setFinishOnTouchOutside as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setDefaultKeyMode = _class.instanceMethodId(
    r"setDefaultKeyMode",
    r"(I)V",
  );

  static final _setDefaultKeyMode = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final void setDefaultKeyMode(int i)
  void setDefaultKeyMode(
    int i,
  ) {
    _setDefaultKeyMode(
            reference.pointer, _id_setDefaultKeyMode as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_onKeyDown = _class.instanceMethodId(
    r"onKeyDown",
    r"(ILandroid/view/KeyEvent;)Z",
  );

  static final _onKeyDown = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Int64, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onKeyDown(int i, android.view.KeyEvent keyEvent)
  bool onKeyDown(
    int i,
    jni.JObject keyEvent,
  ) {
    return _onKeyDown(reference.pointer, _id_onKeyDown as jni.JMethodIDPtr, i,
            keyEvent.reference.pointer)
        .boolean;
  }

  static final _id_onKeyLongPress = _class.instanceMethodId(
    r"onKeyLongPress",
    r"(ILandroid/view/KeyEvent;)Z",
  );

  static final _onKeyLongPress = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Int64, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onKeyLongPress(int i, android.view.KeyEvent keyEvent)
  bool onKeyLongPress(
    int i,
    jni.JObject keyEvent,
  ) {
    return _onKeyLongPress(
            reference.pointer,
            _id_onKeyLongPress as jni.JMethodIDPtr,
            i,
            keyEvent.reference.pointer)
        .boolean;
  }

  static final _id_onKeyUp = _class.instanceMethodId(
    r"onKeyUp",
    r"(ILandroid/view/KeyEvent;)Z",
  );

  static final _onKeyUp = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Int64, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onKeyUp(int i, android.view.KeyEvent keyEvent)
  bool onKeyUp(
    int i,
    jni.JObject keyEvent,
  ) {
    return _onKeyUp(reference.pointer, _id_onKeyUp as jni.JMethodIDPtr, i,
            keyEvent.reference.pointer)
        .boolean;
  }

  static final _id_onKeyMultiple = _class.instanceMethodId(
    r"onKeyMultiple",
    r"(IILandroid/view/KeyEvent;)Z",
  );

  static final _onKeyMultiple = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Int64,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onKeyMultiple(int i, int i1, android.view.KeyEvent keyEvent)
  bool onKeyMultiple(
    int i,
    int i1,
    jni.JObject keyEvent,
  ) {
    return _onKeyMultiple(
            reference.pointer,
            _id_onKeyMultiple as jni.JMethodIDPtr,
            i,
            i1,
            keyEvent.reference.pointer)
        .boolean;
  }

  static final _id_onBackPressed = _class.instanceMethodId(
    r"onBackPressed",
    r"()V",
  );

  static final _onBackPressed = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void onBackPressed()
  void onBackPressed() {
    _onBackPressed(reference.pointer, _id_onBackPressed as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onKeyShortcut = _class.instanceMethodId(
    r"onKeyShortcut",
    r"(ILandroid/view/KeyEvent;)Z",
  );

  static final _onKeyShortcut = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Int64, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onKeyShortcut(int i, android.view.KeyEvent keyEvent)
  bool onKeyShortcut(
    int i,
    jni.JObject keyEvent,
  ) {
    return _onKeyShortcut(
            reference.pointer,
            _id_onKeyShortcut as jni.JMethodIDPtr,
            i,
            keyEvent.reference.pointer)
        .boolean;
  }

  static final _id_onTouchEvent = _class.instanceMethodId(
    r"onTouchEvent",
    r"(Landroid/view/MotionEvent;)Z",
  );

  static final _onTouchEvent = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onTouchEvent(android.view.MotionEvent motionEvent)
  bool onTouchEvent(
    jni.JObject motionEvent,
  ) {
    return _onTouchEvent(reference.pointer,
            _id_onTouchEvent as jni.JMethodIDPtr, motionEvent.reference.pointer)
        .boolean;
  }

  static final _id_onTrackballEvent = _class.instanceMethodId(
    r"onTrackballEvent",
    r"(Landroid/view/MotionEvent;)Z",
  );

  static final _onTrackballEvent = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onTrackballEvent(android.view.MotionEvent motionEvent)
  bool onTrackballEvent(
    jni.JObject motionEvent,
  ) {
    return _onTrackballEvent(
            reference.pointer,
            _id_onTrackballEvent as jni.JMethodIDPtr,
            motionEvent.reference.pointer)
        .boolean;
  }

  static final _id_onGenericMotionEvent = _class.instanceMethodId(
    r"onGenericMotionEvent",
    r"(Landroid/view/MotionEvent;)Z",
  );

  static final _onGenericMotionEvent = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onGenericMotionEvent(android.view.MotionEvent motionEvent)
  bool onGenericMotionEvent(
    jni.JObject motionEvent,
  ) {
    return _onGenericMotionEvent(
            reference.pointer,
            _id_onGenericMotionEvent as jni.JMethodIDPtr,
            motionEvent.reference.pointer)
        .boolean;
  }

  static final _id_onUserInteraction = _class.instanceMethodId(
    r"onUserInteraction",
    r"()V",
  );

  static final _onUserInteraction = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void onUserInteraction()
  void onUserInteraction() {
    _onUserInteraction(
            reference.pointer, _id_onUserInteraction as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onWindowAttributesChanged = _class.instanceMethodId(
    r"onWindowAttributesChanged",
    r"(Landroid/view/WindowManager$LayoutParams;)V",
  );

  static final _onWindowAttributesChanged = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onWindowAttributesChanged(android.view.WindowManager$LayoutParams layoutParams)
  void onWindowAttributesChanged(
    jni.JObject layoutParams,
  ) {
    _onWindowAttributesChanged(
            reference.pointer,
            _id_onWindowAttributesChanged as jni.JMethodIDPtr,
            layoutParams.reference.pointer)
        .check();
  }

  static final _id_onContentChanged = _class.instanceMethodId(
    r"onContentChanged",
    r"()V",
  );

  static final _onContentChanged = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void onContentChanged()
  void onContentChanged() {
    _onContentChanged(
            reference.pointer, _id_onContentChanged as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onWindowFocusChanged = _class.instanceMethodId(
    r"onWindowFocusChanged",
    r"(Z)V",
  );

  static final _onWindowFocusChanged = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void onWindowFocusChanged(boolean z)
  void onWindowFocusChanged(
    bool z,
  ) {
    _onWindowFocusChanged(reference.pointer,
            _id_onWindowFocusChanged as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_onAttachedToWindow = _class.instanceMethodId(
    r"onAttachedToWindow",
    r"()V",
  );

  static final _onAttachedToWindow = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void onAttachedToWindow()
  void onAttachedToWindow() {
    _onAttachedToWindow(
            reference.pointer, _id_onAttachedToWindow as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onDetachedFromWindow = _class.instanceMethodId(
    r"onDetachedFromWindow",
    r"()V",
  );

  static final _onDetachedFromWindow = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void onDetachedFromWindow()
  void onDetachedFromWindow() {
    _onDetachedFromWindow(
            reference.pointer, _id_onDetachedFromWindow as jni.JMethodIDPtr)
        .check();
  }

  static final _id_hasWindowFocus = _class.instanceMethodId(
    r"hasWindowFocus",
    r"()Z",
  );

  static final _hasWindowFocus = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean hasWindowFocus()
  bool hasWindowFocus() {
    return _hasWindowFocus(
            reference.pointer, _id_hasWindowFocus as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_dispatchKeyEvent = _class.instanceMethodId(
    r"dispatchKeyEvent",
    r"(Landroid/view/KeyEvent;)Z",
  );

  static final _dispatchKeyEvent = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean dispatchKeyEvent(android.view.KeyEvent keyEvent)
  bool dispatchKeyEvent(
    jni.JObject keyEvent,
  ) {
    return _dispatchKeyEvent(
            reference.pointer,
            _id_dispatchKeyEvent as jni.JMethodIDPtr,
            keyEvent.reference.pointer)
        .boolean;
  }

  static final _id_dispatchKeyShortcutEvent = _class.instanceMethodId(
    r"dispatchKeyShortcutEvent",
    r"(Landroid/view/KeyEvent;)Z",
  );

  static final _dispatchKeyShortcutEvent = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean dispatchKeyShortcutEvent(android.view.KeyEvent keyEvent)
  bool dispatchKeyShortcutEvent(
    jni.JObject keyEvent,
  ) {
    return _dispatchKeyShortcutEvent(
            reference.pointer,
            _id_dispatchKeyShortcutEvent as jni.JMethodIDPtr,
            keyEvent.reference.pointer)
        .boolean;
  }

  static final _id_dispatchTouchEvent = _class.instanceMethodId(
    r"dispatchTouchEvent",
    r"(Landroid/view/MotionEvent;)Z",
  );

  static final _dispatchTouchEvent = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean dispatchTouchEvent(android.view.MotionEvent motionEvent)
  bool dispatchTouchEvent(
    jni.JObject motionEvent,
  ) {
    return _dispatchTouchEvent(
            reference.pointer,
            _id_dispatchTouchEvent as jni.JMethodIDPtr,
            motionEvent.reference.pointer)
        .boolean;
  }

  static final _id_dispatchTrackballEvent = _class.instanceMethodId(
    r"dispatchTrackballEvent",
    r"(Landroid/view/MotionEvent;)Z",
  );

  static final _dispatchTrackballEvent = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean dispatchTrackballEvent(android.view.MotionEvent motionEvent)
  bool dispatchTrackballEvent(
    jni.JObject motionEvent,
  ) {
    return _dispatchTrackballEvent(
            reference.pointer,
            _id_dispatchTrackballEvent as jni.JMethodIDPtr,
            motionEvent.reference.pointer)
        .boolean;
  }

  static final _id_dispatchGenericMotionEvent = _class.instanceMethodId(
    r"dispatchGenericMotionEvent",
    r"(Landroid/view/MotionEvent;)Z",
  );

  static final _dispatchGenericMotionEvent = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean dispatchGenericMotionEvent(android.view.MotionEvent motionEvent)
  bool dispatchGenericMotionEvent(
    jni.JObject motionEvent,
  ) {
    return _dispatchGenericMotionEvent(
            reference.pointer,
            _id_dispatchGenericMotionEvent as jni.JMethodIDPtr,
            motionEvent.reference.pointer)
        .boolean;
  }

  static final _id_dispatchPopulateAccessibilityEvent = _class.instanceMethodId(
    r"dispatchPopulateAccessibilityEvent",
    r"(Landroid/view/accessibility/AccessibilityEvent;)Z",
  );

  static final _dispatchPopulateAccessibilityEvent =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JniResult Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              "globalEnv_CallBooleanMethod")
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>)>();

  /// from: public boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent accessibilityEvent)
  bool dispatchPopulateAccessibilityEvent(
    jni.JObject accessibilityEvent,
  ) {
    return _dispatchPopulateAccessibilityEvent(
            reference.pointer,
            _id_dispatchPopulateAccessibilityEvent as jni.JMethodIDPtr,
            accessibilityEvent.reference.pointer)
        .boolean;
  }

  static final _id_onCreatePanelView = _class.instanceMethodId(
    r"onCreatePanelView",
    r"(I)Landroid/view/View;",
  );

  static final _onCreatePanelView = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public android.view.View onCreatePanelView(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onCreatePanelView(
    int i,
  ) {
    return _onCreatePanelView(
            reference.pointer, _id_onCreatePanelView as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }

  static final _id_onCreatePanelMenu = _class.instanceMethodId(
    r"onCreatePanelMenu",
    r"(ILandroid/view/Menu;)Z",
  );

  static final _onCreatePanelMenu = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Int64, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onCreatePanelMenu(int i, android.view.Menu menu)
  bool onCreatePanelMenu(
    int i,
    jni.JObject menu,
  ) {
    return _onCreatePanelMenu(
            reference.pointer,
            _id_onCreatePanelMenu as jni.JMethodIDPtr,
            i,
            menu.reference.pointer)
        .boolean;
  }

  static final _id_onPreparePanel = _class.instanceMethodId(
    r"onPreparePanel",
    r"(ILandroid/view/View;Landroid/view/Menu;)Z",
  );

  static final _onPreparePanel = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onPreparePanel(int i, android.view.View view, android.view.Menu menu)
  bool onPreparePanel(
    int i,
    jni.JObject view,
    jni.JObject menu,
  ) {
    return _onPreparePanel(
            reference.pointer,
            _id_onPreparePanel as jni.JMethodIDPtr,
            i,
            view.reference.pointer,
            menu.reference.pointer)
        .boolean;
  }

  static final _id_onMenuOpened = _class.instanceMethodId(
    r"onMenuOpened",
    r"(ILandroid/view/Menu;)Z",
  );

  static final _onMenuOpened = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Int64, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onMenuOpened(int i, android.view.Menu menu)
  bool onMenuOpened(
    int i,
    jni.JObject menu,
  ) {
    return _onMenuOpened(reference.pointer,
            _id_onMenuOpened as jni.JMethodIDPtr, i, menu.reference.pointer)
        .boolean;
  }

  static final _id_onMenuItemSelected = _class.instanceMethodId(
    r"onMenuItemSelected",
    r"(ILandroid/view/MenuItem;)Z",
  );

  static final _onMenuItemSelected = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Int64, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onMenuItemSelected(int i, android.view.MenuItem menuItem)
  bool onMenuItemSelected(
    int i,
    jni.JObject menuItem,
  ) {
    return _onMenuItemSelected(
            reference.pointer,
            _id_onMenuItemSelected as jni.JMethodIDPtr,
            i,
            menuItem.reference.pointer)
        .boolean;
  }

  static final _id_onPanelClosed = _class.instanceMethodId(
    r"onPanelClosed",
    r"(ILandroid/view/Menu;)V",
  );

  static final _onPanelClosed = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Int64, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: public void onPanelClosed(int i, android.view.Menu menu)
  void onPanelClosed(
    int i,
    jni.JObject menu,
  ) {
    _onPanelClosed(reference.pointer, _id_onPanelClosed as jni.JMethodIDPtr, i,
            menu.reference.pointer)
        .check();
  }

  static final _id_invalidateOptionsMenu = _class.instanceMethodId(
    r"invalidateOptionsMenu",
    r"()V",
  );

  static final _invalidateOptionsMenu = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void invalidateOptionsMenu()
  void invalidateOptionsMenu() {
    _invalidateOptionsMenu(
            reference.pointer, _id_invalidateOptionsMenu as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onCreateOptionsMenu = _class.instanceMethodId(
    r"onCreateOptionsMenu",
    r"(Landroid/view/Menu;)Z",
  );

  static final _onCreateOptionsMenu = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onCreateOptionsMenu(android.view.Menu menu)
  bool onCreateOptionsMenu(
    jni.JObject menu,
  ) {
    return _onCreateOptionsMenu(reference.pointer,
            _id_onCreateOptionsMenu as jni.JMethodIDPtr, menu.reference.pointer)
        .boolean;
  }

  static final _id_onPrepareOptionsMenu = _class.instanceMethodId(
    r"onPrepareOptionsMenu",
    r"(Landroid/view/Menu;)Z",
  );

  static final _onPrepareOptionsMenu = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onPrepareOptionsMenu(android.view.Menu menu)
  bool onPrepareOptionsMenu(
    jni.JObject menu,
  ) {
    return _onPrepareOptionsMenu(
            reference.pointer,
            _id_onPrepareOptionsMenu as jni.JMethodIDPtr,
            menu.reference.pointer)
        .boolean;
  }

  static final _id_onOptionsItemSelected = _class.instanceMethodId(
    r"onOptionsItemSelected",
    r"(Landroid/view/MenuItem;)Z",
  );

  static final _onOptionsItemSelected = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onOptionsItemSelected(android.view.MenuItem menuItem)
  bool onOptionsItemSelected(
    jni.JObject menuItem,
  ) {
    return _onOptionsItemSelected(
            reference.pointer,
            _id_onOptionsItemSelected as jni.JMethodIDPtr,
            menuItem.reference.pointer)
        .boolean;
  }

  static final _id_onNavigateUp = _class.instanceMethodId(
    r"onNavigateUp",
    r"()Z",
  );

  static final _onNavigateUp = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean onNavigateUp()
  bool onNavigateUp() {
    return _onNavigateUp(
            reference.pointer, _id_onNavigateUp as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_onNavigateUpFromChild = _class.instanceMethodId(
    r"onNavigateUpFromChild",
    r"(Landroid/app/Activity;)Z",
  );

  static final _onNavigateUpFromChild = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onNavigateUpFromChild(android.app.Activity activity)
  bool onNavigateUpFromChild(
    Activity activity,
  ) {
    return _onNavigateUpFromChild(
            reference.pointer,
            _id_onNavigateUpFromChild as jni.JMethodIDPtr,
            activity.reference.pointer)
        .boolean;
  }

  static final _id_onCreateNavigateUpTaskStack = _class.instanceMethodId(
    r"onCreateNavigateUpTaskStack",
    r"(Landroid/app/TaskStackBuilder;)V",
  );

  static final _onCreateNavigateUpTaskStack = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onCreateNavigateUpTaskStack(android.app.TaskStackBuilder taskStackBuilder)
  void onCreateNavigateUpTaskStack(
    jni.JObject taskStackBuilder,
  ) {
    _onCreateNavigateUpTaskStack(
            reference.pointer,
            _id_onCreateNavigateUpTaskStack as jni.JMethodIDPtr,
            taskStackBuilder.reference.pointer)
        .check();
  }

  static final _id_onPrepareNavigateUpTaskStack = _class.instanceMethodId(
    r"onPrepareNavigateUpTaskStack",
    r"(Landroid/app/TaskStackBuilder;)V",
  );

  static final _onPrepareNavigateUpTaskStack = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onPrepareNavigateUpTaskStack(android.app.TaskStackBuilder taskStackBuilder)
  void onPrepareNavigateUpTaskStack(
    jni.JObject taskStackBuilder,
  ) {
    _onPrepareNavigateUpTaskStack(
            reference.pointer,
            _id_onPrepareNavigateUpTaskStack as jni.JMethodIDPtr,
            taskStackBuilder.reference.pointer)
        .check();
  }

  static final _id_onOptionsMenuClosed = _class.instanceMethodId(
    r"onOptionsMenuClosed",
    r"(Landroid/view/Menu;)V",
  );

  static final _onOptionsMenuClosed = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onOptionsMenuClosed(android.view.Menu menu)
  void onOptionsMenuClosed(
    jni.JObject menu,
  ) {
    _onOptionsMenuClosed(reference.pointer,
            _id_onOptionsMenuClosed as jni.JMethodIDPtr, menu.reference.pointer)
        .check();
  }

  static final _id_openOptionsMenu = _class.instanceMethodId(
    r"openOptionsMenu",
    r"()V",
  );

  static final _openOptionsMenu = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void openOptionsMenu()
  void openOptionsMenu() {
    _openOptionsMenu(reference.pointer, _id_openOptionsMenu as jni.JMethodIDPtr)
        .check();
  }

  static final _id_closeOptionsMenu = _class.instanceMethodId(
    r"closeOptionsMenu",
    r"()V",
  );

  static final _closeOptionsMenu = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void closeOptionsMenu()
  void closeOptionsMenu() {
    _closeOptionsMenu(
            reference.pointer, _id_closeOptionsMenu as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onCreateContextMenu = _class.instanceMethodId(
    r"onCreateContextMenu",
    r"(Landroid/view/ContextMenu;Landroid/view/View;Landroid/view/ContextMenu$ContextMenuInfo;)V",
  );

  static final _onCreateContextMenu = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onCreateContextMenu(android.view.ContextMenu contextMenu, android.view.View view, android.view.ContextMenu$ContextMenuInfo contextMenuInfo)
  void onCreateContextMenu(
    jni.JObject contextMenu,
    jni.JObject view,
    jni.JObject contextMenuInfo,
  ) {
    _onCreateContextMenu(
            reference.pointer,
            _id_onCreateContextMenu as jni.JMethodIDPtr,
            contextMenu.reference.pointer,
            view.reference.pointer,
            contextMenuInfo.reference.pointer)
        .check();
  }

  static final _id_registerForContextMenu = _class.instanceMethodId(
    r"registerForContextMenu",
    r"(Landroid/view/View;)V",
  );

  static final _registerForContextMenu = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void registerForContextMenu(android.view.View view)
  void registerForContextMenu(
    jni.JObject view,
  ) {
    _registerForContextMenu(
            reference.pointer,
            _id_registerForContextMenu as jni.JMethodIDPtr,
            view.reference.pointer)
        .check();
  }

  static final _id_unregisterForContextMenu = _class.instanceMethodId(
    r"unregisterForContextMenu",
    r"(Landroid/view/View;)V",
  );

  static final _unregisterForContextMenu = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void unregisterForContextMenu(android.view.View view)
  void unregisterForContextMenu(
    jni.JObject view,
  ) {
    _unregisterForContextMenu(
            reference.pointer,
            _id_unregisterForContextMenu as jni.JMethodIDPtr,
            view.reference.pointer)
        .check();
  }

  static final _id_openContextMenu = _class.instanceMethodId(
    r"openContextMenu",
    r"(Landroid/view/View;)V",
  );

  static final _openContextMenu = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void openContextMenu(android.view.View view)
  void openContextMenu(
    jni.JObject view,
  ) {
    _openContextMenu(reference.pointer, _id_openContextMenu as jni.JMethodIDPtr,
            view.reference.pointer)
        .check();
  }

  static final _id_closeContextMenu = _class.instanceMethodId(
    r"closeContextMenu",
    r"()V",
  );

  static final _closeContextMenu = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void closeContextMenu()
  void closeContextMenu() {
    _closeContextMenu(
            reference.pointer, _id_closeContextMenu as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onContextItemSelected = _class.instanceMethodId(
    r"onContextItemSelected",
    r"(Landroid/view/MenuItem;)Z",
  );

  static final _onContextItemSelected = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onContextItemSelected(android.view.MenuItem menuItem)
  bool onContextItemSelected(
    jni.JObject menuItem,
  ) {
    return _onContextItemSelected(
            reference.pointer,
            _id_onContextItemSelected as jni.JMethodIDPtr,
            menuItem.reference.pointer)
        .boolean;
  }

  static final _id_onContextMenuClosed = _class.instanceMethodId(
    r"onContextMenuClosed",
    r"(Landroid/view/Menu;)V",
  );

  static final _onContextMenuClosed = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onContextMenuClosed(android.view.Menu menu)
  void onContextMenuClosed(
    jni.JObject menu,
  ) {
    _onContextMenuClosed(reference.pointer,
            _id_onContextMenuClosed as jni.JMethodIDPtr, menu.reference.pointer)
        .check();
  }

  static final _id_onCreateDialog = _class.instanceMethodId(
    r"onCreateDialog",
    r"(I)Landroid/app/Dialog;",
  );

  static final _onCreateDialog = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: protected android.app.Dialog onCreateDialog(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onCreateDialog(
    int i,
  ) {
    return _onCreateDialog(
            reference.pointer, _id_onCreateDialog as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }

  static final _id_onCreateDialog1 = _class.instanceMethodId(
    r"onCreateDialog",
    r"(ILandroid/os/Bundle;)Landroid/app/Dialog;",
  );

  static final _onCreateDialog1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Int64, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: protected android.app.Dialog onCreateDialog(int i, android.os.Bundle bundle)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onCreateDialog1(
    int i,
    jni.JObject bundle,
  ) {
    return _onCreateDialog1(
            reference.pointer,
            _id_onCreateDialog1 as jni.JMethodIDPtr,
            i,
            bundle.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_onPrepareDialog = _class.instanceMethodId(
    r"onPrepareDialog",
    r"(ILandroid/app/Dialog;)V",
  );

  static final _onPrepareDialog = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Int64, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: protected void onPrepareDialog(int i, android.app.Dialog dialog)
  void onPrepareDialog(
    int i,
    jni.JObject dialog,
  ) {
    _onPrepareDialog(reference.pointer, _id_onPrepareDialog as jni.JMethodIDPtr,
            i, dialog.reference.pointer)
        .check();
  }

  static final _id_onPrepareDialog1 = _class.instanceMethodId(
    r"onPrepareDialog",
    r"(ILandroid/app/Dialog;Landroid/os/Bundle;)V",
  );

  static final _onPrepareDialog1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: protected void onPrepareDialog(int i, android.app.Dialog dialog, android.os.Bundle bundle)
  void onPrepareDialog1(
    int i,
    jni.JObject dialog,
    jni.JObject bundle,
  ) {
    _onPrepareDialog1(
            reference.pointer,
            _id_onPrepareDialog1 as jni.JMethodIDPtr,
            i,
            dialog.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_showDialog = _class.instanceMethodId(
    r"showDialog",
    r"(I)V",
  );

  static final _showDialog = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final void showDialog(int i)
  void showDialog(
    int i,
  ) {
    _showDialog(reference.pointer, _id_showDialog as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_showDialog1 = _class.instanceMethodId(
    r"showDialog",
    r"(ILandroid/os/Bundle;)Z",
  );

  static final _showDialog1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Int64, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean showDialog(int i, android.os.Bundle bundle)
  bool showDialog1(
    int i,
    jni.JObject bundle,
  ) {
    return _showDialog1(reference.pointer, _id_showDialog1 as jni.JMethodIDPtr,
            i, bundle.reference.pointer)
        .boolean;
  }

  static final _id_dismissDialog = _class.instanceMethodId(
    r"dismissDialog",
    r"(I)V",
  );

  static final _dismissDialog = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final void dismissDialog(int i)
  void dismissDialog(
    int i,
  ) {
    _dismissDialog(reference.pointer, _id_dismissDialog as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_removeDialog = _class.instanceMethodId(
    r"removeDialog",
    r"(I)V",
  );

  static final _removeDialog = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final void removeDialog(int i)
  void removeDialog(
    int i,
  ) {
    _removeDialog(reference.pointer, _id_removeDialog as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_onSearchRequested = _class.instanceMethodId(
    r"onSearchRequested",
    r"(Landroid/view/SearchEvent;)Z",
  );

  static final _onSearchRequested = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean onSearchRequested(android.view.SearchEvent searchEvent)
  bool onSearchRequested(
    jni.JObject searchEvent,
  ) {
    return _onSearchRequested(
            reference.pointer,
            _id_onSearchRequested as jni.JMethodIDPtr,
            searchEvent.reference.pointer)
        .boolean;
  }

  static final _id_onSearchRequested1 = _class.instanceMethodId(
    r"onSearchRequested",
    r"()Z",
  );

  static final _onSearchRequested1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean onSearchRequested()
  bool onSearchRequested1() {
    return _onSearchRequested1(
            reference.pointer, _id_onSearchRequested1 as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getSearchEvent = _class.instanceMethodId(
    r"getSearchEvent",
    r"()Landroid/view/SearchEvent;",
  );

  static final _getSearchEvent = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final android.view.SearchEvent getSearchEvent()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSearchEvent() {
    return _getSearchEvent(
            reference.pointer, _id_getSearchEvent as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_startSearch = _class.instanceMethodId(
    r"startSearch",
    r"(Ljava/lang/String;ZLandroid/os/Bundle;Z)V",
  );

  static final _startSearch = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void startSearch(java.lang.String string, boolean z, android.os.Bundle bundle, boolean z1)
  void startSearch(
    jni.JString string,
    bool z,
    jni.JObject bundle,
    bool z1,
  ) {
    _startSearch(
            reference.pointer,
            _id_startSearch as jni.JMethodIDPtr,
            string.reference.pointer,
            z ? 1 : 0,
            bundle.reference.pointer,
            z1 ? 1 : 0)
        .check();
  }

  static final _id_triggerSearch = _class.instanceMethodId(
    r"triggerSearch",
    r"(Ljava/lang/String;Landroid/os/Bundle;)V",
  );

  static final _triggerSearch = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void triggerSearch(java.lang.String string, android.os.Bundle bundle)
  void triggerSearch(
    jni.JString string,
    jni.JObject bundle,
  ) {
    _triggerSearch(reference.pointer, _id_triggerSearch as jni.JMethodIDPtr,
            string.reference.pointer, bundle.reference.pointer)
        .check();
  }

  static final _id_takeKeyEvents = _class.instanceMethodId(
    r"takeKeyEvents",
    r"(Z)V",
  );

  static final _takeKeyEvents = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void takeKeyEvents(boolean z)
  void takeKeyEvents(
    bool z,
  ) {
    _takeKeyEvents(
            reference.pointer, _id_takeKeyEvents as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_requestWindowFeature = _class.instanceMethodId(
    r"requestWindowFeature",
    r"(I)Z",
  );

  static final _requestWindowFeature = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final boolean requestWindowFeature(int i)
  bool requestWindowFeature(
    int i,
  ) {
    return _requestWindowFeature(
            reference.pointer, _id_requestWindowFeature as jni.JMethodIDPtr, i)
        .boolean;
  }

  static final _id_setFeatureDrawableResource = _class.instanceMethodId(
    r"setFeatureDrawableResource",
    r"(II)V",
  );

  static final _setFeatureDrawableResource = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr, ffi.VarArgs<(ffi.Int64, ffi.Int64)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int)>();

  /// from: public final void setFeatureDrawableResource(int i, int i1)
  void setFeatureDrawableResource(
    int i,
    int i1,
  ) {
    _setFeatureDrawableResource(reference.pointer,
            _id_setFeatureDrawableResource as jni.JMethodIDPtr, i, i1)
        .check();
  }

  static final _id_setFeatureDrawableUri = _class.instanceMethodId(
    r"setFeatureDrawableUri",
    r"(ILandroid/net/Uri;)V",
  );

  static final _setFeatureDrawableUri = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Int64, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: public final void setFeatureDrawableUri(int i, android.net.Uri uri)
  void setFeatureDrawableUri(
    int i,
    jni.JObject uri,
  ) {
    _setFeatureDrawableUri(
            reference.pointer,
            _id_setFeatureDrawableUri as jni.JMethodIDPtr,
            i,
            uri.reference.pointer)
        .check();
  }

  static final _id_setFeatureDrawable = _class.instanceMethodId(
    r"setFeatureDrawable",
    r"(ILandroid/graphics/drawable/Drawable;)V",
  );

  static final _setFeatureDrawable = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Int64, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: public final void setFeatureDrawable(int i, android.graphics.drawable.Drawable drawable)
  void setFeatureDrawable(
    int i,
    jni.JObject drawable,
  ) {
    _setFeatureDrawable(
            reference.pointer,
            _id_setFeatureDrawable as jni.JMethodIDPtr,
            i,
            drawable.reference.pointer)
        .check();
  }

  static final _id_setFeatureDrawableAlpha = _class.instanceMethodId(
    r"setFeatureDrawableAlpha",
    r"(II)V",
  );

  static final _setFeatureDrawableAlpha = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr, ffi.VarArgs<(ffi.Int64, ffi.Int64)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int)>();

  /// from: public final void setFeatureDrawableAlpha(int i, int i1)
  void setFeatureDrawableAlpha(
    int i,
    int i1,
  ) {
    _setFeatureDrawableAlpha(reference.pointer,
            _id_setFeatureDrawableAlpha as jni.JMethodIDPtr, i, i1)
        .check();
  }

  static final _id_getLayoutInflater = _class.instanceMethodId(
    r"getLayoutInflater",
    r"()Landroid/view/LayoutInflater;",
  );

  static final _getLayoutInflater = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.view.LayoutInflater getLayoutInflater()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getLayoutInflater() {
    return _getLayoutInflater(
            reference.pointer, _id_getLayoutInflater as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getMenuInflater = _class.instanceMethodId(
    r"getMenuInflater",
    r"()Landroid/view/MenuInflater;",
  );

  static final _getMenuInflater = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.view.MenuInflater getMenuInflater()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getMenuInflater() {
    return _getMenuInflater(
            reference.pointer, _id_getMenuInflater as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setTheme = _class.instanceMethodId(
    r"setTheme",
    r"(I)V",
  );

  static final _setTheme = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void setTheme(int i)
  void setTheme(
    int i,
  ) {
    _setTheme(reference.pointer, _id_setTheme as jni.JMethodIDPtr, i).check();
  }

  static final _id_onApplyThemeResource = _class.instanceMethodId(
    r"onApplyThemeResource",
    r"(Landroid/content/res/Resources$Theme;IZ)V",
  );

  static final _onApplyThemeResource = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Int64
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, int)>();

  /// from: protected void onApplyThemeResource(android.content.res.Resources$Theme theme, int i, boolean z)
  void onApplyThemeResource(
    jni.JObject theme,
    int i,
    bool z,
  ) {
    _onApplyThemeResource(
            reference.pointer,
            _id_onApplyThemeResource as jni.JMethodIDPtr,
            theme.reference.pointer,
            i,
            z ? 1 : 0)
        .check();
  }

  static final _id_requestPermissions = _class.instanceMethodId(
    r"requestPermissions",
    r"([Ljava/lang/String;I)V",
  );

  static final _requestPermissions = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public final void requestPermissions(java.lang.String[] strings, int i)
  void requestPermissions(
    jni.JArray<jni.JString> strings,
    int i,
  ) {
    _requestPermissions(
            reference.pointer,
            _id_requestPermissions as jni.JMethodIDPtr,
            strings.reference.pointer,
            i)
        .check();
  }

  static final _id_onRequestPermissionsResult = _class.instanceMethodId(
    r"onRequestPermissionsResult",
    r"(I[Ljava/lang/String;[I)V",
  );

  static final _onRequestPermissionsResult = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              int, ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void onRequestPermissionsResult(int i, java.lang.String[] strings, int[] is)
  void onRequestPermissionsResult(
    int i,
    jni.JArray<jni.JString> strings,
    jni.JArray<jni.jint> is0,
  ) {
    _onRequestPermissionsResult(
            reference.pointer,
            _id_onRequestPermissionsResult as jni.JMethodIDPtr,
            i,
            strings.reference.pointer,
            is0.reference.pointer)
        .check();
  }

  static final _id_shouldShowRequestPermissionRationale =
      _class.instanceMethodId(
    r"shouldShowRequestPermissionRationale",
    r"(Ljava/lang/String;)Z",
  );

  static final _shouldShowRequestPermissionRationale =
      ProtectedJniExtensions.lookup<
                  ffi.NativeFunction<
                      jni.JniResult Function(
                          ffi.Pointer<ffi.Void>,
                          jni.JMethodIDPtr,
                          ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
              "globalEnv_CallBooleanMethod")
          .asFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.Pointer<ffi.Void>)>();

  /// from: public boolean shouldShowRequestPermissionRationale(java.lang.String string)
  bool shouldShowRequestPermissionRationale(
    jni.JString string,
  ) {
    return _shouldShowRequestPermissionRationale(
            reference.pointer,
            _id_shouldShowRequestPermissionRationale as jni.JMethodIDPtr,
            string.reference.pointer)
        .boolean;
  }

  static final _id_startActivityForResult = _class.instanceMethodId(
    r"startActivityForResult",
    r"(Landroid/content/Intent;I)V",
  );

  static final _startActivityForResult = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public void startActivityForResult(android.content.Intent intent, int i)
  void startActivityForResult(
    Intent intent,
    int i,
  ) {
    _startActivityForResult(
            reference.pointer,
            _id_startActivityForResult as jni.JMethodIDPtr,
            intent.reference.pointer,
            i)
        .check();
  }

  static final _id_startActivityForResult1 = _class.instanceMethodId(
    r"startActivityForResult",
    r"(Landroid/content/Intent;ILandroid/os/Bundle;)V",
  );

  static final _startActivityForResult1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public void startActivityForResult(android.content.Intent intent, int i, android.os.Bundle bundle)
  void startActivityForResult1(
    Intent intent,
    int i,
    jni.JObject bundle,
  ) {
    _startActivityForResult1(
            reference.pointer,
            _id_startActivityForResult1 as jni.JMethodIDPtr,
            intent.reference.pointer,
            i,
            bundle.reference.pointer)
        .check();
  }

  static final _id_isActivityTransitionRunning = _class.instanceMethodId(
    r"isActivityTransitionRunning",
    r"()Z",
  );

  static final _isActivityTransitionRunning = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isActivityTransitionRunning()
  bool isActivityTransitionRunning() {
    return _isActivityTransitionRunning(reference.pointer,
            _id_isActivityTransitionRunning as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_startIntentSenderForResult = _class.instanceMethodId(
    r"startIntentSenderForResult",
    r"(Landroid/content/IntentSender;ILandroid/content/Intent;III)V",
  );

  static final _startIntentSenderForResult = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Int64,
                        ffi.Int64
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int)>();

  /// from: public void startIntentSenderForResult(android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3)
  void startIntentSenderForResult(
    jni.JObject intentSender,
    int i,
    Intent intent,
    int i1,
    int i2,
    int i3,
  ) {
    _startIntentSenderForResult(
            reference.pointer,
            _id_startIntentSenderForResult as jni.JMethodIDPtr,
            intentSender.reference.pointer,
            i,
            intent.reference.pointer,
            i1,
            i2,
            i3)
        .check();
  }

  static final _id_startIntentSenderForResult1 = _class.instanceMethodId(
    r"startIntentSenderForResult",
    r"(Landroid/content/IntentSender;ILandroid/content/Intent;IIILandroid/os/Bundle;)V",
  );

  static final _startIntentSenderForResult1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Int64,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void startIntentSenderForResult(android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3, android.os.Bundle bundle)
  void startIntentSenderForResult1(
    jni.JObject intentSender,
    int i,
    Intent intent,
    int i1,
    int i2,
    int i3,
    jni.JObject bundle,
  ) {
    _startIntentSenderForResult1(
            reference.pointer,
            _id_startIntentSenderForResult1 as jni.JMethodIDPtr,
            intentSender.reference.pointer,
            i,
            intent.reference.pointer,
            i1,
            i2,
            i3,
            bundle.reference.pointer)
        .check();
  }

  static final _id_startActivity = _class.instanceMethodId(
    r"startActivity",
    r"(Landroid/content/Intent;)V",
  );

  static final _startActivity = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void startActivity(android.content.Intent intent)
  void startActivity(
    Intent intent,
  ) {
    _startActivity(reference.pointer, _id_startActivity as jni.JMethodIDPtr,
            intent.reference.pointer)
        .check();
  }

  static final _id_startActivity1 = _class.instanceMethodId(
    r"startActivity",
    r"(Landroid/content/Intent;Landroid/os/Bundle;)V",
  );

  static final _startActivity1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void startActivity(android.content.Intent intent, android.os.Bundle bundle)
  void startActivity1(
    Intent intent,
    jni.JObject bundle,
  ) {
    _startActivity1(reference.pointer, _id_startActivity1 as jni.JMethodIDPtr,
            intent.reference.pointer, bundle.reference.pointer)
        .check();
  }

  static final _id_startActivities = _class.instanceMethodId(
    r"startActivities",
    r"([Landroid/content/Intent;)V",
  );

  static final _startActivities = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void startActivities(android.content.Intent[] intents)
  void startActivities(
    jni.JArray<Intent> intents,
  ) {
    _startActivities(reference.pointer, _id_startActivities as jni.JMethodIDPtr,
            intents.reference.pointer)
        .check();
  }

  static final _id_startActivities1 = _class.instanceMethodId(
    r"startActivities",
    r"([Landroid/content/Intent;Landroid/os/Bundle;)V",
  );

  static final _startActivities1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void startActivities(android.content.Intent[] intents, android.os.Bundle bundle)
  void startActivities1(
    jni.JArray<Intent> intents,
    jni.JObject bundle,
  ) {
    _startActivities1(
            reference.pointer,
            _id_startActivities1 as jni.JMethodIDPtr,
            intents.reference.pointer,
            bundle.reference.pointer)
        .check();
  }

  static final _id_startIntentSender = _class.instanceMethodId(
    r"startIntentSender",
    r"(Landroid/content/IntentSender;Landroid/content/Intent;III)V",
  );

  static final _startIntentSender = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Int64,
                        ffi.Int64
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int, int, int)>();

  /// from: public void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2)
  void startIntentSender(
    jni.JObject intentSender,
    Intent intent,
    int i,
    int i1,
    int i2,
  ) {
    _startIntentSender(
            reference.pointer,
            _id_startIntentSender as jni.JMethodIDPtr,
            intentSender.reference.pointer,
            intent.reference.pointer,
            i,
            i1,
            i2)
        .check();
  }

  static final _id_startIntentSender1 = _class.instanceMethodId(
    r"startIntentSender",
    r"(Landroid/content/IntentSender;Landroid/content/Intent;IIILandroid/os/Bundle;)V",
  );

  static final _startIntentSender1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Int64,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void startIntentSender(android.content.IntentSender intentSender, android.content.Intent intent, int i, int i1, int i2, android.os.Bundle bundle)
  void startIntentSender1(
    jni.JObject intentSender,
    Intent intent,
    int i,
    int i1,
    int i2,
    jni.JObject bundle,
  ) {
    _startIntentSender1(
            reference.pointer,
            _id_startIntentSender1 as jni.JMethodIDPtr,
            intentSender.reference.pointer,
            intent.reference.pointer,
            i,
            i1,
            i2,
            bundle.reference.pointer)
        .check();
  }

  static final _id_startActivityIfNeeded = _class.instanceMethodId(
    r"startActivityIfNeeded",
    r"(Landroid/content/Intent;I)Z",
  );

  static final _startActivityIfNeeded = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public boolean startActivityIfNeeded(android.content.Intent intent, int i)
  bool startActivityIfNeeded(
    Intent intent,
    int i,
  ) {
    return _startActivityIfNeeded(
            reference.pointer,
            _id_startActivityIfNeeded as jni.JMethodIDPtr,
            intent.reference.pointer,
            i)
        .boolean;
  }

  static final _id_startActivityIfNeeded1 = _class.instanceMethodId(
    r"startActivityIfNeeded",
    r"(Landroid/content/Intent;ILandroid/os/Bundle;)Z",
  );

  static final _startActivityIfNeeded1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean startActivityIfNeeded(android.content.Intent intent, int i, android.os.Bundle bundle)
  bool startActivityIfNeeded1(
    Intent intent,
    int i,
    jni.JObject bundle,
  ) {
    return _startActivityIfNeeded1(
            reference.pointer,
            _id_startActivityIfNeeded1 as jni.JMethodIDPtr,
            intent.reference.pointer,
            i,
            bundle.reference.pointer)
        .boolean;
  }

  static final _id_startNextMatchingActivity = _class.instanceMethodId(
    r"startNextMatchingActivity",
    r"(Landroid/content/Intent;)Z",
  );

  static final _startNextMatchingActivity = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean startNextMatchingActivity(android.content.Intent intent)
  bool startNextMatchingActivity(
    Intent intent,
  ) {
    return _startNextMatchingActivity(
            reference.pointer,
            _id_startNextMatchingActivity as jni.JMethodIDPtr,
            intent.reference.pointer)
        .boolean;
  }

  static final _id_startNextMatchingActivity1 = _class.instanceMethodId(
    r"startNextMatchingActivity",
    r"(Landroid/content/Intent;Landroid/os/Bundle;)Z",
  );

  static final _startNextMatchingActivity1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean startNextMatchingActivity(android.content.Intent intent, android.os.Bundle bundle)
  bool startNextMatchingActivity1(
    Intent intent,
    jni.JObject bundle,
  ) {
    return _startNextMatchingActivity1(
            reference.pointer,
            _id_startNextMatchingActivity1 as jni.JMethodIDPtr,
            intent.reference.pointer,
            bundle.reference.pointer)
        .boolean;
  }

  static final _id_startActivityFromChild = _class.instanceMethodId(
    r"startActivityFromChild",
    r"(Landroid/app/Activity;Landroid/content/Intent;I)V",
  );

  static final _startActivityFromChild = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void startActivityFromChild(android.app.Activity activity, android.content.Intent intent, int i)
  void startActivityFromChild(
    Activity activity,
    Intent intent,
    int i,
  ) {
    _startActivityFromChild(
            reference.pointer,
            _id_startActivityFromChild as jni.JMethodIDPtr,
            activity.reference.pointer,
            intent.reference.pointer,
            i)
        .check();
  }

  static final _id_startActivityFromChild1 = _class.instanceMethodId(
    r"startActivityFromChild",
    r"(Landroid/app/Activity;Landroid/content/Intent;ILandroid/os/Bundle;)V",
  );

  static final _startActivityFromChild1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void startActivityFromChild(android.app.Activity activity, android.content.Intent intent, int i, android.os.Bundle bundle)
  void startActivityFromChild1(
    Activity activity,
    Intent intent,
    int i,
    jni.JObject bundle,
  ) {
    _startActivityFromChild1(
            reference.pointer,
            _id_startActivityFromChild1 as jni.JMethodIDPtr,
            activity.reference.pointer,
            intent.reference.pointer,
            i,
            bundle.reference.pointer)
        .check();
  }

  static final _id_startActivityFromFragment = _class.instanceMethodId(
    r"startActivityFromFragment",
    r"(Landroid/app/Fragment;Landroid/content/Intent;I)V",
  );

  static final _startActivityFromFragment = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  /// from: public void startActivityFromFragment(android.app.Fragment fragment, android.content.Intent intent, int i)
  void startActivityFromFragment(
    jni.JObject fragment,
    Intent intent,
    int i,
  ) {
    _startActivityFromFragment(
            reference.pointer,
            _id_startActivityFromFragment as jni.JMethodIDPtr,
            fragment.reference.pointer,
            intent.reference.pointer,
            i)
        .check();
  }

  static final _id_startActivityFromFragment1 = _class.instanceMethodId(
    r"startActivityFromFragment",
    r"(Landroid/app/Fragment;Landroid/content/Intent;ILandroid/os/Bundle;)V",
  );

  static final _startActivityFromFragment1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void startActivityFromFragment(android.app.Fragment fragment, android.content.Intent intent, int i, android.os.Bundle bundle)
  void startActivityFromFragment1(
    jni.JObject fragment,
    Intent intent,
    int i,
    jni.JObject bundle,
  ) {
    _startActivityFromFragment1(
            reference.pointer,
            _id_startActivityFromFragment1 as jni.JMethodIDPtr,
            fragment.reference.pointer,
            intent.reference.pointer,
            i,
            bundle.reference.pointer)
        .check();
  }

  static final _id_startIntentSenderFromChild = _class.instanceMethodId(
    r"startIntentSenderFromChild",
    r"(Landroid/app/Activity;Landroid/content/IntentSender;ILandroid/content/Intent;III)V",
  );

  static final _startIntentSenderFromChild = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Int64,
                        ffi.Int64
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int)>();

  /// from: public void startIntentSenderFromChild(android.app.Activity activity, android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3)
  void startIntentSenderFromChild(
    Activity activity,
    jni.JObject intentSender,
    int i,
    Intent intent,
    int i1,
    int i2,
    int i3,
  ) {
    _startIntentSenderFromChild(
            reference.pointer,
            _id_startIntentSenderFromChild as jni.JMethodIDPtr,
            activity.reference.pointer,
            intentSender.reference.pointer,
            i,
            intent.reference.pointer,
            i1,
            i2,
            i3)
        .check();
  }

  static final _id_startIntentSenderFromChild1 = _class.instanceMethodId(
    r"startIntentSenderFromChild",
    r"(Landroid/app/Activity;Landroid/content/IntentSender;ILandroid/content/Intent;IIILandroid/os/Bundle;)V",
  );

  static final _startIntentSenderFromChild1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Int64,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void startIntentSenderFromChild(android.app.Activity activity, android.content.IntentSender intentSender, int i, android.content.Intent intent, int i1, int i2, int i3, android.os.Bundle bundle)
  void startIntentSenderFromChild1(
    Activity activity,
    jni.JObject intentSender,
    int i,
    Intent intent,
    int i1,
    int i2,
    int i3,
    jni.JObject bundle,
  ) {
    _startIntentSenderFromChild1(
            reference.pointer,
            _id_startIntentSenderFromChild1 as jni.JMethodIDPtr,
            activity.reference.pointer,
            intentSender.reference.pointer,
            i,
            intent.reference.pointer,
            i1,
            i2,
            i3,
            bundle.reference.pointer)
        .check();
  }

  static final _id_overridePendingTransition = _class.instanceMethodId(
    r"overridePendingTransition",
    r"(II)V",
  );

  static final _overridePendingTransition = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr, ffi.VarArgs<(ffi.Int64, ffi.Int64)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int)>();

  /// from: public void overridePendingTransition(int i, int i1)
  void overridePendingTransition(
    int i,
    int i1,
  ) {
    _overridePendingTransition(reference.pointer,
            _id_overridePendingTransition as jni.JMethodIDPtr, i, i1)
        .check();
  }

  static final _id_overridePendingTransition1 = _class.instanceMethodId(
    r"overridePendingTransition",
    r"(III)V",
  );

  static final _overridePendingTransition1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Int64, ffi.Int64, ffi.Int64)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int, int)>();

  /// from: public void overridePendingTransition(int i, int i1, int i2)
  void overridePendingTransition1(
    int i,
    int i1,
    int i2,
  ) {
    _overridePendingTransition1(reference.pointer,
            _id_overridePendingTransition1 as jni.JMethodIDPtr, i, i1, i2)
        .check();
  }

  static final _id_setResult = _class.instanceMethodId(
    r"setResult",
    r"(I)V",
  );

  static final _setResult = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final void setResult(int i)
  void setResult(
    int i,
  ) {
    _setResult(reference.pointer, _id_setResult as jni.JMethodIDPtr, i).check();
  }

  static final _id_setResult1 = _class.instanceMethodId(
    r"setResult",
    r"(ILandroid/content/Intent;)V",
  );

  static final _setResult1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Int64, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: public final void setResult(int i, android.content.Intent intent)
  void setResult1(
    int i,
    Intent intent,
  ) {
    _setResult1(reference.pointer, _id_setResult1 as jni.JMethodIDPtr, i,
            intent.reference.pointer)
        .check();
  }

  static final _id_getReferrer = _class.instanceMethodId(
    r"getReferrer",
    r"()Landroid/net/Uri;",
  );

  static final _getReferrer = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.net.Uri getReferrer()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getReferrer() {
    return _getReferrer(reference.pointer, _id_getReferrer as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_onProvideReferrer = _class.instanceMethodId(
    r"onProvideReferrer",
    r"()Landroid/net/Uri;",
  );

  static final _onProvideReferrer = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.net.Uri onProvideReferrer()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onProvideReferrer() {
    return _onProvideReferrer(
            reference.pointer, _id_onProvideReferrer as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getCallingPackage = _class.instanceMethodId(
    r"getCallingPackage",
    r"()Ljava/lang/String;",
  );

  static final _getCallingPackage = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getCallingPackage()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getCallingPackage() {
    return _getCallingPackage(
            reference.pointer, _id_getCallingPackage as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getCallingActivity = _class.instanceMethodId(
    r"getCallingActivity",
    r"()Landroid/content/ComponentName;",
  );

  static final _getCallingActivity = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.content.ComponentName getCallingActivity()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getCallingActivity() {
    return _getCallingActivity(
            reference.pointer, _id_getCallingActivity as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_setVisible = _class.instanceMethodId(
    r"setVisible",
    r"(Z)V",
  );

  static final _setVisible = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void setVisible(boolean z)
  void setVisible(
    bool z,
  ) {
    _setVisible(
            reference.pointer, _id_setVisible as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_isFinishing = _class.instanceMethodId(
    r"isFinishing",
    r"()Z",
  );

  static final _isFinishing = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isFinishing()
  bool isFinishing() {
    return _isFinishing(reference.pointer, _id_isFinishing as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isDestroyed = _class.instanceMethodId(
    r"isDestroyed",
    r"()Z",
  );

  static final _isDestroyed = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isDestroyed()
  bool isDestroyed() {
    return _isDestroyed(reference.pointer, _id_isDestroyed as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_isChangingConfigurations = _class.instanceMethodId(
    r"isChangingConfigurations",
    r"()Z",
  );

  static final _isChangingConfigurations = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isChangingConfigurations()
  bool isChangingConfigurations() {
    return _isChangingConfigurations(
            reference.pointer, _id_isChangingConfigurations as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_recreate = _class.instanceMethodId(
    r"recreate",
    r"()V",
  );

  static final _recreate = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void recreate()
  void recreate() {
    _recreate(reference.pointer, _id_recreate as jni.JMethodIDPtr).check();
  }

  static final _id_finish = _class.instanceMethodId(
    r"finish",
    r"()V",
  );

  static final _finish = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void finish()
  void finish() {
    _finish(reference.pointer, _id_finish as jni.JMethodIDPtr).check();
  }

  static final _id_finishAffinity = _class.instanceMethodId(
    r"finishAffinity",
    r"()V",
  );

  static final _finishAffinity = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void finishAffinity()
  void finishAffinity() {
    _finishAffinity(reference.pointer, _id_finishAffinity as jni.JMethodIDPtr)
        .check();
  }

  static final _id_finishFromChild = _class.instanceMethodId(
    r"finishFromChild",
    r"(Landroid/app/Activity;)V",
  );

  static final _finishFromChild = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void finishFromChild(android.app.Activity activity)
  void finishFromChild(
    Activity activity,
  ) {
    _finishFromChild(reference.pointer, _id_finishFromChild as jni.JMethodIDPtr,
            activity.reference.pointer)
        .check();
  }

  static final _id_finishAfterTransition = _class.instanceMethodId(
    r"finishAfterTransition",
    r"()V",
  );

  static final _finishAfterTransition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void finishAfterTransition()
  void finishAfterTransition() {
    _finishAfterTransition(
            reference.pointer, _id_finishAfterTransition as jni.JMethodIDPtr)
        .check();
  }

  static final _id_finishActivity = _class.instanceMethodId(
    r"finishActivity",
    r"(I)V",
  );

  static final _finishActivity = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void finishActivity(int i)
  void finishActivity(
    int i,
  ) {
    _finishActivity(
            reference.pointer, _id_finishActivity as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_finishActivityFromChild = _class.instanceMethodId(
    r"finishActivityFromChild",
    r"(Landroid/app/Activity;I)V",
  );

  static final _finishActivityFromChild = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public void finishActivityFromChild(android.app.Activity activity, int i)
  void finishActivityFromChild(
    Activity activity,
    int i,
  ) {
    _finishActivityFromChild(
            reference.pointer,
            _id_finishActivityFromChild as jni.JMethodIDPtr,
            activity.reference.pointer,
            i)
        .check();
  }

  static final _id_finishAndRemoveTask = _class.instanceMethodId(
    r"finishAndRemoveTask",
    r"()V",
  );

  static final _finishAndRemoveTask = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void finishAndRemoveTask()
  void finishAndRemoveTask() {
    _finishAndRemoveTask(
            reference.pointer, _id_finishAndRemoveTask as jni.JMethodIDPtr)
        .check();
  }

  static final _id_releaseInstance = _class.instanceMethodId(
    r"releaseInstance",
    r"()Z",
  );

  static final _releaseInstance = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean releaseInstance()
  bool releaseInstance() {
    return _releaseInstance(
            reference.pointer, _id_releaseInstance as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_onActivityResult = _class.instanceMethodId(
    r"onActivityResult",
    r"(IILandroid/content/Intent;)V",
  );

  static final _onActivityResult = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Int64,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              int, int, ffi.Pointer<ffi.Void>)>();

  /// from: protected void onActivityResult(int i, int i1, android.content.Intent intent)
  void onActivityResult(
    int i,
    int i1,
    Intent intent,
  ) {
    _onActivityResult(
            reference.pointer,
            _id_onActivityResult as jni.JMethodIDPtr,
            i,
            i1,
            intent.reference.pointer)
        .check();
  }

  static final _id_onActivityReenter = _class.instanceMethodId(
    r"onActivityReenter",
    r"(ILandroid/content/Intent;)V",
  );

  static final _onActivityReenter = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Int64, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: public void onActivityReenter(int i, android.content.Intent intent)
  void onActivityReenter(
    int i,
    Intent intent,
  ) {
    _onActivityReenter(
            reference.pointer,
            _id_onActivityReenter as jni.JMethodIDPtr,
            i,
            intent.reference.pointer)
        .check();
  }

  static final _id_createPendingResult = _class.instanceMethodId(
    r"createPendingResult",
    r"(ILandroid/content/Intent;I)Landroid/app/PendingIntent;",
  );

  static final _createPendingResult = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.app.PendingIntent createPendingResult(int i, android.content.Intent intent, int i1)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject createPendingResult(
    int i,
    Intent intent,
    int i1,
  ) {
    return _createPendingResult(
            reference.pointer,
            _id_createPendingResult as jni.JMethodIDPtr,
            i,
            intent.reference.pointer,
            i1)
        .object(const jni.JObjectType());
  }

  static final _id_setRequestedOrientation = _class.instanceMethodId(
    r"setRequestedOrientation",
    r"(I)V",
  );

  static final _setRequestedOrientation = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void setRequestedOrientation(int i)
  void setRequestedOrientation(
    int i,
  ) {
    _setRequestedOrientation(reference.pointer,
            _id_setRequestedOrientation as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_getRequestedOrientation = _class.instanceMethodId(
    r"getRequestedOrientation",
    r"()I",
  );

  static final _getRequestedOrientation = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getRequestedOrientation()
  int getRequestedOrientation() {
    return _getRequestedOrientation(
            reference.pointer, _id_getRequestedOrientation as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_getTaskId = _class.instanceMethodId(
    r"getTaskId",
    r"()I",
  );

  static final _getTaskId = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getTaskId()
  int getTaskId() {
    return _getTaskId(reference.pointer, _id_getTaskId as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_isTaskRoot = _class.instanceMethodId(
    r"isTaskRoot",
    r"()Z",
  );

  static final _isTaskRoot = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isTaskRoot()
  bool isTaskRoot() {
    return _isTaskRoot(reference.pointer, _id_isTaskRoot as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_moveTaskToBack = _class.instanceMethodId(
    r"moveTaskToBack",
    r"(Z)Z",
  );

  static final _moveTaskToBack = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public boolean moveTaskToBack(boolean z)
  bool moveTaskToBack(
    bool z,
  ) {
    return _moveTaskToBack(reference.pointer,
            _id_moveTaskToBack as jni.JMethodIDPtr, z ? 1 : 0)
        .boolean;
  }

  static final _id_getLocalClassName = _class.instanceMethodId(
    r"getLocalClassName",
    r"()Ljava/lang/String;",
  );

  static final _getLocalClassName = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String getLocalClassName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getLocalClassName() {
    return _getLocalClassName(
            reference.pointer, _id_getLocalClassName as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_getComponentName = _class.instanceMethodId(
    r"getComponentName",
    r"()Landroid/content/ComponentName;",
  );

  static final _getComponentName = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.content.ComponentName getComponentName()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getComponentName() {
    return _getComponentName(
            reference.pointer, _id_getComponentName as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getPreferences = _class.instanceMethodId(
    r"getPreferences",
    r"(I)Landroid/content/SharedPreferences;",
  );

  static final _getPreferences = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public android.content.SharedPreferences getPreferences(int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getPreferences(
    int i,
  ) {
    return _getPreferences(
            reference.pointer, _id_getPreferences as jni.JMethodIDPtr, i)
        .object(const jni.JObjectType());
  }

  static final _id_isLaunchedFromBubble = _class.instanceMethodId(
    r"isLaunchedFromBubble",
    r"()Z",
  );

  static final _isLaunchedFromBubble = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isLaunchedFromBubble()
  bool isLaunchedFromBubble() {
    return _isLaunchedFromBubble(
            reference.pointer, _id_isLaunchedFromBubble as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_getSystemService = _class.instanceMethodId(
    r"getSystemService",
    r"(Ljava/lang/String;)Ljava/lang/Object;",
  );

  static final _getSystemService = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.lang.Object getSystemService(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getSystemService(
    jni.JString string,
  ) {
    return _getSystemService(reference.pointer,
            _id_getSystemService as jni.JMethodIDPtr, string.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_setTitle = _class.instanceMethodId(
    r"setTitle",
    r"(Ljava/lang/CharSequence;)V",
  );

  static final _setTitle = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setTitle(java.lang.CharSequence charSequence)
  void setTitle(
    jni.JObject charSequence,
  ) {
    _setTitle(reference.pointer, _id_setTitle as jni.JMethodIDPtr,
            charSequence.reference.pointer)
        .check();
  }

  static final _id_setTitle1 = _class.instanceMethodId(
    r"setTitle",
    r"(I)V",
  );

  static final _setTitle1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void setTitle(int i)
  void setTitle1(
    int i,
  ) {
    _setTitle1(reference.pointer, _id_setTitle1 as jni.JMethodIDPtr, i).check();
  }

  static final _id_setTitleColor = _class.instanceMethodId(
    r"setTitleColor",
    r"(I)V",
  );

  static final _setTitleColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void setTitleColor(int i)
  void setTitleColor(
    int i,
  ) {
    _setTitleColor(reference.pointer, _id_setTitleColor as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_getTitle = _class.instanceMethodId(
    r"getTitle",
    r"()Ljava/lang/CharSequence;",
  );

  static final _getTitle = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.CharSequence getTitle()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getTitle() {
    return _getTitle(reference.pointer, _id_getTitle as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_getTitleColor = _class.instanceMethodId(
    r"getTitleColor",
    r"()I",
  );

  static final _getTitleColor = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final int getTitleColor()
  int getTitleColor() {
    return _getTitleColor(
            reference.pointer, _id_getTitleColor as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_onTitleChanged = _class.instanceMethodId(
    r"onTitleChanged",
    r"(Ljava/lang/CharSequence;I)V",
  );

  static final _onTitleChanged = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: protected void onTitleChanged(java.lang.CharSequence charSequence, int i)
  void onTitleChanged(
    jni.JObject charSequence,
    int i,
  ) {
    _onTitleChanged(reference.pointer, _id_onTitleChanged as jni.JMethodIDPtr,
            charSequence.reference.pointer, i)
        .check();
  }

  static final _id_onChildTitleChanged = _class.instanceMethodId(
    r"onChildTitleChanged",
    r"(Landroid/app/Activity;Ljava/lang/CharSequence;)V",
  );

  static final _onChildTitleChanged = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: protected void onChildTitleChanged(android.app.Activity activity, java.lang.CharSequence charSequence)
  void onChildTitleChanged(
    Activity activity,
    jni.JObject charSequence,
  ) {
    _onChildTitleChanged(
            reference.pointer,
            _id_onChildTitleChanged as jni.JMethodIDPtr,
            activity.reference.pointer,
            charSequence.reference.pointer)
        .check();
  }

  static final _id_setTaskDescription = _class.instanceMethodId(
    r"setTaskDescription",
    r"(Landroid/app/ActivityManager$TaskDescription;)V",
  );

  static final _setTaskDescription = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setTaskDescription(android.app.ActivityManager$TaskDescription taskDescription)
  void setTaskDescription(
    jni.JObject taskDescription,
  ) {
    _setTaskDescription(
            reference.pointer,
            _id_setTaskDescription as jni.JMethodIDPtr,
            taskDescription.reference.pointer)
        .check();
  }

  static final _id_setProgressBarVisibility = _class.instanceMethodId(
    r"setProgressBarVisibility",
    r"(Z)V",
  );

  static final _setProgressBarVisibility = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final void setProgressBarVisibility(boolean z)
  void setProgressBarVisibility(
    bool z,
  ) {
    _setProgressBarVisibility(reference.pointer,
            _id_setProgressBarVisibility as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setProgressBarIndeterminateVisibility =
      _class.instanceMethodId(
    r"setProgressBarIndeterminateVisibility",
    r"(Z)V",
  );

  static final _setProgressBarIndeterminateVisibility =
      ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallVoidMethod")
          .asFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final void setProgressBarIndeterminateVisibility(boolean z)
  void setProgressBarIndeterminateVisibility(
    bool z,
  ) {
    _setProgressBarIndeterminateVisibility(
            reference.pointer,
            _id_setProgressBarIndeterminateVisibility as jni.JMethodIDPtr,
            z ? 1 : 0)
        .check();
  }

  static final _id_setProgressBarIndeterminate = _class.instanceMethodId(
    r"setProgressBarIndeterminate",
    r"(Z)V",
  );

  static final _setProgressBarIndeterminate = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final void setProgressBarIndeterminate(boolean z)
  void setProgressBarIndeterminate(
    bool z,
  ) {
    _setProgressBarIndeterminate(reference.pointer,
            _id_setProgressBarIndeterminate as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setProgress = _class.instanceMethodId(
    r"setProgress",
    r"(I)V",
  );

  static final _setProgress = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final void setProgress(int i)
  void setProgress(
    int i,
  ) {
    _setProgress(reference.pointer, _id_setProgress as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_setSecondaryProgress = _class.instanceMethodId(
    r"setSecondaryProgress",
    r"(I)V",
  );

  static final _setSecondaryProgress = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final void setSecondaryProgress(int i)
  void setSecondaryProgress(
    int i,
  ) {
    _setSecondaryProgress(
            reference.pointer, _id_setSecondaryProgress as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_setVolumeControlStream = _class.instanceMethodId(
    r"setVolumeControlStream",
    r"(I)V",
  );

  static final _setVolumeControlStream = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public final void setVolumeControlStream(int i)
  void setVolumeControlStream(
    int i,
  ) {
    _setVolumeControlStream(reference.pointer,
            _id_setVolumeControlStream as jni.JMethodIDPtr, i)
        .check();
  }

  static final _id_getVolumeControlStream = _class.instanceMethodId(
    r"getVolumeControlStream",
    r"()I",
  );

  static final _getVolumeControlStream = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final int getVolumeControlStream()
  int getVolumeControlStream() {
    return _getVolumeControlStream(
            reference.pointer, _id_getVolumeControlStream as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_setMediaController = _class.instanceMethodId(
    r"setMediaController",
    r"(Landroid/media/session/MediaController;)V",
  );

  static final _setMediaController = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void setMediaController(android.media.session.MediaController mediaController)
  void setMediaController(
    jni.JObject mediaController,
  ) {
    _setMediaController(
            reference.pointer,
            _id_setMediaController as jni.JMethodIDPtr,
            mediaController.reference.pointer)
        .check();
  }

  static final _id_getMediaController = _class.instanceMethodId(
    r"getMediaController",
    r"()Landroid/media/session/MediaController;",
  );

  static final _getMediaController = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final android.media.session.MediaController getMediaController()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getMediaController() {
    return _getMediaController(
            reference.pointer, _id_getMediaController as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }

  static final _id_runOnUiThread = _class.instanceMethodId(
    r"runOnUiThread",
    r"(Ljava/lang/Runnable;)V",
  );

  static final _runOnUiThread = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final void runOnUiThread(java.lang.Runnable runnable)
  void runOnUiThread(
    jni.JObject runnable,
  ) {
    _runOnUiThread(reference.pointer, _id_runOnUiThread as jni.JMethodIDPtr,
            runnable.reference.pointer)
        .check();
  }

  static final _id_onCreateView = _class.instanceMethodId(
    r"onCreateView",
    r"(Ljava/lang/String;Landroid/content/Context;Landroid/util/AttributeSet;)Landroid/view/View;",
  );

  static final _onCreateView = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.view.View onCreateView(java.lang.String string, android.content.Context context, android.util.AttributeSet attributeSet)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onCreateView(
    jni.JString string,
    Context context,
    jni.JObject attributeSet,
  ) {
    return _onCreateView(
            reference.pointer,
            _id_onCreateView as jni.JMethodIDPtr,
            string.reference.pointer,
            context.reference.pointer,
            attributeSet.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_onCreateView1 = _class.instanceMethodId(
    r"onCreateView",
    r"(Landroid/view/View;Ljava/lang/String;Landroid/content/Context;Landroid/util/AttributeSet;)Landroid/view/View;",
  );

  static final _onCreateView1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.view.View onCreateView(android.view.View view, java.lang.String string, android.content.Context context, android.util.AttributeSet attributeSet)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onCreateView1(
    jni.JObject view,
    jni.JString string,
    Context context,
    jni.JObject attributeSet,
  ) {
    return _onCreateView1(
            reference.pointer,
            _id_onCreateView1 as jni.JMethodIDPtr,
            view.reference.pointer,
            string.reference.pointer,
            context.reference.pointer,
            attributeSet.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_dump = _class.instanceMethodId(
    r"dump",
    r"(Ljava/lang/String;Ljava/io/FileDescriptor;Ljava/io/PrintWriter;[Ljava/lang/String;)V",
  );

  static final _dump = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void dump(java.lang.String string, java.io.FileDescriptor fileDescriptor, java.io.PrintWriter printWriter, java.lang.String[] strings)
  void dump(
    jni.JString string,
    jni.JObject fileDescriptor,
    jni.JObject printWriter,
    jni.JArray<jni.JString> strings,
  ) {
    _dump(
            reference.pointer,
            _id_dump as jni.JMethodIDPtr,
            string.reference.pointer,
            fileDescriptor.reference.pointer,
            printWriter.reference.pointer,
            strings.reference.pointer)
        .check();
  }

  static final _id_isImmersive = _class.instanceMethodId(
    r"isImmersive",
    r"()Z",
  );

  static final _isImmersive = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public boolean isImmersive()
  bool isImmersive() {
    return _isImmersive(reference.pointer, _id_isImmersive as jni.JMethodIDPtr)
        .boolean;
  }

  static final _id_setTranslucent = _class.instanceMethodId(
    r"setTranslucent",
    r"(Z)Z",
  );

  static final _setTranslucent = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public boolean setTranslucent(boolean z)
  bool setTranslucent(
    bool z,
  ) {
    return _setTranslucent(reference.pointer,
            _id_setTranslucent as jni.JMethodIDPtr, z ? 1 : 0)
        .boolean;
  }

  static final _id_requestVisibleBehind = _class.instanceMethodId(
    r"requestVisibleBehind",
    r"(Z)Z",
  );

  static final _requestVisibleBehind = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public boolean requestVisibleBehind(boolean z)
  bool requestVisibleBehind(
    bool z,
  ) {
    return _requestVisibleBehind(reference.pointer,
            _id_requestVisibleBehind as jni.JMethodIDPtr, z ? 1 : 0)
        .boolean;
  }

  static final _id_onVisibleBehindCanceled = _class.instanceMethodId(
    r"onVisibleBehindCanceled",
    r"()V",
  );

  static final _onVisibleBehindCanceled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void onVisibleBehindCanceled()
  void onVisibleBehindCanceled() {
    _onVisibleBehindCanceled(
            reference.pointer, _id_onVisibleBehindCanceled as jni.JMethodIDPtr)
        .check();
  }

  static final _id_onEnterAnimationComplete = _class.instanceMethodId(
    r"onEnterAnimationComplete",
    r"()V",
  );

  static final _onEnterAnimationComplete = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void onEnterAnimationComplete()
  void onEnterAnimationComplete() {
    _onEnterAnimationComplete(
            reference.pointer, _id_onEnterAnimationComplete as jni.JMethodIDPtr)
        .check();
  }

  static final _id_setImmersive = _class.instanceMethodId(
    r"setImmersive",
    r"(Z)V",
  );

  static final _setImmersive = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void setImmersive(boolean z)
  void setImmersive(
    bool z,
  ) {
    _setImmersive(
            reference.pointer, _id_setImmersive as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setVrModeEnabled = _class.instanceMethodId(
    r"setVrModeEnabled",
    r"(ZLandroid/content/ComponentName;)V",
  );

  static final _setVrModeEnabled = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Int64, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              int, ffi.Pointer<ffi.Void>)>();

  /// from: public void setVrModeEnabled(boolean z, android.content.ComponentName componentName)
  void setVrModeEnabled(
    bool z,
    jni.JObject componentName,
  ) {
    _setVrModeEnabled(
            reference.pointer,
            _id_setVrModeEnabled as jni.JMethodIDPtr,
            z ? 1 : 0,
            componentName.reference.pointer)
        .check();
  }

  static final _id_startActionMode = _class.instanceMethodId(
    r"startActionMode",
    r"(Landroid/view/ActionMode$Callback;)Landroid/view/ActionMode;",
  );

  static final _startActionMode = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.view.ActionMode startActionMode(android.view.ActionMode$Callback callback)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject startActionMode(
    jni.JObject callback,
  ) {
    return _startActionMode(reference.pointer,
            _id_startActionMode as jni.JMethodIDPtr, callback.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_startActionMode1 = _class.instanceMethodId(
    r"startActionMode",
    r"(Landroid/view/ActionMode$Callback;I)Landroid/view/ActionMode;",
  );

  static final _startActionMode1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.view.ActionMode startActionMode(android.view.ActionMode$Callback callback, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject startActionMode1(
    jni.JObject callback,
    int i,
  ) {
    return _startActionMode1(
            reference.pointer,
            _id_startActionMode1 as jni.JMethodIDPtr,
            callback.reference.pointer,
            i)
        .object(const jni.JObjectType());
  }

  static final _id_onWindowStartingActionMode = _class.instanceMethodId(
    r"onWindowStartingActionMode",
    r"(Landroid/view/ActionMode$Callback;)Landroid/view/ActionMode;",
  );

  static final _onWindowStartingActionMode = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback callback)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onWindowStartingActionMode(
    jni.JObject callback,
  ) {
    return _onWindowStartingActionMode(
            reference.pointer,
            _id_onWindowStartingActionMode as jni.JMethodIDPtr,
            callback.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_onWindowStartingActionMode1 = _class.instanceMethodId(
    r"onWindowStartingActionMode",
    r"(Landroid/view/ActionMode$Callback;I)Landroid/view/ActionMode;",
  );

  static final _onWindowStartingActionMode1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback callback, int i)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject onWindowStartingActionMode1(
    jni.JObject callback,
    int i,
  ) {
    return _onWindowStartingActionMode1(
            reference.pointer,
            _id_onWindowStartingActionMode1 as jni.JMethodIDPtr,
            callback.reference.pointer,
            i)
        .object(const jni.JObjectType());
  }

  static final _id_onActionModeStarted = _class.instanceMethodId(
    r"onActionModeStarted",
    r"(Landroid/view/ActionMode;)V",
  );

  static final _onActionModeStarted = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onActionModeStarted(android.view.ActionMode actionMode)
  void onActionModeStarted(
    jni.JObject actionMode,
  ) {
    _onActionModeStarted(
            reference.pointer,
            _id_onActionModeStarted as jni.JMethodIDPtr,
            actionMode.reference.pointer)
        .check();
  }

  static final _id_onActionModeFinished = _class.instanceMethodId(
    r"onActionModeFinished",
    r"(Landroid/view/ActionMode;)V",
  );

  static final _onActionModeFinished = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void onActionModeFinished(android.view.ActionMode actionMode)
  void onActionModeFinished(
    jni.JObject actionMode,
  ) {
    _onActionModeFinished(
            reference.pointer,
            _id_onActionModeFinished as jni.JMethodIDPtr,
            actionMode.reference.pointer)
        .check();
  }

  static final _id_shouldUpRecreateTask = _class.instanceMethodId(
    r"shouldUpRecreateTask",
    r"(Landroid/content/Intent;)Z",
  );

  static final _shouldUpRecreateTask = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean shouldUpRecreateTask(android.content.Intent intent)
  bool shouldUpRecreateTask(
    Intent intent,
  ) {
    return _shouldUpRecreateTask(
            reference.pointer,
            _id_shouldUpRecreateTask as jni.JMethodIDPtr,
            intent.reference.pointer)
        .boolean;
  }

  static final _id_navigateUpTo = _class.instanceMethodId(
    r"navigateUpTo",
    r"(Landroid/content/Intent;)Z",
  );

  static final _navigateUpTo = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean navigateUpTo(android.content.Intent intent)
  bool navigateUpTo(
    Intent intent,
  ) {
    return _navigateUpTo(reference.pointer,
            _id_navigateUpTo as jni.JMethodIDPtr, intent.reference.pointer)
        .boolean;
  }

  static final _id_navigateUpToFromChild = _class.instanceMethodId(
    r"navigateUpToFromChild",
    r"(Landroid/app/Activity;Landroid/content/Intent;)Z",
  );

  static final _navigateUpToFromChild = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public boolean navigateUpToFromChild(android.app.Activity activity, android.content.Intent intent)
  bool navigateUpToFromChild(
    Activity activity,
    Intent intent,
  ) {
    return _navigateUpToFromChild(
            reference.pointer,
            _id_navigateUpToFromChild as jni.JMethodIDPtr,
            activity.reference.pointer,
            intent.reference.pointer)
        .boolean;
  }

  static final _id_getParentActivityIntent = _class.instanceMethodId(
    r"getParentActivityIntent",
    r"()Landroid/content/Intent;",
  );

  static final _getParentActivityIntent = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.content.Intent getParentActivityIntent()
  /// The returned object must be released after use, by calling the [release] method.
  Intent getParentActivityIntent() {
    return _getParentActivityIntent(
            reference.pointer, _id_getParentActivityIntent as jni.JMethodIDPtr)
        .object(const $IntentType());
  }

  static final _id_setEnterSharedElementCallback = _class.instanceMethodId(
    r"setEnterSharedElementCallback",
    r"(Landroid/app/SharedElementCallback;)V",
  );

  static final _setEnterSharedElementCallback = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setEnterSharedElementCallback(android.app.SharedElementCallback sharedElementCallback)
  void setEnterSharedElementCallback(
    jni.JObject sharedElementCallback,
  ) {
    _setEnterSharedElementCallback(
            reference.pointer,
            _id_setEnterSharedElementCallback as jni.JMethodIDPtr,
            sharedElementCallback.reference.pointer)
        .check();
  }

  static final _id_setExitSharedElementCallback = _class.instanceMethodId(
    r"setExitSharedElementCallback",
    r"(Landroid/app/SharedElementCallback;)V",
  );

  static final _setExitSharedElementCallback = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JThrowablePtr Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void setExitSharedElementCallback(android.app.SharedElementCallback sharedElementCallback)
  void setExitSharedElementCallback(
    jni.JObject sharedElementCallback,
  ) {
    _setExitSharedElementCallback(
            reference.pointer,
            _id_setExitSharedElementCallback as jni.JMethodIDPtr,
            sharedElementCallback.reference.pointer)
        .check();
  }

  static final _id_postponeEnterTransition = _class.instanceMethodId(
    r"postponeEnterTransition",
    r"()V",
  );

  static final _postponeEnterTransition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void postponeEnterTransition()
  void postponeEnterTransition() {
    _postponeEnterTransition(
            reference.pointer, _id_postponeEnterTransition as jni.JMethodIDPtr)
        .check();
  }

  static final _id_startPostponedEnterTransition = _class.instanceMethodId(
    r"startPostponedEnterTransition",
    r"()V",
  );

  static final _startPostponedEnterTransition = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void startPostponedEnterTransition()
  void startPostponedEnterTransition() {
    _startPostponedEnterTransition(reference.pointer,
            _id_startPostponedEnterTransition as jni.JMethodIDPtr)
        .check();
  }

  static final _id_requestDragAndDropPermissions = _class.instanceMethodId(
    r"requestDragAndDropPermissions",
    r"(Landroid/view/DragEvent;)Landroid/view/DragAndDropPermissions;",
  );

  static final _requestDragAndDropPermissions = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public android.view.DragAndDropPermissions requestDragAndDropPermissions(android.view.DragEvent dragEvent)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject requestDragAndDropPermissions(
    jni.JObject dragEvent,
  ) {
    return _requestDragAndDropPermissions(
            reference.pointer,
            _id_requestDragAndDropPermissions as jni.JMethodIDPtr,
            dragEvent.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_startLockTask = _class.instanceMethodId(
    r"startLockTask",
    r"()V",
  );

  static final _startLockTask = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void startLockTask()
  void startLockTask() {
    _startLockTask(reference.pointer, _id_startLockTask as jni.JMethodIDPtr)
        .check();
  }

  static final _id_stopLockTask = _class.instanceMethodId(
    r"stopLockTask",
    r"()V",
  );

  static final _stopLockTask = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void stopLockTask()
  void stopLockTask() {
    _stopLockTask(reference.pointer, _id_stopLockTask as jni.JMethodIDPtr)
        .check();
  }

  static final _id_showLockTaskEscapeMessage = _class.instanceMethodId(
    r"showLockTaskEscapeMessage",
    r"()V",
  );

  static final _showLockTaskEscapeMessage = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public void showLockTaskEscapeMessage()
  void showLockTaskEscapeMessage() {
    _showLockTaskEscapeMessage(reference.pointer,
            _id_showLockTaskEscapeMessage as jni.JMethodIDPtr)
        .check();
  }

  static final _id_setRecentsScreenshotEnabled = _class.instanceMethodId(
    r"setRecentsScreenshotEnabled",
    r"(Z)V",
  );

  static final _setRecentsScreenshotEnabled = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void setRecentsScreenshotEnabled(boolean z)
  void setRecentsScreenshotEnabled(
    bool z,
  ) {
    _setRecentsScreenshotEnabled(reference.pointer,
            _id_setRecentsScreenshotEnabled as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setShowWhenLocked = _class.instanceMethodId(
    r"setShowWhenLocked",
    r"(Z)V",
  );

  static final _setShowWhenLocked = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void setShowWhenLocked(boolean z)
  void setShowWhenLocked(
    bool z,
  ) {
    _setShowWhenLocked(reference.pointer,
            _id_setShowWhenLocked as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setInheritShowWhenLocked = _class.instanceMethodId(
    r"setInheritShowWhenLocked",
    r"(Z)V",
  );

  static final _setInheritShowWhenLocked = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void setInheritShowWhenLocked(boolean z)
  void setInheritShowWhenLocked(
    bool z,
  ) {
    _setInheritShowWhenLocked(reference.pointer,
            _id_setInheritShowWhenLocked as jni.JMethodIDPtr, z ? 1 : 0)
        .check();
  }

  static final _id_setTurnScreenOn = _class.instanceMethodId(
    r"setTurnScreenOn",
    r"(Z)V",
  );

  static final _setTurnScreenOn = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JThrowablePtr Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallVoidMethod")
      .asFunction<
          jni.JThrowablePtr Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public void setTurnScreenOn(boolean z)
  void setTurnScreenOn(
    bool z,
  ) {
    _setTurnScreenOn(reference.pointer, _id_setTurnScreenOn as jni.JMethodIDPtr,
            z ? 1 : 0)
        .check();
  }

  static final _id_getOnBackInvokedDispatcher = _class.instanceMethodId(
    r"getOnBackInvokedDispatcher",
    r"()Landroid/window/OnBackInvokedDispatcher;",
  );

  static final _getOnBackInvokedDispatcher = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public android.window.OnBackInvokedDispatcher getOnBackInvokedDispatcher()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject getOnBackInvokedDispatcher() {
    return _getOnBackInvokedDispatcher(reference.pointer,
            _id_getOnBackInvokedDispatcher as jni.JMethodIDPtr)
        .object(const jni.JObjectType());
  }
}

final class $ActivityType extends jni.JObjType<Activity> {
  const $ActivityType();

  @override
  String get signature => r"Landroid/app/Activity;";

  @override
  Activity fromReference(jni.JReference reference) =>
      Activity.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ActivityType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ActivityType) && other is $ActivityType;
  }
}

/// from: java.time.Instant
class Instant extends jni.JObject {
  @override
  late final jni.JObjType<Instant> $type = type;

  Instant.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(r"java/time/Instant");

  /// The type which includes information such as the signature of this class.
  static const type = $InstantType();
  static final _id_EPOCH = _class.staticFieldId(
    r"EPOCH",
    r"Ljava/time/Instant;",
  );

  /// from: static public final java.time.Instant EPOCH
  /// The returned object must be released after use, by calling the [release] method.
  static Instant get EPOCH => _id_EPOCH.get(_class, const $InstantType());

  static final _id_MAX = _class.staticFieldId(
    r"MAX",
    r"Ljava/time/Instant;",
  );

  /// from: static public final java.time.Instant MAX
  /// The returned object must be released after use, by calling the [release] method.
  static Instant get MAX => _id_MAX.get(_class, const $InstantType());

  static final _id_MIN = _class.staticFieldId(
    r"MIN",
    r"Ljava/time/Instant;",
  );

  /// from: static public final java.time.Instant MIN
  /// The returned object must be released after use, by calling the [release] method.
  static Instant get MIN => _id_MIN.get(_class, const $InstantType());

  static final _id_now = _class.staticMethodId(
    r"now",
    r"()Ljava/time/Instant;",
  );

  static final _now = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: static public java.time.Instant now()
  /// The returned object must be released after use, by calling the [release] method.
  static Instant now() {
    return _now(_class.reference.pointer, _id_now as jni.JMethodIDPtr)
        .object(const $InstantType());
  }

  static final _id_now1 = _class.staticMethodId(
    r"now",
    r"(Ljava/time/Clock;)Ljava/time/Instant;",
  );

  static final _now1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.time.Instant now(java.time.Clock clock)
  /// The returned object must be released after use, by calling the [release] method.
  static Instant now1(
    jni.JObject clock,
  ) {
    return _now1(_class.reference.pointer, _id_now1 as jni.JMethodIDPtr,
            clock.reference.pointer)
        .object(const $InstantType());
  }

  static final _id_ofEpochSecond = _class.staticMethodId(
    r"ofEpochSecond",
    r"(J)Ljava/time/Instant;",
  );

  static final _ofEpochSecond = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr, ffi.VarArgs<(ffi.Int64,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: static public java.time.Instant ofEpochSecond(long j)
  /// The returned object must be released after use, by calling the [release] method.
  static Instant ofEpochSecond(
    int j,
  ) {
    return _ofEpochSecond(
            _class.reference.pointer, _id_ofEpochSecond as jni.JMethodIDPtr, j)
        .object(const $InstantType());
  }

  static final _id_ofEpochSecond1 = _class.staticMethodId(
    r"ofEpochSecond",
    r"(JJ)Ljava/time/Instant;",
  );

  static final _ofEpochSecond1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr, ffi.VarArgs<(ffi.Int64, ffi.Int64)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int, int)>();

  /// from: static public java.time.Instant ofEpochSecond(long j, long j1)
  /// The returned object must be released after use, by calling the [release] method.
  static Instant ofEpochSecond1(
    int j,
    int j1,
  ) {
    return _ofEpochSecond1(_class.reference.pointer,
            _id_ofEpochSecond1 as jni.JMethodIDPtr, j, j1)
        .object(const $InstantType());
  }

  static final _id_ofEpochMilli = _class.staticMethodId(
    r"ofEpochMilli",
    r"(J)Ljava/time/Instant;",
  );

  static final _ofEpochMilli = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr, ffi.VarArgs<(ffi.Int64,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: static public java.time.Instant ofEpochMilli(long j)
  /// The returned object must be released after use, by calling the [release] method.
  static Instant ofEpochMilli(
    int j,
  ) {
    return _ofEpochMilli(
            _class.reference.pointer, _id_ofEpochMilli as jni.JMethodIDPtr, j)
        .object(const $InstantType());
  }

  static final _id_from = _class.staticMethodId(
    r"from",
    r"(Ljava/time/temporal/TemporalAccessor;)Ljava/time/Instant;",
  );

  static final _from = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.time.Instant from(java.time.temporal.TemporalAccessor temporalAccessor)
  /// The returned object must be released after use, by calling the [release] method.
  static Instant from(
    jni.JObject temporalAccessor,
  ) {
    return _from(_class.reference.pointer, _id_from as jni.JMethodIDPtr,
            temporalAccessor.reference.pointer)
        .object(const $InstantType());
  }

  static final _id_parse = _class.staticMethodId(
    r"parse",
    r"(Ljava/lang/CharSequence;)Ljava/time/Instant;",
  );

  static final _parse = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public java.time.Instant parse(java.lang.CharSequence charSequence)
  /// The returned object must be released after use, by calling the [release] method.
  static Instant parse(
    jni.JObject charSequence,
  ) {
    return _parse(_class.reference.pointer, _id_parse as jni.JMethodIDPtr,
            charSequence.reference.pointer)
        .object(const $InstantType());
  }

  static final _id_isSupported = _class.instanceMethodId(
    r"isSupported",
    r"(Ljava/time/temporal/TemporalField;)Z",
  );

  static final _isSupported = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isSupported(java.time.temporal.TemporalField temporalField)
  bool isSupported(
    jni.JObject temporalField,
  ) {
    return _isSupported(reference.pointer, _id_isSupported as jni.JMethodIDPtr,
            temporalField.reference.pointer)
        .boolean;
  }

  static final _id_isSupported1 = _class.instanceMethodId(
    r"isSupported",
    r"(Ljava/time/temporal/TemporalUnit;)Z",
  );

  static final _isSupported1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isSupported(java.time.temporal.TemporalUnit temporalUnit)
  bool isSupported1(
    jni.JObject temporalUnit,
  ) {
    return _isSupported1(
            reference.pointer,
            _id_isSupported1 as jni.JMethodIDPtr,
            temporalUnit.reference.pointer)
        .boolean;
  }

  static final _id_range = _class.instanceMethodId(
    r"range",
    r"(Ljava/time/temporal/TemporalField;)Ljava/time/temporal/ValueRange;",
  );

  static final _range = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.temporal.ValueRange range(java.time.temporal.TemporalField temporalField)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject range(
    jni.JObject temporalField,
  ) {
    return _range(reference.pointer, _id_range as jni.JMethodIDPtr,
            temporalField.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_get0 = _class.instanceMethodId(
    r"get",
    r"(Ljava/time/temporal/TemporalField;)I",
  );

  static final _get0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public int get(java.time.temporal.TemporalField temporalField)
  int get0(
    jni.JObject temporalField,
  ) {
    return _get0(reference.pointer, _id_get0 as jni.JMethodIDPtr,
            temporalField.reference.pointer)
        .integer;
  }

  static final _id_getLong = _class.instanceMethodId(
    r"getLong",
    r"(Ljava/time/temporal/TemporalField;)J",
  );

  static final _getLong = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallLongMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public long getLong(java.time.temporal.TemporalField temporalField)
  int getLong(
    jni.JObject temporalField,
  ) {
    return _getLong(reference.pointer, _id_getLong as jni.JMethodIDPtr,
            temporalField.reference.pointer)
        .long;
  }

  static final _id_getEpochSecond = _class.instanceMethodId(
    r"getEpochSecond",
    r"()J",
  );

  static final _getEpochSecond = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallLongMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public long getEpochSecond()
  int getEpochSecond() {
    return _getEpochSecond(
            reference.pointer, _id_getEpochSecond as jni.JMethodIDPtr)
        .long;
  }

  static final _id_getNano = _class.instanceMethodId(
    r"getNano",
    r"()I",
  );

  static final _getNano = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int getNano()
  int getNano() {
    return _getNano(reference.pointer, _id_getNano as jni.JMethodIDPtr).integer;
  }

  static final _id_with0 = _class.instanceMethodId(
    r"with",
    r"(Ljava/time/temporal/TemporalAdjuster;)Ljava/time/Instant;",
  );

  static final _with0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.Instant with(java.time.temporal.TemporalAdjuster temporalAdjuster)
  /// The returned object must be released after use, by calling the [release] method.
  Instant with0(
    jni.JObject temporalAdjuster,
  ) {
    return _with0(reference.pointer, _id_with0 as jni.JMethodIDPtr,
            temporalAdjuster.reference.pointer)
        .object(const $InstantType());
  }

  static final _id_with1 = _class.instanceMethodId(
    r"with",
    r"(Ljava/time/temporal/TemporalField;J)Ljava/time/Instant;",
  );

  static final _with1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.time.Instant with(java.time.temporal.TemporalField temporalField, long j)
  /// The returned object must be released after use, by calling the [release] method.
  Instant with1(
    jni.JObject temporalField,
    int j,
  ) {
    return _with1(reference.pointer, _id_with1 as jni.JMethodIDPtr,
            temporalField.reference.pointer, j)
        .object(const $InstantType());
  }

  static final _id_truncatedTo = _class.instanceMethodId(
    r"truncatedTo",
    r"(Ljava/time/temporal/TemporalUnit;)Ljava/time/Instant;",
  );

  static final _truncatedTo = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.Instant truncatedTo(java.time.temporal.TemporalUnit temporalUnit)
  /// The returned object must be released after use, by calling the [release] method.
  Instant truncatedTo(
    jni.JObject temporalUnit,
  ) {
    return _truncatedTo(reference.pointer, _id_truncatedTo as jni.JMethodIDPtr,
            temporalUnit.reference.pointer)
        .object(const $InstantType());
  }

  static final _id_plus = _class.instanceMethodId(
    r"plus",
    r"(Ljava/time/temporal/TemporalAmount;)Ljava/time/Instant;",
  );

  static final _plus = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.Instant plus(java.time.temporal.TemporalAmount temporalAmount)
  /// The returned object must be released after use, by calling the [release] method.
  Instant plus(
    jni.JObject temporalAmount,
  ) {
    return _plus(reference.pointer, _id_plus as jni.JMethodIDPtr,
            temporalAmount.reference.pointer)
        .object(const $InstantType());
  }

  static final _id_plus1 = _class.instanceMethodId(
    r"plus",
    r"(JLjava/time/temporal/TemporalUnit;)Ljava/time/Instant;",
  );

  static final _plus1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Int64, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.Instant plus(long j, java.time.temporal.TemporalUnit temporalUnit)
  /// The returned object must be released after use, by calling the [release] method.
  Instant plus1(
    int j,
    jni.JObject temporalUnit,
  ) {
    return _plus1(reference.pointer, _id_plus1 as jni.JMethodIDPtr, j,
            temporalUnit.reference.pointer)
        .object(const $InstantType());
  }

  static final _id_plusSeconds = _class.instanceMethodId(
    r"plusSeconds",
    r"(J)Ljava/time/Instant;",
  );

  static final _plusSeconds = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public java.time.Instant plusSeconds(long j)
  /// The returned object must be released after use, by calling the [release] method.
  Instant plusSeconds(
    int j,
  ) {
    return _plusSeconds(
            reference.pointer, _id_plusSeconds as jni.JMethodIDPtr, j)
        .object(const $InstantType());
  }

  static final _id_plusMillis = _class.instanceMethodId(
    r"plusMillis",
    r"(J)Ljava/time/Instant;",
  );

  static final _plusMillis = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public java.time.Instant plusMillis(long j)
  /// The returned object must be released after use, by calling the [release] method.
  Instant plusMillis(
    int j,
  ) {
    return _plusMillis(reference.pointer, _id_plusMillis as jni.JMethodIDPtr, j)
        .object(const $InstantType());
  }

  static final _id_plusNanos = _class.instanceMethodId(
    r"plusNanos",
    r"(J)Ljava/time/Instant;",
  );

  static final _plusNanos = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public java.time.Instant plusNanos(long j)
  /// The returned object must be released after use, by calling the [release] method.
  Instant plusNanos(
    int j,
  ) {
    return _plusNanos(reference.pointer, _id_plusNanos as jni.JMethodIDPtr, j)
        .object(const $InstantType());
  }

  static final _id_minus = _class.instanceMethodId(
    r"minus",
    r"(Ljava/time/temporal/TemporalAmount;)Ljava/time/Instant;",
  );

  static final _minus = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.Instant minus(java.time.temporal.TemporalAmount temporalAmount)
  /// The returned object must be released after use, by calling the [release] method.
  Instant minus(
    jni.JObject temporalAmount,
  ) {
    return _minus(reference.pointer, _id_minus as jni.JMethodIDPtr,
            temporalAmount.reference.pointer)
        .object(const $InstantType());
  }

  static final _id_minus1 = _class.instanceMethodId(
    r"minus",
    r"(JLjava/time/temporal/TemporalUnit;)Ljava/time/Instant;",
  );

  static final _minus1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Int64, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.Instant minus(long j, java.time.temporal.TemporalUnit temporalUnit)
  /// The returned object must be released after use, by calling the [release] method.
  Instant minus1(
    int j,
    jni.JObject temporalUnit,
  ) {
    return _minus1(reference.pointer, _id_minus1 as jni.JMethodIDPtr, j,
            temporalUnit.reference.pointer)
        .object(const $InstantType());
  }

  static final _id_minusSeconds = _class.instanceMethodId(
    r"minusSeconds",
    r"(J)Ljava/time/Instant;",
  );

  static final _minusSeconds = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public java.time.Instant minusSeconds(long j)
  /// The returned object must be released after use, by calling the [release] method.
  Instant minusSeconds(
    int j,
  ) {
    return _minusSeconds(
            reference.pointer, _id_minusSeconds as jni.JMethodIDPtr, j)
        .object(const $InstantType());
  }

  static final _id_minusMillis = _class.instanceMethodId(
    r"minusMillis",
    r"(J)Ljava/time/Instant;",
  );

  static final _minusMillis = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public java.time.Instant minusMillis(long j)
  /// The returned object must be released after use, by calling the [release] method.
  Instant minusMillis(
    int j,
  ) {
    return _minusMillis(
            reference.pointer, _id_minusMillis as jni.JMethodIDPtr, j)
        .object(const $InstantType());
  }

  static final _id_minusNanos = _class.instanceMethodId(
    r"minusNanos",
    r"(J)Ljava/time/Instant;",
  );

  static final _minusNanos = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
                  ffi.VarArgs<(ffi.Int64,)>)>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int)>();

  /// from: public java.time.Instant minusNanos(long j)
  /// The returned object must be released after use, by calling the [release] method.
  Instant minusNanos(
    int j,
  ) {
    return _minusNanos(reference.pointer, _id_minusNanos as jni.JMethodIDPtr, j)
        .object(const $InstantType());
  }

  static final _id_query = _class.instanceMethodId(
    r"query",
    r"(Ljava/time/temporal/TemporalQuery;)Ljava/lang/Object;",
  );

  static final _query = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public R query(java.time.temporal.TemporalQuery temporalQuery)
  /// The returned object must be released after use, by calling the [release] method.
  $R query<$R extends jni.JObject>(
    jni.JObject temporalQuery, {
    required jni.JObjType<$R> R,
  }) {
    return _query(reference.pointer, _id_query as jni.JMethodIDPtr,
            temporalQuery.reference.pointer)
        .object(R);
  }

  static final _id_adjustInto = _class.instanceMethodId(
    r"adjustInto",
    r"(Ljava/time/temporal/Temporal;)Ljava/time/temporal/Temporal;",
  );

  static final _adjustInto = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.temporal.Temporal adjustInto(java.time.temporal.Temporal temporal)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject adjustInto(
    jni.JObject temporal,
  ) {
    return _adjustInto(reference.pointer, _id_adjustInto as jni.JMethodIDPtr,
            temporal.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_until = _class.instanceMethodId(
    r"until",
    r"(Ljava/time/temporal/Temporal;Ljava/time/temporal/TemporalUnit;)J",
  );

  static final _until = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_CallLongMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public long until(java.time.temporal.Temporal temporal, java.time.temporal.TemporalUnit temporalUnit)
  int until(
    jni.JObject temporal,
    jni.JObject temporalUnit,
  ) {
    return _until(reference.pointer, _id_until as jni.JMethodIDPtr,
            temporal.reference.pointer, temporalUnit.reference.pointer)
        .long;
  }

  static final _id_atOffset = _class.instanceMethodId(
    r"atOffset",
    r"(Ljava/time/ZoneOffset;)Ljava/time/OffsetDateTime;",
  );

  static final _atOffset = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.OffsetDateTime atOffset(java.time.ZoneOffset zoneOffset)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject atOffset(
    jni.JObject zoneOffset,
  ) {
    return _atOffset(reference.pointer, _id_atOffset as jni.JMethodIDPtr,
            zoneOffset.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_atZone = _class.instanceMethodId(
    r"atZone",
    r"(Ljava/time/ZoneId;)Ljava/time/ZonedDateTime;",
  );

  static final _atZone = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.ZonedDateTime atZone(java.time.ZoneId zoneId)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject atZone(
    jni.JObject zoneId,
  ) {
    return _atZone(reference.pointer, _id_atZone as jni.JMethodIDPtr,
            zoneId.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_toEpochMilli = _class.instanceMethodId(
    r"toEpochMilli",
    r"()J",
  );

  static final _toEpochMilli = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallLongMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public long toEpochMilli()
  int toEpochMilli() {
    return _toEpochMilli(
            reference.pointer, _id_toEpochMilli as jni.JMethodIDPtr)
        .long;
  }

  static final _id_compareTo = _class.instanceMethodId(
    r"compareTo",
    r"(Ljava/time/Instant;)I",
  );

  static final _compareTo = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public int compareTo(java.time.Instant instant)
  int compareTo(
    Instant instant,
  ) {
    return _compareTo(reference.pointer, _id_compareTo as jni.JMethodIDPtr,
            instant.reference.pointer)
        .integer;
  }

  static final _id_isAfter = _class.instanceMethodId(
    r"isAfter",
    r"(Ljava/time/Instant;)Z",
  );

  static final _isAfter = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isAfter(java.time.Instant instant)
  bool isAfter(
    Instant instant,
  ) {
    return _isAfter(reference.pointer, _id_isAfter as jni.JMethodIDPtr,
            instant.reference.pointer)
        .boolean;
  }

  static final _id_isBefore = _class.instanceMethodId(
    r"isBefore",
    r"(Ljava/time/Instant;)Z",
  );

  static final _isBefore = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean isBefore(java.time.Instant instant)
  bool isBefore(
    Instant instant,
  ) {
    return _isBefore(reference.pointer, _id_isBefore as jni.JMethodIDPtr,
            instant.reference.pointer)
        .boolean;
  }

  static final _id_equals = _class.instanceMethodId(
    r"equals",
    r"(Ljava/lang/Object;)Z",
  );

  static final _equals = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object object)
  bool equals(
    jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_hashCode1 = _class.instanceMethodId(
    r"hashCode",
    r"()I",
  );

  static final _hashCode1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int hashCode()
  int hashCode1() {
    return _hashCode1(reference.pointer, _id_hashCode1 as jni.JMethodIDPtr)
        .integer;
  }

  static final _id_toString1 = _class.instanceMethodId(
    r"toString",
    r"()Ljava/lang/String;",
  );

  static final _toString1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public java.lang.String toString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString toString1() {
    return _toString1(reference.pointer, _id_toString1 as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_minus2 = _class.instanceMethodId(
    r"minus",
    r"(JLjava/time/temporal/TemporalUnit;)Ljava/time/temporal/Temporal;",
  );

  static final _minus2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Int64, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.temporal.Temporal minus(long j, java.time.temporal.TemporalUnit temporalUnit)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject minus2(
    int j,
    jni.JObject temporalUnit,
  ) {
    return _minus2(reference.pointer, _id_minus2 as jni.JMethodIDPtr, j,
            temporalUnit.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_minus3 = _class.instanceMethodId(
    r"minus",
    r"(Ljava/time/temporal/TemporalAmount;)Ljava/time/temporal/Temporal;",
  );

  static final _minus3 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.temporal.Temporal minus(java.time.temporal.TemporalAmount temporalAmount)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject minus3(
    jni.JObject temporalAmount,
  ) {
    return _minus3(reference.pointer, _id_minus3 as jni.JMethodIDPtr,
            temporalAmount.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_plus2 = _class.instanceMethodId(
    r"plus",
    r"(JLjava/time/temporal/TemporalUnit;)Ljava/time/temporal/Temporal;",
  );

  static final _plus2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Int64, ffi.Pointer<ffi.Void>)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr, int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.temporal.Temporal plus(long j, java.time.temporal.TemporalUnit temporalUnit)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject plus2(
    int j,
    jni.JObject temporalUnit,
  ) {
    return _plus2(reference.pointer, _id_plus2 as jni.JMethodIDPtr, j,
            temporalUnit.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_plus3 = _class.instanceMethodId(
    r"plus",
    r"(Ljava/time/temporal/TemporalAmount;)Ljava/time/temporal/Temporal;",
  );

  static final _plus3 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.temporal.Temporal plus(java.time.temporal.TemporalAmount temporalAmount)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject plus3(
    jni.JObject temporalAmount,
  ) {
    return _plus3(reference.pointer, _id_plus3 as jni.JMethodIDPtr,
            temporalAmount.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_with2 = _class.instanceMethodId(
    r"with",
    r"(Ljava/time/temporal/TemporalField;J)Ljava/time/temporal/Temporal;",
  );

  static final _with2 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>, ffi.Int64)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, int)>();

  /// from: public java.time.temporal.Temporal with(java.time.temporal.TemporalField temporalField, long j)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject with2(
    jni.JObject temporalField,
    int j,
  ) {
    return _with2(reference.pointer, _id_with2 as jni.JMethodIDPtr,
            temporalField.reference.pointer, j)
        .object(const jni.JObjectType());
  }

  static final _id_with3 = _class.instanceMethodId(
    r"with",
    r"(Ljava/time/temporal/TemporalAdjuster;)Ljava/time/temporal/Temporal;",
  );

  static final _with3 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public java.time.temporal.Temporal with(java.time.temporal.TemporalAdjuster temporalAdjuster)
  /// The returned object must be released after use, by calling the [release] method.
  jni.JObject with3(
    jni.JObject temporalAdjuster,
  ) {
    return _with3(reference.pointer, _id_with3 as jni.JMethodIDPtr,
            temporalAdjuster.reference.pointer)
        .object(const jni.JObjectType());
  }

  static final _id_compareTo1 = _class.instanceMethodId(
    r"compareTo",
    r"(Ljava/lang/Object;)I",
  );

  static final _compareTo1 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public int compareTo(java.lang.Object object)
  int compareTo1(
    jni.JObject object,
  ) {
    return _compareTo1(reference.pointer, _id_compareTo1 as jni.JMethodIDPtr,
            object.reference.pointer)
        .integer;
  }
}

final class $InstantType extends jni.JObjType<Instant> {
  const $InstantType();

  @override
  String get signature => r"Ljava/time/Instant;";

  @override
  Instant fromReference(jni.JReference reference) =>
      Instant.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($InstantType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($InstantType) && other is $InstantType;
  }
}

/// from: androidx.health.connect.client.request.AggregateGroupByDurationRequest
class AggregateGroupByDurationRequest extends jni.JObject {
  @override
  late final jni.JObjType<AggregateGroupByDurationRequest> $type = type;

  AggregateGroupByDurationRequest.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r"androidx/health/connect/client/request/AggregateGroupByDurationRequest");

  /// The type which includes information such as the signature of this class.
  static const type = $AggregateGroupByDurationRequestType();
  static final _id_new0 = _class.constructorId(
    r"(Ljava/util/Set;Landroidx/health/connect/client/time/TimeRangeFilter;Ljava/time/Duration;Ljava/util/Set;)V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.util.Set set, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, java.time.Duration duration, java.util.Set set1)
  /// The returned object must be released after use, by calling the [release] method.
  factory AggregateGroupByDurationRequest(
    jni.JSet<AggregateMetric<jni.JObject>> set0,
    TimeRangeFilter timeRangeFilter,
    jni.JObject duration,
    jni.JSet<jni.JObject> set1,
  ) {
    return AggregateGroupByDurationRequest.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            set0.reference.pointer,
            timeRangeFilter.reference.pointer,
            duration.reference.pointer,
            set1.reference.pointer)
        .reference);
  }

  static final _id_new1 = _class.constructorId(
    r"(Ljava/util/Set;Landroidx/health/connect/client/time/TimeRangeFilter;Ljava/time/Duration;Ljava/util/Set;ILkotlin/jvm/internal/DefaultConstructorMarker;)V",
  );

  static final _new1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.util.Set set, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, java.time.Duration duration, java.util.Set set1, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory AggregateGroupByDurationRequest.new1(
    jni.JSet<jni.JObject> set0,
    TimeRangeFilter timeRangeFilter,
    jni.JObject duration,
    jni.JSet<jni.JObject> set1,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return AggregateGroupByDurationRequest.fromReference(_new1(
            _class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr,
            set0.reference.pointer,
            timeRangeFilter.reference.pointer,
            duration.reference.pointer,
            set1.reference.pointer,
            i,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $AggregateGroupByDurationRequestType
    extends jni.JObjType<AggregateGroupByDurationRequest> {
  const $AggregateGroupByDurationRequestType();

  @override
  String get signature =>
      r"Landroidx/health/connect/client/request/AggregateGroupByDurationRequest;";

  @override
  AggregateGroupByDurationRequest fromReference(jni.JReference reference) =>
      AggregateGroupByDurationRequest.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($AggregateGroupByDurationRequestType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($AggregateGroupByDurationRequestType) &&
        other is $AggregateGroupByDurationRequestType;
  }
}

/// from: androidx.health.connect.client.request.AggregateGroupByPeriodRequest
class AggregateGroupByPeriodRequest extends jni.JObject {
  @override
  late final jni.JObjType<AggregateGroupByPeriodRequest> $type = type;

  AggregateGroupByPeriodRequest.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r"androidx/health/connect/client/request/AggregateGroupByPeriodRequest");

  /// The type which includes information such as the signature of this class.
  static const type = $AggregateGroupByPeriodRequestType();
  static final _id_new0 = _class.constructorId(
    r"(Ljava/util/Set;Landroidx/health/connect/client/time/TimeRangeFilter;Ljava/time/Period;Ljava/util/Set;)V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.util.Set set, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, java.time.Period period, java.util.Set set1)
  /// The returned object must be released after use, by calling the [release] method.
  factory AggregateGroupByPeriodRequest(
    jni.JSet<AggregateMetric<jni.JObject>> set0,
    TimeRangeFilter timeRangeFilter,
    jni.JObject period,
    jni.JSet<jni.JObject> set1,
  ) {
    return AggregateGroupByPeriodRequest.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            set0.reference.pointer,
            timeRangeFilter.reference.pointer,
            period.reference.pointer,
            set1.reference.pointer)
        .reference);
  }

  static final _id_new1 = _class.constructorId(
    r"(Ljava/util/Set;Landroidx/health/connect/client/time/TimeRangeFilter;Ljava/time/Period;Ljava/util/Set;ILkotlin/jvm/internal/DefaultConstructorMarker;)V",
  );

  static final _new1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.util.Set set, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, java.time.Period period, java.util.Set set1, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory AggregateGroupByPeriodRequest.new1(
    jni.JSet<jni.JObject> set0,
    TimeRangeFilter timeRangeFilter,
    jni.JObject period,
    jni.JSet<jni.JObject> set1,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return AggregateGroupByPeriodRequest.fromReference(_new1(
            _class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr,
            set0.reference.pointer,
            timeRangeFilter.reference.pointer,
            period.reference.pointer,
            set1.reference.pointer,
            i,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $AggregateGroupByPeriodRequestType
    extends jni.JObjType<AggregateGroupByPeriodRequest> {
  const $AggregateGroupByPeriodRequestType();

  @override
  String get signature =>
      r"Landroidx/health/connect/client/request/AggregateGroupByPeriodRequest;";

  @override
  AggregateGroupByPeriodRequest fromReference(jni.JReference reference) =>
      AggregateGroupByPeriodRequest.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($AggregateGroupByPeriodRequestType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($AggregateGroupByPeriodRequestType) &&
        other is $AggregateGroupByPeriodRequestType;
  }
}

/// from: androidx.health.connect.client.request.AggregateRequest
class AggregateRequest extends jni.JObject {
  @override
  late final jni.JObjType<AggregateRequest> $type = type;

  AggregateRequest.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r"androidx/health/connect/client/request/AggregateRequest");

  /// The type which includes information such as the signature of this class.
  static const type = $AggregateRequestType();
  static final _id_new0 = _class.constructorId(
    r"(Ljava/util/Set;Landroidx/health/connect/client/time/TimeRangeFilter;Ljava/util/Set;)V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.util.Set set, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, java.util.Set set1)
  /// The returned object must be released after use, by calling the [release] method.
  factory AggregateRequest(
    jni.JSet<AggregateMetric<jni.JObject>> set0,
    TimeRangeFilter timeRangeFilter,
    jni.JSet<jni.JObject> set1,
  ) {
    return AggregateRequest.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            set0.reference.pointer,
            timeRangeFilter.reference.pointer,
            set1.reference.pointer)
        .reference);
  }

  static final _id_new1 = _class.constructorId(
    r"(Ljava/util/Set;Landroidx/health/connect/client/time/TimeRangeFilter;Ljava/util/Set;ILkotlin/jvm/internal/DefaultConstructorMarker;)V",
  );

  static final _new1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.util.Set set, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, java.util.Set set1, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory AggregateRequest.new1(
    jni.JSet<jni.JObject> set0,
    TimeRangeFilter timeRangeFilter,
    jni.JSet<jni.JObject> set1,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return AggregateRequest.fromReference(_new1(
            _class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr,
            set0.reference.pointer,
            timeRangeFilter.reference.pointer,
            set1.reference.pointer,
            i,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $AggregateRequestType extends jni.JObjType<AggregateRequest> {
  const $AggregateRequestType();

  @override
  String get signature =>
      r"Landroidx/health/connect/client/request/AggregateRequest;";

  @override
  AggregateRequest fromReference(jni.JReference reference) =>
      AggregateRequest.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($AggregateRequestType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($AggregateRequestType) &&
        other is $AggregateRequestType;
  }
}

/// from: androidx.health.connect.client.request.ChangesTokenRequest
class ChangesTokenRequest extends jni.JObject {
  @override
  late final jni.JObjType<ChangesTokenRequest> $type = type;

  ChangesTokenRequest.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r"androidx/health/connect/client/request/ChangesTokenRequest");

  /// The type which includes information such as the signature of this class.
  static const type = $ChangesTokenRequestType();
  static final _id_new0 = _class.constructorId(
    r"(Ljava/util/Set;Ljava/util/Set;)V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.util.Set set, java.util.Set set1)
  /// The returned object must be released after use, by calling the [release] method.
  factory ChangesTokenRequest(
    jni.JSet<jni.JObject> set0,
    jni.JSet<jni.JObject> set1,
  ) {
    return ChangesTokenRequest.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            set0.reference.pointer,
            set1.reference.pointer)
        .reference);
  }

  static final _id_new1 = _class.constructorId(
    r"(Ljava/util/Set;Ljava/util/Set;ILkotlin/jvm/internal/DefaultConstructorMarker;)V",
  );

  static final _new1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.util.Set set, java.util.Set set1, int i, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory ChangesTokenRequest.new1(
    jni.JSet<jni.JObject> set0,
    jni.JSet<jni.JObject> set1,
    int i,
    jni.JObject defaultConstructorMarker,
  ) {
    return ChangesTokenRequest.fromReference(_new1(
            _class.reference.pointer,
            _id_new1 as jni.JMethodIDPtr,
            set0.reference.pointer,
            set1.reference.pointer,
            i,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $ChangesTokenRequestType extends jni.JObjType<ChangesTokenRequest> {
  const $ChangesTokenRequestType();

  @override
  String get signature =>
      r"Landroidx/health/connect/client/request/ChangesTokenRequest;";

  @override
  ChangesTokenRequest fromReference(jni.JReference reference) =>
      ChangesTokenRequest.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($ChangesTokenRequestType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ChangesTokenRequestType) &&
        other is $ChangesTokenRequestType;
  }
}

/// from: androidx.health.connect.client.request.ReadRecordsRequest
class ReadRecordsRequest<$T extends jni.JObject> extends jni.JObject {
  @override
  late final jni.JObjType<ReadRecordsRequest<$T>> $type = type(T);

  final jni.JObjType<$T> T;

  ReadRecordsRequest.fromReference(
    this.T,
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r"androidx/health/connect/client/request/ReadRecordsRequest");

  /// The type which includes information such as the signature of this class.
  static $ReadRecordsRequestType<$T> type<$T extends jni.JObject>(
    jni.JObjType<$T> T,
  ) {
    return $ReadRecordsRequestType(
      T,
    );
  }

  static final _id_new0 = _class.constructorId(
    r"(Lkotlin/reflect/KClass;Landroidx/health/connect/client/time/TimeRangeFilter;Ljava/util/Set;ZILjava/lang/String;)V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(kotlin.reflect.KClass kClass, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, java.util.Set set, boolean z, int i, java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  factory ReadRecordsRequest(
    jni.JObject kClass,
    TimeRangeFilter timeRangeFilter,
    jni.JSet<jni.JObject> set0,
    bool z,
    int i,
    jni.JString string, {
    required jni.JObjType<$T> T,
  }) {
    return ReadRecordsRequest.fromReference(
        T,
        _new0(
                _class.reference.pointer,
                _id_new0 as jni.JMethodIDPtr,
                kClass.reference.pointer,
                timeRangeFilter.reference.pointer,
                set0.reference.pointer,
                z ? 1 : 0,
                i,
                string.reference.pointer)
            .reference);
  }

  static final _id_new1 = _class.constructorId(
    r"(Lkotlin/reflect/KClass;Landroidx/health/connect/client/time/TimeRangeFilter;Ljava/util/Set;ZILjava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V",
  );

  static final _new1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>,
                        ffi.Int64,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              int,
              int,
              ffi.Pointer<ffi.Void>,
              int,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(kotlin.reflect.KClass kClass, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, java.util.Set set, boolean z, int i, java.lang.String string, int i1, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory ReadRecordsRequest.new1(
    jni.JObject kClass,
    TimeRangeFilter timeRangeFilter,
    jni.JSet<jni.JObject> set0,
    bool z,
    int i,
    jni.JString string,
    int i1,
    jni.JObject defaultConstructorMarker, {
    required jni.JObjType<$T> T,
  }) {
    return ReadRecordsRequest.fromReference(
        T,
        _new1(
                _class.reference.pointer,
                _id_new1 as jni.JMethodIDPtr,
                kClass.reference.pointer,
                timeRangeFilter.reference.pointer,
                set0.reference.pointer,
                z ? 1 : 0,
                i,
                string.reference.pointer,
                i1,
                defaultConstructorMarker.reference.pointer)
            .reference);
  }

  static final _id_equals = _class.instanceMethodId(
    r"equals",
    r"(Ljava/lang/Object;)Z",
  );

  static final _equals = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public boolean equals(java.lang.Object object)
  bool equals(
    jni.JObject object,
  ) {
    return _equals(reference.pointer, _id_equals as jni.JMethodIDPtr,
            object.reference.pointer)
        .boolean;
  }

  static final _id_hashCode1 = _class.instanceMethodId(
    r"hashCode",
    r"()I",
  );

  static final _hashCode1 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallIntMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public int hashCode()
  int hashCode1() {
    return _hashCode1(reference.pointer, _id_hashCode1 as jni.JMethodIDPtr)
        .integer;
  }
}

final class $ReadRecordsRequestType<$T extends jni.JObject>
    extends jni.JObjType<ReadRecordsRequest<$T>> {
  final jni.JObjType<$T> T;

  const $ReadRecordsRequestType(
    this.T,
  );

  @override
  String get signature =>
      r"Landroidx/health/connect/client/request/ReadRecordsRequest;";

  @override
  ReadRecordsRequest<$T> fromReference(jni.JReference reference) =>
      ReadRecordsRequest.fromReference(T, reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => Object.hash($ReadRecordsRequestType, T);

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($ReadRecordsRequestType<$T>) &&
        other is $ReadRecordsRequestType<$T> &&
        T == other.T;
  }
}

/// from: androidx.health.connect.client.aggregate.AggregationResult
class AggregationResult extends jni.JObject {
  @override
  late final jni.JObjType<AggregationResult> $type = type;

  AggregationResult.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r"androidx/health/connect/client/aggregate/AggregationResult");

  /// The type which includes information such as the signature of this class.
  static const type = $AggregationResultType();
  static final _id_new0 = _class.constructorId(
    r"(Ljava/util/Map;Ljava/util/Map;Ljava/util/Set;)V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(java.util.Map map, java.util.Map map1, java.util.Set set)
  /// The returned object must be released after use, by calling the [release] method.
  factory AggregationResult(
    jni.JMap<jni.JString, jni.JLong> map,
    jni.JMap<jni.JString, jni.JDouble> map1,
    jni.JSet<jni.JObject> set0,
  ) {
    return AggregationResult.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            map.reference.pointer,
            map1.reference.pointer,
            set0.reference.pointer)
        .reference);
  }

  static final _id_getDataOrigins = _class.instanceMethodId(
    r"getDataOrigins",
    r"()Ljava/util/Set;",
  );

  static final _getDataOrigins = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.util.Set getDataOrigins()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JSet<jni.JObject> getDataOrigins() {
    return _getDataOrigins(
            reference.pointer, _id_getDataOrigins as jni.JMethodIDPtr)
        .object(const jni.JSetType(jni.JObjectType()));
  }

  static final _id_hasMetric = _class.instanceMethodId(
    r"hasMetric",
    r"(Landroidx/health/connect/client/aggregate/AggregateMetric;)Z",
  );

  static final _hasMetric = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean hasMetric(androidx.health.connect.client.aggregate.AggregateMetric aggregateMetric)
  bool hasMetric(
    AggregateMetric<jni.JObject> aggregateMetric,
  ) {
    return _hasMetric(reference.pointer, _id_hasMetric as jni.JMethodIDPtr,
            aggregateMetric.reference.pointer)
        .boolean;
  }

  static final _id_contains = _class.instanceMethodId(
    r"contains",
    r"(Landroidx/health/connect/client/aggregate/AggregateMetric;)Z",
  );

  static final _contains = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallBooleanMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final boolean contains(androidx.health.connect.client.aggregate.AggregateMetric aggregateMetric)
  bool contains(
    AggregateMetric<jni.JObject> aggregateMetric,
  ) {
    return _contains(reference.pointer, _id_contains as jni.JMethodIDPtr,
            aggregateMetric.reference.pointer)
        .boolean;
  }

  static final _id_getMetric = _class.instanceMethodId(
    r"getMetric",
    r"(Landroidx/health/connect/client/aggregate/AggregateMetric;)Ljava/lang/Object;",
  );

  static final _getMetric = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final T getMetric(androidx.health.connect.client.aggregate.AggregateMetric aggregateMetric)
  /// The returned object must be released after use, by calling the [release] method.
  $T getMetric<$T extends jni.JObject>(
    AggregateMetric<$T> aggregateMetric, {
    jni.JObjType<$T>? T,
  }) {
    T ??= jni.lowestCommonSuperType([
      (aggregateMetric.$type as $AggregateMetricType).T,
    ]) as jni.JObjType<$T>;
    return _getMetric(reference.pointer, _id_getMetric as jni.JMethodIDPtr,
            aggregateMetric.reference.pointer)
        .object(T);
  }

  static final _id_get0 = _class.instanceMethodId(
    r"get",
    r"(Landroidx/health/connect/client/aggregate/AggregateMetric;)Ljava/lang/Object;",
  );

  static final _get0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public final T get(androidx.health.connect.client.aggregate.AggregateMetric aggregateMetric)
  /// The returned object must be released after use, by calling the [release] method.
  $T get0<$T extends jni.JObject>(
    AggregateMetric<$T> aggregateMetric, {
    jni.JObjType<$T>? T,
  }) {
    T ??= jni.lowestCommonSuperType([
      (aggregateMetric.$type as $AggregateMetricType).T,
    ]) as jni.JObjType<$T>;
    return _get0(reference.pointer, _id_get0 as jni.JMethodIDPtr,
            aggregateMetric.reference.pointer)
        .object(T);
  }
}

final class $AggregationResultType extends jni.JObjType<AggregationResult> {
  const $AggregationResultType();

  @override
  String get signature =>
      r"Landroidx/health/connect/client/aggregate/AggregationResult;";

  @override
  AggregationResult fromReference(jni.JReference reference) =>
      AggregationResult.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($AggregationResultType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($AggregationResultType) &&
        other is $AggregationResultType;
  }
}

/// from: androidx.health.connect.client.aggregate.AggregateMetric$AggregationType
class AggregateMetric_AggregationType extends jni.JObject {
  @override
  late final jni.JObjType<AggregateMetric_AggregationType> $type = type;

  AggregateMetric_AggregationType.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r"androidx/health/connect/client/aggregate/AggregateMetric$AggregationType");

  /// The type which includes information such as the signature of this class.
  static const type = $AggregateMetric_AggregationTypeType();
  static final _id_DURATION = _class.staticFieldId(
    r"DURATION",
    r"Landroidx/health/connect/client/aggregate/AggregateMetric$AggregationType;",
  );

  /// from: static public final androidx.health.connect.client.aggregate.AggregateMetric$AggregationType DURATION
  /// The returned object must be released after use, by calling the [release] method.
  static AggregateMetric_AggregationType get DURATION =>
      _id_DURATION.get(_class, const $AggregateMetric_AggregationTypeType());

  static final _id_AVERAGE = _class.staticFieldId(
    r"AVERAGE",
    r"Landroidx/health/connect/client/aggregate/AggregateMetric$AggregationType;",
  );

  /// from: static public final androidx.health.connect.client.aggregate.AggregateMetric$AggregationType AVERAGE
  /// The returned object must be released after use, by calling the [release] method.
  static AggregateMetric_AggregationType get AVERAGE =>
      _id_AVERAGE.get(_class, const $AggregateMetric_AggregationTypeType());

  static final _id_MINIMUM = _class.staticFieldId(
    r"MINIMUM",
    r"Landroidx/health/connect/client/aggregate/AggregateMetric$AggregationType;",
  );

  /// from: static public final androidx.health.connect.client.aggregate.AggregateMetric$AggregationType MINIMUM
  /// The returned object must be released after use, by calling the [release] method.
  static AggregateMetric_AggregationType get MINIMUM =>
      _id_MINIMUM.get(_class, const $AggregateMetric_AggregationTypeType());

  static final _id_MAXIMUM = _class.staticFieldId(
    r"MAXIMUM",
    r"Landroidx/health/connect/client/aggregate/AggregateMetric$AggregationType;",
  );

  /// from: static public final androidx.health.connect.client.aggregate.AggregateMetric$AggregationType MAXIMUM
  /// The returned object must be released after use, by calling the [release] method.
  static AggregateMetric_AggregationType get MAXIMUM =>
      _id_MAXIMUM.get(_class, const $AggregateMetric_AggregationTypeType());

  static final _id_TOTAL = _class.staticFieldId(
    r"TOTAL",
    r"Landroidx/health/connect/client/aggregate/AggregateMetric$AggregationType;",
  );

  /// from: static public final androidx.health.connect.client.aggregate.AggregateMetric$AggregationType TOTAL
  /// The returned object must be released after use, by calling the [release] method.
  static AggregateMetric_AggregationType get TOTAL =>
      _id_TOTAL.get(_class, const $AggregateMetric_AggregationTypeType());

  static final _id_COUNT = _class.staticFieldId(
    r"COUNT",
    r"Landroidx/health/connect/client/aggregate/AggregateMetric$AggregationType;",
  );

  /// from: static public final androidx.health.connect.client.aggregate.AggregateMetric$AggregationType COUNT
  /// The returned object must be released after use, by calling the [release] method.
  static AggregateMetric_AggregationType get COUNT =>
      _id_COUNT.get(_class, const $AggregateMetric_AggregationTypeType());

  static final _id_getAggregationTypeString = _class.instanceMethodId(
    r"getAggregationTypeString",
    r"()Ljava/lang/String;",
  );

  static final _getAggregationTypeString = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: public final java.lang.String getAggregationTypeString()
  /// The returned object must be released after use, by calling the [release] method.
  jni.JString getAggregationTypeString() {
    return _getAggregationTypeString(
            reference.pointer, _id_getAggregationTypeString as jni.JMethodIDPtr)
        .object(const jni.JStringType());
  }

  static final _id_values = _class.staticMethodId(
    r"values",
    r"()[Landroidx/health/connect/client/aggregate/AggregateMetric$AggregationType;",
  );

  static final _values = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                ffi.Pointer<ffi.Void>,
                jni.JMethodIDPtr,
              )>>("globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(
            ffi.Pointer<ffi.Void>,
            jni.JMethodIDPtr,
          )>();

  /// from: static public androidx.health.connect.client.aggregate.AggregateMetric$AggregationType[] values()
  /// The returned object must be released after use, by calling the [release] method.
  static jni.JArray<AggregateMetric_AggregationType> values() {
    return _values(_class.reference.pointer, _id_values as jni.JMethodIDPtr)
        .object(const jni.JArrayType($AggregateMetric_AggregationTypeType()));
  }

  static final _id_valueOf = _class.staticMethodId(
    r"valueOf",
    r"(Ljava/lang/String;)Landroidx/health/connect/client/aggregate/AggregateMetric$AggregationType;",
  );

  static final _valueOf = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_CallStaticObjectMethod")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: static public androidx.health.connect.client.aggregate.AggregateMetric$AggregationType valueOf(java.lang.String string)
  /// The returned object must be released after use, by calling the [release] method.
  static AggregateMetric_AggregationType valueOf(
    jni.JString string,
  ) {
    return _valueOf(_class.reference.pointer, _id_valueOf as jni.JMethodIDPtr,
            string.reference.pointer)
        .object(const $AggregateMetric_AggregationTypeType());
  }
}

final class $AggregateMetric_AggregationTypeType
    extends jni.JObjType<AggregateMetric_AggregationType> {
  const $AggregateMetric_AggregationTypeType();

  @override
  String get signature =>
      r"Landroidx/health/connect/client/aggregate/AggregateMetric$AggregationType;";

  @override
  AggregateMetric_AggregationType fromReference(jni.JReference reference) =>
      AggregateMetric_AggregationType.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($AggregateMetric_AggregationTypeType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($AggregateMetric_AggregationTypeType) &&
        other is $AggregateMetric_AggregationTypeType;
  }
}

/// from: androidx.health.connect.client.aggregate.AggregateMetric$Companion
class AggregateMetric_Companion extends jni.JObject {
  @override
  late final jni.JObjType<AggregateMetric_Companion> $type = type;

  AggregateMetric_Companion.fromReference(
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r"androidx/health/connect/client/aggregate/AggregateMetric$Companion");

  /// The type which includes information such as the signature of this class.
  static const type = $AggregateMetric_CompanionType();
  static final _id_new0 = _class.constructorId(
    r"(Lkotlin/jvm/internal/DefaultConstructorMarker;)V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
              ffi.NativeFunction<
                  jni.JniResult Function(
                      ffi.Pointer<ffi.Void>,
                      jni.JMethodIDPtr,
                      ffi.VarArgs<(ffi.Pointer<ffi.Void>,)>)>>(
          "globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(ffi.Pointer<ffi.Void>, jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)
  /// The returned object must be released after use, by calling the [release] method.
  factory AggregateMetric_Companion(
    jni.JObject defaultConstructorMarker,
  ) {
    return AggregateMetric_Companion.fromReference(_new0(
            _class.reference.pointer,
            _id_new0 as jni.JMethodIDPtr,
            defaultConstructorMarker.reference.pointer)
        .reference);
  }
}

final class $AggregateMetric_CompanionType
    extends jni.JObjType<AggregateMetric_Companion> {
  const $AggregateMetric_CompanionType();

  @override
  String get signature =>
      r"Landroidx/health/connect/client/aggregate/AggregateMetric$Companion;";

  @override
  AggregateMetric_Companion fromReference(jni.JReference reference) =>
      AggregateMetric_Companion.fromReference(reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => ($AggregateMetric_CompanionType).hashCode;

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($AggregateMetric_CompanionType) &&
        other is $AggregateMetric_CompanionType;
  }
}

/// from: androidx.health.connect.client.aggregate.AggregateMetric$Converter$FromDouble
class AggregateMetric_Converter_FromDouble<$R extends jni.JObject>
    extends jni.JObject {
  @override
  late final jni.JObjType<AggregateMetric_Converter_FromDouble<$R>> $type =
      type(R);

  final jni.JObjType<$R> R;

  AggregateMetric_Converter_FromDouble.fromReference(
    this.R,
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r"androidx/health/connect/client/aggregate/AggregateMetric$Converter$FromDouble");

  /// The type which includes information such as the signature of this class.
  static $AggregateMetric_Converter_FromDoubleType<$R>
      type<$R extends jni.JObject>(
    jni.JObjType<$R> R,
  ) {
    return $AggregateMetric_Converter_FromDoubleType(
      R,
    );
  }
}

final class $AggregateMetric_Converter_FromDoubleType<$R extends jni.JObject>
    extends jni.JObjType<AggregateMetric_Converter_FromDouble<$R>> {
  final jni.JObjType<$R> R;

  const $AggregateMetric_Converter_FromDoubleType(
    this.R,
  );

  @override
  String get signature =>
      r"Landroidx/health/connect/client/aggregate/AggregateMetric$Converter$FromDouble;";

  @override
  AggregateMetric_Converter_FromDouble<$R> fromReference(
          jni.JReference reference) =>
      AggregateMetric_Converter_FromDouble.fromReference(R, reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => Object.hash($AggregateMetric_Converter_FromDoubleType, R);

  @override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($AggregateMetric_Converter_FromDoubleType<$R>) &&
        other is $AggregateMetric_Converter_FromDoubleType<$R> &&
        R == other.R;
  }
}

/// from: androidx.health.connect.client.aggregate.AggregateMetric$Converter$FromLong
class AggregateMetric_Converter_FromLong<$R extends jni.JObject>
    extends jni.JObject {
  @override
  late final jni.JObjType<AggregateMetric_Converter_FromLong<$R>> $type =
      type(R);

  final jni.JObjType<$R> R;

  AggregateMetric_Converter_FromLong.fromReference(
    this.R,
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r"androidx/health/connect/client/aggregate/AggregateMetric$Converter$FromLong");

  /// The type which includes information such as the signature of this class.
  static $AggregateMetric_Converter_FromLongType<$R>
      type<$R extends jni.JObject>(
    jni.JObjType<$R> R,
  ) {
    return $AggregateMetric_Converter_FromLongType(
      R,
    );
  }
}

final class $AggregateMetric_Converter_FromLongType<$R extends jni.JObject>
    extends jni.JObjType<AggregateMetric_Converter_FromLong<$R>> {
  final jni.JObjType<$R> R;

  const $AggregateMetric_Converter_FromLongType(
    this.R,
  );

  @override
  String get signature =>
      r"Landroidx/health/connect/client/aggregate/AggregateMetric$Converter$FromLong;";

  @override
  AggregateMetric_Converter_FromLong<$R> fromReference(
          jni.JReference reference) =>
      AggregateMetric_Converter_FromLong.fromReference(R, reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => Object.hash($AggregateMetric_Converter_FromLongType, R);

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($AggregateMetric_Converter_FromLongType<$R>) &&
        other is $AggregateMetric_Converter_FromLongType<$R> &&
        R == other.R;
  }
}

/// from: androidx.health.connect.client.aggregate.AggregateMetric$Converter
class AggregateMetric_Converter<$T extends jni.JObject, $R extends jni.JObject>
    extends jni.JObject {
  @override
  late final jni.JObjType<AggregateMetric_Converter<$T, $R>> $type = type(T, R);

  final jni.JObjType<$T> T;
  final jni.JObjType<$R> R;

  AggregateMetric_Converter.fromReference(
    this.T,
    this.R,
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r"androidx/health/connect/client/aggregate/AggregateMetric$Converter");

  /// The type which includes information such as the signature of this class.
  static $AggregateMetric_ConverterType<$T, $R>
      type<$T extends jni.JObject, $R extends jni.JObject>(
    jni.JObjType<$T> T,
    jni.JObjType<$R> R,
  ) {
    return $AggregateMetric_ConverterType(
      T,
      R,
    );
  }
}

final class $AggregateMetric_ConverterType<$T extends jni.JObject,
        $R extends jni.JObject>
    extends jni.JObjType<AggregateMetric_Converter<$T, $R>> {
  final jni.JObjType<$T> T;
  final jni.JObjType<$R> R;

  const $AggregateMetric_ConverterType(
    this.T,
    this.R,
  );

  @override
  String get signature =>
      r"Landroidx/health/connect/client/aggregate/AggregateMetric$Converter;";

  @override
  AggregateMetric_Converter<$T, $R> fromReference(jni.JReference reference) =>
      AggregateMetric_Converter.fromReference(T, R, reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => Object.hash($AggregateMetric_ConverterType, T, R);

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($AggregateMetric_ConverterType<$T, $R>) &&
        other is $AggregateMetric_ConverterType<$T, $R> &&
        T == other.T &&
        R == other.R;
  }
}

/// from: androidx.health.connect.client.aggregate.AggregateMetric
class AggregateMetric<$T extends jni.JObject> extends jni.JObject {
  @override
  late final jni.JObjType<AggregateMetric<$T>> $type = type(T);

  final jni.JObjType<$T> T;

  AggregateMetric.fromReference(
    this.T,
    jni.JReference reference,
  ) : super.fromReference(reference);

  static final _class = jni.JClass.forName(
      r"androidx/health/connect/client/aggregate/AggregateMetric");

  /// The type which includes information such as the signature of this class.
  static $AggregateMetricType<$T> type<$T extends jni.JObject>(
    jni.JObjType<$T> T,
  ) {
    return $AggregateMetricType(
      T,
    );
  }

  static final _id_Companion = _class.staticFieldId(
    r"Companion",
    r"Landroidx/health/connect/client/aggregate/AggregateMetric$Companion;",
  );

  /// from: static public final androidx.health.connect.client.aggregate.AggregateMetric$Companion Companion
  /// The returned object must be released after use, by calling the [release] method.
  static AggregateMetric_Companion get Companion =>
      _id_Companion.get(_class, const $AggregateMetric_CompanionType());

  static final _id_new0 = _class.constructorId(
    r"(Landroidx/health/connect/client/aggregate/AggregateMetric$Converter;Ljava/lang/String;Landroidx/health/connect/client/aggregate/AggregateMetric$AggregationType;Ljava/lang/String;)V",
  );

  static final _new0 = ProtectedJniExtensions.lookup<
          ffi.NativeFunction<
              jni.JniResult Function(
                  ffi.Pointer<ffi.Void>,
                  jni.JMethodIDPtr,
                  ffi.VarArgs<
                      (
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>,
                        ffi.Pointer<ffi.Void>
                      )>)>>("globalEnv_NewObject")
      .asFunction<
          jni.JniResult Function(
              ffi.Pointer<ffi.Void>,
              jni.JMethodIDPtr,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>();

  /// from: public void <init>(androidx.health.connect.client.aggregate.AggregateMetric$Converter converter, java.lang.String string, androidx.health.connect.client.aggregate.AggregateMetric$AggregationType aggregationType, java.lang.String string1)
  /// The returned object must be released after use, by calling the [release] method.
  factory AggregateMetric(
    AggregateMetric_Converter<jni.JObject, $T> converter,
    jni.JString string,
    AggregateMetric_AggregationType aggregationType,
    jni.JString string1, {
    jni.JObjType<$T>? T,
  }) {
    T ??= jni.lowestCommonSuperType([
      (converter.$type as $AggregateMetric_ConverterType).R,
    ]) as jni.JObjType<$T>;
    return AggregateMetric.fromReference(
        T,
        _new0(
                _class.reference.pointer,
                _id_new0 as jni.JMethodIDPtr,
                converter.reference.pointer,
                string.reference.pointer,
                aggregationType.reference.pointer,
                string1.reference.pointer)
            .reference);
  }
}

final class $AggregateMetricType<$T extends jni.JObject>
    extends jni.JObjType<AggregateMetric<$T>> {
  final jni.JObjType<$T> T;

  const $AggregateMetricType(
    this.T,
  );

  @override
  String get signature =>
      r"Landroidx/health/connect/client/aggregate/AggregateMetric;";

  @override
  AggregateMetric<$T> fromReference(jni.JReference reference) =>
      AggregateMetric.fromReference(T, reference);

  @override
  jni.JObjType get superType => const jni.JObjectType();

  @override
  final superCount = 1;

  @override
  int get hashCode => Object.hash($AggregateMetricType, T);

  @override
  bool operator ==(Object other) {
    return other.runtimeType == ($AggregateMetricType<$T>) &&
        other is $AggregateMetricType<$T> &&
        T == other.T;
  }
}
